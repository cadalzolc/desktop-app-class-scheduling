{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../node_modules/svelte/easing/index.mjs","../../node_modules/svelte/transition/index.mjs","../../node_modules/svelte/store/index.mjs","../../src/stores/ui.js","../../src/components/Header.svelte","../../src/components/SideMenu.svelte","../../src/components/AddButton.svelte","../../src/components/AddWindowViews/AddCourse.svelte","../../src/components/AddWindowViews/AddProfessor.svelte","../../src/components/AddWindowViews/AddProgram.svelte","../../src/components/AddWindowViews/AddRoom.svelte","../../src/utils/helpers.js","../../src/components/AddWindowViews/AddSchedule.svelte","../../src/components/AddWindowViews/AddAdviseTime.svelte","../../src/components/AddWindow.svelte","../../src/components/EditWindowViews/EditCourse.svelte","../../src/components/EditWindowViews/EditProfessor.svelte","../../src/components/EditWindowViews/EditProgram.svelte","../../src/components/EditWindowViews/EditRoom.svelte","../../src/components/EditWindowViews/EditAdviseTime.svelte","../../src/components/EditWindow.svelte","../../src/components/DeleteWindow.svelte","../../src/components/DeleteScheduleWindow.svelte","../../src/components/ResetPasswordWindow.svelte","../../src/components/ExitApplicationWindow.svelte","../../src/components/Logo.svelte","../../src/views/Dashboard.svelte","../../src/views/Courses.svelte","../../src/views/Rooms.svelte","../../src/views/Professors.svelte","../../src/views/Programs.svelte","../../src/views/Subjects.svelte","../../src/views/Schedules.svelte","../../src/components/SettingsWindowViews/SettingsSchool.svelte","../../src/components/SettingsWindowViews/SettingsPassword.svelte","../../src/components/SettingsWindow.svelte","../../src/components/LoadingScreen.svelte","../../src/components/LoginScreen.svelte","../../src/views/individualViews/RoomView.svelte","../../src/views/individualViews/professorView.svelte","../../src/views/individualViews/ProgramView.svelte","../../src/views/individualViews/AdviceTime.svelte","../../src/views/CustomModal.svelte","../../src/views/Popup.svelte","../../src/views/stores.js","../../src/views/ProfessorOverview.svelte","../../src/App.svelte","../../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value === null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            else\n                this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (flushidx < dirty_components.length) {\n            const component = dirty_components[flushidx];\n            flushidx++;\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${style_object[key]};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.50.1' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        throw new Error(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","export { identity as linear } from '../internal/index.mjs';\n\n/*\nAdapted from https://github.com/mattdesl\nDistributed under MIT License https://github.com/mattdesl/eases/blob/master/LICENSE.md\n*/\nfunction backInOut(t) {\n    const s = 1.70158 * 1.525;\n    if ((t *= 2) < 1)\n        return 0.5 * (t * t * ((s + 1) * t - s));\n    return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2);\n}\nfunction backIn(t) {\n    const s = 1.70158;\n    return t * t * ((s + 1) * t - s);\n}\nfunction backOut(t) {\n    const s = 1.70158;\n    return --t * t * ((s + 1) * t + s) + 1;\n}\nfunction bounceOut(t) {\n    const a = 4.0 / 11.0;\n    const b = 8.0 / 11.0;\n    const c = 9.0 / 10.0;\n    const ca = 4356.0 / 361.0;\n    const cb = 35442.0 / 1805.0;\n    const cc = 16061.0 / 1805.0;\n    const t2 = t * t;\n    return t < a\n        ? 7.5625 * t2\n        : t < b\n            ? 9.075 * t2 - 9.9 * t + 3.4\n            : t < c\n                ? ca * t2 - cb * t + cc\n                : 10.8 * t * t - 20.52 * t + 10.72;\n}\nfunction bounceInOut(t) {\n    return t < 0.5\n        ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n        : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\n}\nfunction bounceIn(t) {\n    return 1.0 - bounceOut(1.0 - t);\n}\nfunction circInOut(t) {\n    if ((t *= 2) < 1)\n        return -0.5 * (Math.sqrt(1 - t * t) - 1);\n    return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);\n}\nfunction circIn(t) {\n    return 1.0 - Math.sqrt(1.0 - t * t);\n}\nfunction circOut(t) {\n    return Math.sqrt(1 - --t * t);\n}\nfunction cubicInOut(t) {\n    return t < 0.5 ? 4.0 * t * t * t : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0;\n}\nfunction cubicIn(t) {\n    return t * t * t;\n}\nfunction cubicOut(t) {\n    const f = t - 1.0;\n    return f * f * f + 1.0;\n}\nfunction elasticInOut(t) {\n    return t < 0.5\n        ? 0.5 *\n            Math.sin(((+13.0 * Math.PI) / 2) * 2.0 * t) *\n            Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n        : 0.5 *\n            Math.sin(((-13.0 * Math.PI) / 2) * (2.0 * t - 1.0 + 1.0)) *\n            Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) +\n            1.0;\n}\nfunction elasticIn(t) {\n    return Math.sin((13.0 * t * Math.PI) / 2) * Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction elasticOut(t) {\n    return (Math.sin((-13.0 * (t + 1.0) * Math.PI) / 2) * Math.pow(2.0, -10.0 * t) + 1.0);\n}\nfunction expoInOut(t) {\n    return t === 0.0 || t === 1.0\n        ? t\n        : t < 0.5\n            ? +0.5 * Math.pow(2.0, 20.0 * t - 10.0)\n            : -0.5 * Math.pow(2.0, 10.0 - t * 20.0) + 1.0;\n}\nfunction expoIn(t) {\n    return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0));\n}\nfunction expoOut(t) {\n    return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t);\n}\nfunction quadInOut(t) {\n    t /= 0.5;\n    if (t < 1)\n        return 0.5 * t * t;\n    t--;\n    return -0.5 * (t * (t - 2) - 1);\n}\nfunction quadIn(t) {\n    return t * t;\n}\nfunction quadOut(t) {\n    return -t * (t - 2.0);\n}\nfunction quartInOut(t) {\n    return t < 0.5\n        ? +8.0 * Math.pow(t, 4.0)\n        : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0;\n}\nfunction quartIn(t) {\n    return Math.pow(t, 4.0);\n}\nfunction quartOut(t) {\n    return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\n}\nfunction quintInOut(t) {\n    if ((t *= 2) < 1)\n        return 0.5 * t * t * t * t * t;\n    return 0.5 * ((t -= 2) * t * t * t * t + 2);\n}\nfunction quintIn(t) {\n    return t * t * t * t * t;\n}\nfunction quintOut(t) {\n    return --t * t * t * t * t + 1;\n}\nfunction sineInOut(t) {\n    return -0.5 * (Math.cos(Math.PI * t) - 1);\n}\nfunction sineIn(t) {\n    const v = Math.cos(t * Math.PI * 0.5);\n    if (Math.abs(v) < 1e-14)\n        return 1;\n    else\n        return 1 - v;\n}\nfunction sineOut(t) {\n    return Math.sin((t * Math.PI) / 2);\n}\n\nexport { backIn, backInOut, backOut, bounceIn, bounceInOut, bounceOut, circIn, circInOut, circOut, cubicIn, cubicInOut, cubicOut, elasticIn, elasticInOut, elasticOut, expoIn, expoInOut, expoOut, quadIn, quadInOut, quadOut, quartIn, quartInOut, quartOut, quintIn, quintInOut, quintOut, sineIn, sineInOut, sineOut };\n","import { cubicInOut, linear, cubicOut } from '../easing/index.mjs';\nimport { is_function, assign } from '../internal/index.mjs';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nfunction blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const f = style.filter === 'none' ? '' : style.filter;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `opacity: ${target_opacity - (od * u)}; filter: ${f} blur(${u * amount}px);`\n    };\n}\nfunction fade(node, { delay = 0, duration = 400, easing = linear } = {}) {\n    const o = +getComputedStyle(node).opacity;\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => `opacity: ${t * o}`\n    };\n}\nfunction fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `\n\t\t\ttransform: ${transform} translate(${(1 - t) * x}px, ${(1 - t) * y}px);\n\t\t\topacity: ${target_opacity - (od * u)}`\n    };\n}\nfunction slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {\n    const style = getComputedStyle(node);\n    const opacity = +style.opacity;\n    const height = parseFloat(style.height);\n    const padding_top = parseFloat(style.paddingTop);\n    const padding_bottom = parseFloat(style.paddingBottom);\n    const margin_top = parseFloat(style.marginTop);\n    const margin_bottom = parseFloat(style.marginBottom);\n    const border_top_width = parseFloat(style.borderTopWidth);\n    const border_bottom_width = parseFloat(style.borderBottomWidth);\n    return {\n        delay,\n        duration,\n        easing,\n        css: t => 'overflow: hidden;' +\n            `opacity: ${Math.min(t * 20, 1) * opacity};` +\n            `height: ${t * height}px;` +\n            `padding-top: ${t * padding_top}px;` +\n            `padding-bottom: ${t * padding_bottom}px;` +\n            `margin-top: ${t * margin_top}px;` +\n            `margin-bottom: ${t * margin_bottom}px;` +\n            `border-top-width: ${t * border_top_width}px;` +\n            `border-bottom-width: ${t * border_bottom_width}px;`\n    };\n}\nfunction scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {\n    const style = getComputedStyle(node);\n    const target_opacity = +style.opacity;\n    const transform = style.transform === 'none' ? '' : style.transform;\n    const sd = 1 - start;\n    const od = target_opacity * (1 - opacity);\n    return {\n        delay,\n        duration,\n        easing,\n        css: (_t, u) => `\n\t\t\ttransform: ${transform} scale(${1 - (sd * u)});\n\t\t\topacity: ${target_opacity - (od * u)}\n\t\t`\n    };\n}\nfunction draw(node, { delay = 0, speed, duration, easing = cubicInOut } = {}) {\n    let len = node.getTotalLength();\n    const style = getComputedStyle(node);\n    if (style.strokeLinecap !== 'butt') {\n        len += parseInt(style.strokeWidth);\n    }\n    if (duration === undefined) {\n        if (speed === undefined) {\n            duration = 800;\n        }\n        else {\n            duration = len / speed;\n        }\n    }\n    else if (typeof duration === 'function') {\n        duration = duration(len);\n    }\n    return {\n        delay,\n        duration,\n        easing,\n        css: (t, u) => `stroke-dasharray: ${t * len} ${u * len}`\n    };\n}\nfunction crossfade(_a) {\n    var { fallback } = _a, defaults = __rest(_a, [\"fallback\"]);\n    const to_receive = new Map();\n    const to_send = new Map();\n    function crossfade(from, node, params) {\n        const { delay = 0, duration = d => Math.sqrt(d) * 30, easing = cubicOut } = assign(assign({}, defaults), params);\n        const to = node.getBoundingClientRect();\n        const dx = from.left - to.left;\n        const dy = from.top - to.top;\n        const dw = from.width / to.width;\n        const dh = from.height / to.height;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        const opacity = +style.opacity;\n        return {\n            delay,\n            duration: is_function(duration) ? duration(d) : duration,\n            easing,\n            css: (t, u) => `\n\t\t\t\topacity: ${t * opacity};\n\t\t\t\ttransform-origin: top left;\n\t\t\t\ttransform: ${transform} translate(${u * dx}px,${u * dy}px) scale(${t + (1 - t) * dw}, ${t + (1 - t) * dh});\n\t\t\t`\n        };\n    }\n    function transition(items, counterparts, intro) {\n        return (node, params) => {\n            items.set(params.key, {\n                rect: node.getBoundingClientRect()\n            });\n            return () => {\n                if (counterparts.has(params.key)) {\n                    const { rect } = counterparts.get(params.key);\n                    counterparts.delete(params.key);\n                    return crossfade(rect, node, params);\n                }\n                // if the node is disappearing altogether\n                // (i.e. wasn't claimed by the other list)\n                // then we need to supply an outro\n                items.delete(params.key);\n                return fallback && fallback(node, params, intro);\n            };\n        };\n    }\n    return [\n        transition(to_send, to_receive, false),\n        transition(to_receive, to_send, true)\n    ];\n}\n\nexport { blur, crossfade, draw, fade, fly, scale, slide };\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier}start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=}start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n\nexport { derived, readable, writable };\n","import { writable } from \"svelte/store\";\r\n\r\nexport const loadingScreenDone = writable(false);\r\nexport const authenticateComplete = writable(false);\r\nexport const exitApplicationWindowStatus = writable(false);\r\nexport const sideMenuStatus = writable(false);\r\nexport const addWindowStatus = writable(false);\r\nexport const editWindowStatus = writable(false);\r\nexport const deleteWindowScheduleStatus = writable(false);\r\nexport const deleteWindowStatus = writable(false);\r\nexport const resetPasswordWindowStatus = writable(false);\r\nexport const settingsWindowStatus = writable(false);\r\nexport const viewComponentValue = writable(0);\r\nexport const selectedData = writable(\"\");\r\nexport const settingsData = writable({\r\n\tuid: String,\r\n\tschoolYear: String,\r\n\tschoolSemester: String,\r\n\tsystemPassword: String,\r\n});\r\nexport const courseData = writable();\r\nexport const roomData = writable();\r\nexport const programData = writable();\r\nexport const tbdData = writable();","<script>\r\n  import { sideMenuStatus, viewComponentValue, selectedData, exitApplicationWindowStatus } from \"../stores/ui\";\r\n  const { ipcRenderer } = require(\"electron\");\r\n\r\n  let headerTitle = [\r\n    \"dashboard\",\r\n    \"courses\",\r\n    \"rooms\",\r\n    \"professors\",\r\n    \"programs\",\r\n    \"subjects\",\r\n    \"schedules\",\r\n    \"professor overview\",\r\n    \"advising time\",\r\n  ];\r\n  let sideMenuStatusChange = () => sideMenuStatus.set(!$sideMenuStatus);\r\n  let clearSelectedData = () => selectedData.set(\"\");\r\n  let shutdownPrompt = () => exitApplicationWindowStatus.set(true);\r\n  let maximizePrompt = () => ipcRenderer.send(\"maximize-prompt\");\r\n  let minimizePrompt = () => ipcRenderer.send(\"minimize-prompt\");\r\n  let returnToProfessor = () => {\r\n    // selectedData.set(\"\");\r\n    viewComponentValue.set(3);\r\n  }  \r\n</script>\r\n\r\n<div class=\"w-full h-12 bg-red-800 drop-shadow-md grid grid-cols-3\" style=\"-webkit-app-region: drag\">\r\n  <div class=\"flex flex-row justify-start items-center\">\r\n    <button on:click={sideMenuStatusChange} class=\"p-1.5 mx-2 mr-1 rounded-full active:bg-red-900 hover:bg-red-700\" title=\"Menu [Press Tab]\">\r\n      <svg class=\"w-6 h-6 fill-white\" viewBox=\"0 0 16 16\">\r\n        <path fill-rule=\"evenodd\" d=\"M2.5 12a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5zm0-4a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 0 1H3a.5.5 0 0 1-.5-.5z\"/>\r\n      </svg>\r\n    </button>\r\n    {#if $selectedData != \"\" && $viewComponentValue == 8}\r\n      <button on:click={returnToProfessor} class=\"p-1.5 mx-2 ml-1 rounded-full active:bg-red-900 hover:bg-red-700\">\r\n        <svg class=\"w-6 h-6 fill-white\" viewBox=\"0 0 16 16\">\r\n          <text x=\"1.75\" y=\"12.25\">&lt;</text>\r\n        </svg>\r\n      </button>\r\n    {:else if $selectedData != \"\" && $viewComponentValue != 1}\r\n      <button on:click={clearSelectedData} class=\"p-1.5 mx-2 ml-1 rounded-full active:bg-red-900 hover:bg-red-700\">\r\n        <svg class=\"w-6 h-6 fill-white\" viewBox=\"0 0 16 16\">\r\n          <text x=\"1.75\" y=\"12.25\">&lt;</text>\r\n        </svg>\r\n      </button>    \r\n    {/if}\r\n  </div>\r\n  <h1 class=\"text-white text-3xl font-light place-self-center\"><span class=\"text-yellow-400 font-medium\">.</span>\r\n    {#if $selectedData != \"\" && $viewComponentValue == 8}\r\n      Advising Time\r\n    {:else}\r\n      {headerTitle[$viewComponentValue]}\r\n    {/if}    \r\n  </h1>\r\n  <div class=\"place-self-center justify-self-end flex flex-row-reverse\">\r\n    <button on:click={shutdownPrompt} class=\"w-12 h-12 text-white active:bg-red-900 hover:bg-red-700 text-sm\">╳</button>\r\n    <button on:click={maximizePrompt} class=\"w-12 h-12 text-white active:bg-red-900 hover:bg-red-700\">☐</button>\r\n    <button on:click={minimizePrompt} class=\"w-12 h-12 text-white active:bg-red-900 hover:bg-red-700\">－</button>\r\n  </div>\r\n</div>\r\n\r\n<style>\r\n  button {\r\n    -webkit-app-region: no-drag;\r\n  }\r\n\r\n  @media print {\r\n    div {\r\n      display: none;\r\n    }\r\n  }\r\n</style>","<script>\r\n  import { sideMenuStatus, viewComponentValue, selectedData, settingsWindowStatus } from \"../stores/ui\";\r\n  import { fade, fly } from \"svelte/transition\";\r\n\r\n  let sideMenuStatusChange = () => sideMenuStatus.set(!$sideMenuStatus);\r\n  let viewComponentValueChange = (i) => {\r\n    selectedData.set(\"\");\r\n    viewComponentValue.set(i);\r\n    sideMenuStatusChange();\r\n  };\r\n\r\n  let settingsWindowStatusChange = () => {\r\n    settingsWindowStatus.set(!$settingsWindowStatus);\r\n    sideMenuStatusChange();\r\n  };\r\n</script>\r\n\r\n{#if $sideMenuStatus}\r\n  <div on:click={sideMenuStatusChange} transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 backdrop-filter backdrop-blur-sm\" />\r\n\r\n  <div transition:fly={{x: -200, duration: 250}} class=\"h-screen w-72 z-20 drop-shadow-md bg-white fixed grid custom-layout\">\r\n    <div class=\"w-full h-12 bg-red-800 flex drop-shadow-md items-center justify-center\">\r\n      <h1 class=\"text-white text-3xl font-light px-2\"><span class=\"text-yellow-400 font-medium\">.</span>dotSystems</h1>\r\n    </div>\r\n\r\n    <section class=\"flex flex-col\">\r\n      <button on:click={() => viewComponentValueChange(0)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Dashboard</button>\r\n      <button on:click={() => viewComponentValueChange(1)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Courses</button>\r\n      <button on:click={() => viewComponentValueChange(2)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Rooms</button>\r\n      <button on:click={() => viewComponentValueChange(3)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Professors</button>\r\n      <button on:click={() => viewComponentValueChange(4)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Programs</button>\r\n      <!-- <button on:click={() => viewComponentValueChange(5)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Subjects</button>   -->\r\n      <button on:click={() => viewComponentValueChange(6)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Schedules</button>\r\n      <button on:click={() => viewComponentValueChange(7)} class=\"px-3 py-1 text-lg w-full text-left border-b font-light hover:bg-gray-100 active:bg-gray-200\">Professor Overview</button>\r\n    </section>\r\n\r\n    <button on:click={settingsWindowStatusChange} class=\"px-3 py-1 text-lg w-full text-left border-t font-light hover:bg-gray-100 active:bg-gray-200\">Settings</button>    \r\n    \r\n  </div>\r\n{/if}\r\n\r\n<style>\r\n  .custom-layout {\r\n    grid-template-rows: auto 1fr auto;\r\n  }\r\n</style>","<script>\r\n  import { viewComponentValue, addWindowStatus, selectedData } from \"../stores/ui\";\r\n  import { fly } from \"svelte/transition\";\r\n\r\n  let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus)\r\n\r\n</script>\r\n\r\n{#if ($viewComponentValue != 0 && $viewComponentValue != 7) && ($selectedData == \"\" || $viewComponentValue == 1)}\r\n    <button on:click={addWindowStatusChange} transition:fly={{y: 200, duration: 250}} class=\"fixed bottom-0 right-0 w-14 h-14 m-5 mr-7 bg-yellow-400 hover:bg-yellow-300 active:bg-yellow-500 rounded-full drop-shadow-md\">\r\n      <h1 class=\"text-6xl font-thin -mt-3.5 text-white\">+</h1>\r\n    </button>\r\n{/if}\r\n\r\n<style>\r\n  @media print {\r\n    button {\r\n      display: none;\r\n    }\r\n  }\r\n</style>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { addWindowStatus } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let courseData = {\r\n    name: \"\",\r\n    code: \"\",\r\n    units: \"\",\r\n    hours: \"\",\r\n  }\r\n\r\n  $: if (!courseData.name || !courseData.code || !courseData.units || !courseData.hours) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"save-data-course\", courseData);\r\n  };\r\n\r\n  ipcRenderer.on(\"save-data-course\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        courseData = {\r\n          name: \"\",\r\n          code: \"\",\r\n          units: \"\",\r\n          hours: \"\",\r\n        }\r\n      }\r\n      ipcRenderer.send(\"retrieve-course-data\");\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"save-data-course\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={courseData.name} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Course\" id=\"course.name\" placeholder=\"Course Name\" />\r\n  <input bind:value={courseData.code} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Code\" id=\"course.code\" placeholder=\"Course Code (e.g GEED 10083)\" />\r\n  <input bind:value={courseData.units} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Units\" id=\"course.units\" placeholder=\"Course Units\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <input bind:value={courseData.hours} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Hours\" id=\"course.hours\" placeholder=\"Course Hours\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={addWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { addWindowStatus } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let professorData = {\r\n    name: {\r\n      first: \"\",\r\n      last: \"\",\r\n    },\r\n    email: \"\",\r\n    id: \"\",\r\n    address: \"\",\r\n    employment: {\r\n      status: \"\",\r\n      hours: \"\",\r\n    },\r\n    gender: \"\",\r\n    contact: \"\",\r\n    status: \"\",\r\n  }\r\n\r\n  $: if (!professorData.name.first || !professorData.name.last || !professorData.employment.status || !professorData.employment.hours || !professorData.gender || !professorData.contact || !professorData.status) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"save-data-professor\", professorData);\r\n  };\r\n\r\n  ipcRenderer.on(\"save-data-professor\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        professorData = {\r\n          name: {\r\n            first: \"\",\r\n            last: \"\",\r\n          },\r\n          email: \"\",\r\n          id: \"\",\r\n          address: \"\",\r\n          employment: {\r\n            status: \"\",\r\n            hours: \"\",\r\n          },\r\n          gender: \"\",\r\n          contact: \"\",\r\n          status: \"\",\r\n        }\r\n      }\r\n      ipcRenderer.send(\"retrieve-professor-data\");\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  })\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"save-data-professor\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={professorData.id} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.id\" placeholder=\"Faculty ID\" />\r\n  <div class=\"w-full flex\">\r\n    <input bind:value={professorData.name.first} disabled={windowDisabled} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.name.first\" placeholder=\"Professor First Name\" />\r\n    <input bind:value={professorData.name.last} disabled={windowDisabled} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.name.last\" placeholder=\"Professor Last Name\" />\r\n  </div>\r\n  <input bind:value={professorData.email} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.email\" placeholder=\"Professor Email Address\" />\r\n  <input bind:value={professorData.contact} disabled={windowDisabled} type=\"text\" maxlength=\"11\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.contact\" placeholder=\"Professor Phone Number\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <p class=\"px-2 mx-2 rounded-md font-light\">Select Gender:</p>\r\n  <select bind:value={professorData.gender} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\" name=\"Professor\" id=\"professor.gender\" title=\"Testing\">\r\n    <option value=\"male\" class=\"font-light\">Male</option>\r\n    <option value=\"female\" class=\"font-light\">Female</option>\r\n  </select>\r\n  <div class=\"w-full flex justify-evenly flex-row\">\r\n    <div class=\"w-full flex flex-col\">\r\n      <p class=\"px-2 mx-2 rounded-md font-light w-full\">Status:</p>\r\n      <select bind:value={professorData.status} disabled={windowDisabled} class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Status\" id=\"professor.status\" title=\"Status\">\r\n        <option value=\"REGULAR\" class=\"font-light\">Regular</option>\r\n        <option value=\"PART TIME\" class=\"font-light\">Part Time</option>\r\n      <option value=\"TEMPORARY\" class=\"font-light\">Temporary</option>\r\n      </select>\r\n    </div>\r\n    \r\n  </div>\r\n  <p class=\"px-2 mx-2 rounded-md font-light w-full\">Load:</p>\r\n  <div class=\"w-full flex\">\r\n    \r\n    <select bind:value={professorData.employment.status} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\" name=\"Professor\" id=\"professor.employment.status\" title=\"Testing\">\r\n      <option value=\"Full-Time\" class=\"font-light\">Full-Time</option>\r\n      <option value=\"Part-Time\" class=\"font-light\">Part-Time</option>\r\n      <option value=\"TS-Load\" class=\"font-light\">TS-Load</option>\r\n    </select>   \r\n    <input bind:value={professorData.employment.hours} disabled={windowDisabled} type=\"text\"  class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.employment.hours\" placeholder=\"Professor Load Hours\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" /> \r\n  </div>\r\n  \r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\" style=\"padding-bottom:30px;\">\r\n  <button on:click={addWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\"); \r\n  import { onDestroy } from \"svelte\";\r\n  import { addWindowStatus } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let programData = {\r\n    name: \"\",\r\n    acronym: \"\",\r\n    year: \"\",\r\n    section: \"\",\r\n  }\r\n\r\n  $: if (!programData.name || !programData.acronym || !programData.year || !programData.section) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"save-data-program\", programData);\r\n  }\r\n\r\n  ipcRenderer.on(\"save-data-program\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        programData = {\r\n          name: \"\",\r\n          acronym: \"\",\r\n          year: \"\",\r\n          section: \"\",\r\n        }\r\n      }\r\n      ipcRenderer.send(\"retrieve-program-data\");\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"save-data-program\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={programData.name} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.name\" placeholder=\"Program Name\" />\r\n  <input bind:value={programData.acronym} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.acronym\" placeholder=\"Program Acronym (e.g. BSIT)\" />\r\n  <input bind:value={programData.year} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.year\" placeholder=\"Program Year\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <input bind:value={programData.section} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.section\" placeholder=\"Program Section\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={addWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { addWindowStatus } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let roomData = {\r\n    name: \"\",\r\n  }\r\n\r\n  $: if (!roomData.name) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"save-data-room\", roomData);\r\n  };\r\n\r\n  ipcRenderer.on(\"save-data-room\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        roomData =  {\r\n          name: \"\",\r\n        }\r\n      }\r\n      ipcRenderer.send(\"retrieve-room-data\");\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"save-data-room\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={roomData.name} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Room\" id=\"room.name\" placeholder=\"Room Name (e.g. Faculty Room)\" />\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={addWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","export const range = (start, end) => {\r\n    var range = [];\r\n    for (let i = start; i <= end; i++) {\r\n        range.push(i);\r\n    }\r\n    return range;\r\n}","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { range } from \"../../utils/helpers\"\r\n  import { onMount, onDestroy } from 'svelte';\r\n  import { \r\n    addWindowStatus,  \r\n    settingsData,\r\n  } from \"../../stores/ui\";\r\n\r\n  let scheduleData = {\r\n    day: 0,\r\n    name: '',\r\n    type: 'FULLTIME',\r\n    time: {start: {}, end: {}},\r\n    school: {\r\n      year: $settingsData.schoolYear,\r\n      semester: $settingsData.schoolSemester,\r\n    },\r\n    courseData: {},\r\n    professorData: {},\r\n    programData: {},\r\n    roomData: {}\r\n  };\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let dayPlaceholder = \"--DAY--\", daySelected = \"\";\r\n  let profsList = [], profInfo = \"\", profPlaceholder = \"--SELECT EMPLOYEE--\";\r\n  let programList = [], programInfo = \"\", programPlaceholder = \"--SELECT PROGGAM--\";\r\n  let coursesList = [], coursesInfo = \"\", coursesPlaceholder = \"--SELECT COURSE--\";\r\n  let roomList = [], roomInfo = \"\", roomPlaceholder = \"--SELECT ROOM--\";\r\n  let timeRange = [], timeStart = \"0700AM\", timeEnd = \"0700AM\";\r\n\r\n  let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n\r\n  onMount(() => {\r\n    timeRange = generateTimeRange();\r\n    ipcRenderer.send(\"get-professor-list\");\r\n    ipcRenderer.send(\"get-program-list\");\r\n    ipcRenderer.send(\"get-courses-list\");\r\n    ipcRenderer.send(\"get-room-list\");\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"save-data-schedule\");\r\n    ipcRenderer.removeAllListeners(\"get-professor-list\");\r\n    ipcRenderer.removeAllListeners(\"get-program-list\");\r\n    ipcRenderer.removeAllListeners(\"get-courses-list\");\r\n    ipcRenderer.removeAllListeners(\"get-room-list\");\r\n  });\r\n\r\n  ipcRenderer.on(\"get-professor-list\", (e, res) => {\r\n      if (res.success) profsList = res.data;\r\n  });\r\n  ipcRenderer.on(\"get-program-list\", (e, res) => {\r\n    if (res.success) programList = res.data;\r\n  });\r\n  ipcRenderer.on(\"get-courses-list\", (e, res) => {\r\n    if (res.success) coursesList = res.data;\r\n  });\r\n  ipcRenderer.on(\"get-room-list\", (e, res) => {\r\n    if (res.success) roomList = res.data;\r\n  });\r\n  ipcRenderer.on(\"save-data-schedule\", (e, res) => {\r\n      windowDisabled = false;\r\n      console.log(res);\r\n  });\r\n  const generateTimeRange = () => {\r\n    let arr = [];\r\n    Array.from(range(7, 12), (n) => {\r\n      let H = (n < 10 && n > 0) ? (\"0\" + n) : n;\r\n      if (n == 7) {\r\n        arr.push({ _id: `${H}30AM`, value: `${H}:30 AM`, hour: n, minute: 30, tt: \"AM\" });\r\n      } else {\r\n        arr.push({ _id: `${H}00AM`, value: `${H}:00 AM`, hour: n, minute: 0, tt: \"AM\" });\r\n        arr.push({ _id: `${H}30AM`, value: `${H}:30 AM`, hour: n, minute: 30, tt: \"AM\" });\r\n      }\r\n    });\r\n    Array.from(range(1, 9), (n) => {\r\n      let H = (n < 10 && n > 0) ? (\"0\" + n) : n;\r\n      if (n == 9) {\r\n        arr.push({ _id: `${H}00PM`, value: `${H}:00 PM`, hour: n, minute: 0, tt: \"PM\" });\r\n      } else {\r\n        arr.push({ _id: `${H}00PM`, value: `${H}:00 PM`, hour: n, minute: 0, tt: \"PM\" });\r\n        arr.push({ _id: `${H}30PM`, value: `${H}:30 PM`, hour: n, minute: 30, tt: \"PM\" });\r\n      }\r\n    });\r\n    return arr;\r\n  }\r\n  const handleTimeStart = () => {\r\n    const tym = timeRange.find(p => p._id == timeStart);\r\n    scheduleData.time.start = { hours: parseInt(tym.hour), minutes: parseInt(tym.minute) };\r\n  }\r\n  const handleTimeEnd = () => {\r\n    const tym = timeRange.find(p => p._id == timeEnd);\r\n    scheduleData.time.end = { hours: parseInt(tym.hour), minutes: parseInt(tym.minute) };\r\n  }\r\n  const handleDaySelection = () => {\r\n    scheduleData.day = parseInt(daySelected);\r\n  }\r\n  const handleProfSelection = () => {\r\n    const info = profsList.find(p => p._id == profInfo);\r\n    scheduleData.professorData = info;\r\n    scheduleData.type = info.status;\r\n  }\r\n  const handleProgramSelection = () => {\r\n    scheduleData.programData = programList.find(p => p._id == programInfo);\r\n  }\r\n  const handleCourseSelection = () => {\r\n    scheduleData.courseData = coursesList.find(p => p._id == coursesInfo);\r\n  }\r\n  const handleRoomSelection = () => {\r\n    scheduleData.roomData = roomList.find(p => p._id == roomInfo);\r\n  }\r\n  const onSubmitSchedule = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"save-data-schedule\", scheduleData);\r\n    return false;\r\n  };\r\n\r\n</script>\r\n<form method=\"post\" on:submit|preventDefault={onSubmitSchedule}>\r\n  <div class=\"w-full h-full flex flex-col\">\r\n\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">Select Professor:</p>\r\n        <select bind:value={profInfo} on:change={handleProfSelection} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#if profPlaceholder}\r\n            <option value=\"\" disabled selected>{profPlaceholder}</option>\r\n          {/if}\r\n          {#each profsList as prof}\r\n            <option value={prof._id} class=\"font-light\">{prof.name.last}, {prof.name.first} </option>\r\n          {/each}\r\n        </select>\r\n     </div>\r\n    </div>\r\n\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">Select Day:</p>\r\n        <select bind:value={daySelected} on:change={handleDaySelection} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#if dayPlaceholder}\r\n            <option value=\"\" disabled selected>{dayPlaceholder}</option>\r\n          {/if}\r\n          <option value=\"0\" class=\"font-light\">Monday</option>\r\n          <option value=\"1\" class=\"font-light\">Tuesday</option>\r\n          <option value=\"2\" class=\"font-light\">Wednesday</option>\r\n          <option value=\"3\" class=\"font-light\">Thursday</option>\r\n          <option value=\"4\" class=\"font-light\">Friday</option>\r\n          <option value=\"5\" class=\"font-light\">Saturday</option>\r\n          <option value=\"6\" class=\"font-light\">Sunday</option>\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">Select Program:</p>\r\n        <select bind:value={programInfo} on:change={handleProgramSelection} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#if programPlaceholder}\r\n          <option value=\"\" disabled selected>{programPlaceholder}</option>\r\n          {/if}\r\n          {#each programList as row}\r\n            <option value={row._id} class=\"font-light\">{row.acronym} {row.year}-{row.section}</option>\r\n          {/each}\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">Select Course:</p>\r\n        <select bind:value={coursesInfo} on:change={handleCourseSelection} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#if coursesPlaceholder}\r\n            <option value=\"\" disabled selected>{coursesPlaceholder}</option>\r\n          {/if}\r\n          {#each coursesList as row}\r\n            <option value={row._id} class=\"font-light\">{row.name} [{row.code}]</option>\r\n          {/each}\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">Select Room:</p>\r\n        <select bind:value={roomInfo} on:change={handleRoomSelection} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#if roomPlaceholder}\r\n            <option value=\"\" disabled selected>{roomPlaceholder}</option>\r\n          {/if}\r\n          {#each roomList as row}\r\n            <option value={row._id} class=\"font-light\">{row.name}</option>\r\n          {/each}\r\n        </select>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n      <p class=\"px-2 mx-2 rounded-md font-light\">Class Schedule:</p>\r\n    </div>\r\n    <div class=\"w-full flex flex-row mt-2\">\r\n\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">Start</p>\r\n        <select bind:value={timeStart} on:change={handleTimeStart} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#each timeRange as row}\r\n            {#if row._id == timeStart}\r\n              <option value={row._id} selected>{row.value}</option>\r\n            {:else}\r\n              <option value={row._id} class=\"font-light\">{row.value}</option>\r\n            {/if}\r\n          {/each}\r\n        </select>\r\n      </div>\r\n\r\n      <div class=\"w-full flex flex-col\">\r\n        <p class=\"px-2 mx-2 rounded-md font-light\">End</p>\r\n        <select bind:value={timeEnd} on:change={handleTimeEnd} disabled={windowDisabled} required class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n          {#each timeRange as row}\r\n            {#if row._id == timeEnd}\r\n              <option value={row._id} selected>{row.value}</option>\r\n            {:else}\r\n              <option value={row._id} class=\"font-light\">{row.value}</option>\r\n            {/if}\r\n          {/each}\r\n        </select>\r\n      </div>\r\n      \r\n    </div>\r\n\r\n    <p class=\"w-full text-center font-light\" style=\"color:red\">{message}</p>\r\n  </div>\r\n  \r\n  <div class=\"flex flex-row justify-end\">\r\n    <button type=\"button\" on:click={addWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n    <button type=\"submt\" disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n  </div>\r\n</form>","<script>\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import { onDestroy } from \"svelte\";\r\n    import { addWindowStatus , selectedData } from \"../../stores/ui\";\r\n    let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n    let scheduleTimeHourStart, scheduleTimeMinuteStart, scheduleTimePostfixStart, scheduleTimeHourEnd, scheduleTimeMinuteEnd, scheduleTimePostfixEnd, scheduleCourse, scheduleProgram, scheduleRoom;\r\n    let scheduleData = {\r\n        type : 'add',\r\n        _id: $selectedData._id,\r\n        day: 0,\r\n        time: {\r\n            start: {\r\n                hours: 0,\r\n                minutes: 0,\r\n            },\r\n            end: {\r\n                hours: 0,\r\n                minutes: 0,\r\n            }\r\n        },\r\n    }\r\n  \r\n    let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n    let saveData = () => {\r\n        if (scheduleTimePostfixStart == \"PM\") {\r\n            if (scheduleTimeHourStart != 12)\r\n            scheduleData.time.start.hours = scheduleTimeHourStart + 12;\r\n            else scheduleData.time.start.hours = 12;\r\n        } else {\r\n            if (scheduleTimeHourStart + 12 == 24) {\r\n            scheduleData.time.start.hours = 0;\r\n            } else {\r\n            scheduleData.time.start.hours = scheduleTimeHourStart;\r\n            }\r\n        }\r\n        if (scheduleTimePostfixEnd == \"PM\") {\r\n            if (scheduleTimeHourEnd != 12)\r\n            scheduleData.time.end.hours = scheduleTimeHourEnd + 12;\r\n            else scheduleData.time.end.hours = 12;\r\n        } else {\r\n            if (scheduleTimeHourEnd + 12 == 24) {\r\n            scheduleData.time.end.hours = 0;\r\n            } else {\r\n            scheduleData.time.end.hours = scheduleTimeHourEnd;\r\n            }\r\n        }\r\n        scheduleData.time.start.minutes = scheduleTimeMinuteStart;\r\n        scheduleData.time.end.minutes = scheduleTimeMinuteEnd;\r\n        scheduleData.type = 'add';\r\n\r\n        windowDisabled = true;\r\n        // ipcRenderer.send(\"save-data-professor-advisetime\", scheduleData , type = 'add');\r\n        ipcRenderer.send(\"save-data-professor-advisetime\", scheduleData);\r\n    };\r\n  \r\n    ipcRenderer.on(\"save-data-professor-advisetime\", (event, status) => {\r\n      setTimeout(() => {\r\n        if (status.success == true) {        \r\n            scheduleData = {\r\n                _id: $selectedData._id,\r\n                type : 'add',\r\n                day: 0,\r\n                time: {\r\n                    start: {\r\n                        hours: 0,\r\n                        minutes: 0,\r\n                    },\r\n                    end: {\r\n                        hours: 0,\r\n                        minutes: 0,\r\n                    }\r\n                },\r\n            }\r\n\r\n            $selectedData.advisingTime = status.data;\r\n            ipcRenderer.send(\"retrieve-professor-data-advisetime\" , $selectedData._id);\r\n        }        \r\n\r\n        message = status.message;\r\n        windowDisabled = false;\r\n      }, 2000);\r\n    })\r\n  \r\n    onDestroy(() => {\r\n      ipcRenderer.removeAllListeners(\"save-data-professor-advisetime\");\r\n    })\r\n  </script>\r\n  \r\n  <div class=\"w-full h-full flex flex-col\">\r\n    <div class=\"w-full flex flex-row\">\r\n        <div class=\"w-full flex flex-col\">\r\n          <p class=\"px-2 mx-2 rounded-md font-light\">Select Day:</p>\r\n          <select bind:value={scheduleData.day} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n            <option value=\"0\" class=\"font-light\">Monday</option>\r\n            <option value=\"1\" class=\"font-light\">Tuesday</option>\r\n            <option value=\"2\" class=\"font-light\">Wednesday</option>\r\n            <option value=\"3\" class=\"font-light\">Thursday</option>\r\n            <option value=\"4\" class=\"font-light\">Friday</option>\r\n          </select>\r\n        </div>\r\n    </div>\r\n    <p class=\"px-2 mx-2 rounded-md font-light\">Select Start Time:</p>\r\n    <div class=\"w-full flex items-center\">\r\n      <select bind:value={scheduleTimeHourStart} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        {#each Array(12) as _, i}\r\n          <option value=\"{i + 1}\" class=\"font-light\">{i + 1}</option>\r\n        {/each}\r\n      </select>\r\n      <p class=\"mb-2\">:</p>\r\n      <select bind:value={scheduleTimeMinuteStart} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value={\"00\"} class=\"font-light\">00</option>\r\n        <option value={\"30\"} class=\"font-light\">30</option>\r\n      </select>\r\n      <select bind:value={scheduleTimePostfixStart} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value=\"AM\" class=\"font-light\">AM</option>\r\n        <option value=\"PM\" class=\"font-light\">PM</option>\r\n      </select>\r\n    </div>\r\n    <p class=\"px-2 mx-2 rounded-md font-light\">Select End Time:</p>\r\n    <div class=\"w-full flex items-center\">\r\n      <select bind:value={scheduleTimeHourEnd} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        {#each Array(12) as _, i}\r\n          <option value=\"{i + 1}\" class=\"font-light\">{i + 1}</option>\r\n        {/each}\r\n      </select>\r\n      <p class=\"mb-2\">:</p>\r\n      <select bind:value={scheduleTimeMinuteEnd} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value={\"00\"} class=\"font-light\">00</option>\r\n        <option value={\"30\"} class=\"font-light\">30</option>\r\n      </select>\r\n      <select bind:value={scheduleTimePostfixEnd} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value=\"AM\" class=\"font-light\">AM</option>\r\n        <option value=\"PM\" class=\"font-light\">PM</option>\r\n      </select>\r\n    </div>    \r\n    <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n  </div>\r\n  \r\n  <div class=\"flex flex-row justify-end\">\r\n    <button on:click={addWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n    <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n  </div>","<script>\r\n  import AddCourse from \"./AddWindowViews/AddCourse.svelte\";\r\n  import AddProfessor from \"./AddWindowViews/AddProfessor.svelte\";\r\n  import AddProgram from \"./AddWindowViews/AddProgram.svelte\";\r\n  import AddRoom from \"./AddWindowViews/AddRoom.svelte\";\r\n  import AddSchedule from \"./AddWindowViews/AddSchedule.svelte\";\r\n  import ProfessorOverviewModal from \"./ProfessorOverviewModal.svelte\";\r\n  import AddAdviseTime from \"./AddWindowViews/AddAdviseTime.svelte\";\r\n  import { viewComponentValue, addWindowStatus, selectedData } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\"; \r\n  import { onDestroy, onMount } from \"svelte\";\r\n\r\n  let headerTitle = [\r\n    \"Courses\",\r\n    \"Rooms\",\r\n    \"Professors\",\r\n    \"Programs\",\r\n    \"Schedules\",\r\n    \"Schedules\",\r\n  ];\r\n</script>\r\n\r\n{#if $addWindowStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-end px-6 pb-4 items-end\" class:backdrop-filter={$selectedData == \"\"} class:backdrop-blur-sm={$selectedData == \"\"} >\r\n\r\n    <div transition:fly={{y: 200, duration: 250}} class=\"z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\" style=\"width: 28rem; height: 42rem;\">\r\n      <h1 class=\"w-full p-2 text-2xl font-light text-center text-white bg-yellow-400 rounded-t-md drop-shadow-md\">Add New         \r\n        {#if $selectedData != \"\" && $viewComponentValue == 8}\r\n          Advise Time\r\n        {:else}\r\n          {$selectedData == \"\" ? headerTitle[$viewComponentValue - 1] : \"Schedule\"}\r\n        {/if}        \r\n      </h1>\r\n      {#if $viewComponentValue == 1}\r\n        <AddCourse />\r\n      {:else if $viewComponentValue == 2}\r\n        <AddRoom />\r\n      {:else if $viewComponentValue == 3}\r\n        <AddProfessor />\r\n      {:else if $viewComponentValue == 4}\r\n        <AddProgram />\r\n      {:else if $viewComponentValue == 6}\r\n        <AddSchedule />\r\n      {:else if $viewComponentValue == 8}\r\n        <AddAdviseTime />\r\n      {/if}\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { editWindowStatus, selectedData, deleteWindowStatus } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let courseData = {\r\n    _id: $selectedData._id,\r\n    name: $selectedData.name,\r\n    code: $selectedData.code,\r\n    units: $selectedData.units,\r\n    hours: $selectedData.hours,\r\n  }\r\n\r\n  $: if (!courseData.name || !courseData.code || !courseData.units || !courseData.hours) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let editWindowStatusChange = () => editWindowStatus.set(!$editWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"edit-data-course\", courseData, $selectedData);\r\n  };\r\n\r\n  ipcRenderer.on(\"edit-data-course\", (event, status) => {\r\n    setTimeout(() => {\r\n      ipcRenderer.send(\"retrieve-course-data\");\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"edit-data-course\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={courseData.name} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Course\" id=\"course.name\" placeholder=\"Course Name\" />\r\n  <input bind:value={courseData.code} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Code\" id=\"course.code\" placeholder=\"Course Code (e.g GEED 10083)\" />\r\n  <input bind:value={courseData.units} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Units\" id=\"course.units\" placeholder=\"Course Units\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <input bind:value={courseData.hours} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Hours\" id=\"course.hours\" placeholder=\"Course Hours\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <button on:click={() => $deleteWindowStatus = true} disabled={windowDisabled} class=\"p-2 m-2 rounded-full font-light hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100 hover:drop-shadow-md active:drop-shadow-md\">Delete Course</button>\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={editWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { editWindowStatus, selectedData } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let professorData = {\r\n    _id: $selectedData._id,\r\n    name: {\r\n      first: $selectedData.name.first,\r\n      last: $selectedData.name.last,\r\n    },\r\n    address: $selectedData.address,\r\n    employment: {\r\n      status: $selectedData.employment.status,\r\n      hours: $selectedData.employment.hours,\r\n    },\r\n    gender: $selectedData.gender,\r\n    contact: $selectedData.contact,\r\n    status: $selectedData.status,\r\n  }\r\n\r\n  $: if (!professorData.name.first || !professorData.name.last || !professorData.address || !professorData.employment.status || !professorData.employment.hours || !professorData.gender || !professorData.contact || !professorData.status) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  $: {\r\n    console.log(professorData)\r\n    console.log($selectedData)\r\n  }\r\n\r\n  let editWindowStatusChange = () => editWindowStatus.set(!$editWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"edit-data-professor\", professorData, $selectedData);\r\n  };\r\n\r\n  ipcRenderer.on(\"edit-data-professor\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        $selectedData.name.first = professorData.name.first;\r\n        $selectedData.name.last = professorData.name.last;\r\n        $selectedData.address = professorData.address;\r\n        $selectedData.employment.status = professorData.employment.status;\r\n        $selectedData.employment.hours = professorData.employment.hours;\r\n        $selectedData.gender = professorData.gender;\r\n        $selectedData.contact = professorData.contact;\r\n        $selectedData.status = professorData.status;\r\n      }\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  })\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"edit-data-professor\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <div class=\"w-full flex\">\r\n    <input bind:value={professorData.name.first} disabled={windowDisabled} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.name.first\" placeholder=\"Professor First Name\" />\r\n    <input bind:value={professorData.name.last} disabled={windowDisabled} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.name.last\" placeholder=\"Professor Last Name\" />\r\n  </div>\r\n  <input bind:value={professorData.address} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.address\" placeholder=\"Professor Address\" />\r\n  <input bind:value={professorData.contact} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.contact\" placeholder=\"Professor Phone Number\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <p class=\"px-2 mx-2 rounded-md font-light\">Select Gender:</p>\r\n  <select bind:value={professorData.gender} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\" name=\"Professor\" id=\"professor.gender\">\r\n    <option value=\"male\" class=\"font-light\">Male</option>\r\n    <option value=\"female\" class=\"font-light\">Female</option>\r\n  </select>\r\n  <div class=\"w-full flex justify-evenly flex-row\">\r\n    <div class=\"w-full flex flex-col\">\r\n      <p class=\"px-2 mx-2 rounded-md font-light w-full\">Status:</p>\r\n      <select bind:value={professorData.status} disabled={windowDisabled} class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Status\" id=\"professor.status\" title=\"Status\">\r\n        <option value=\"REGULAR\" class=\"font-light\">Regular</option>\r\n        <option value=\"PART TIME\" class=\"font-light\">Part Time</option>\r\n      <option value=\"TEMPORARY\" class=\"font-light\">Temporary</option>\r\n      </select>\r\n    </div>\r\n    \r\n  </div>\r\n\r\n  <p class=\"px-2 mx-2 rounded-md font-light w-full\">Load:</p>\r\n  <div class=\"w-full flex\">\r\n    \r\n    <select bind:value={professorData.employment.status} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\" name=\"Professor\" id=\"professor.employment.status\" title=\"Testing\">\r\n      <option value=\"Full-Time\" class=\"font-light\">Full-Time</option>\r\n      <option value=\"Part-Time\" class=\"font-light\">Part-Time</option>\r\n      <option value=\"TS-Load\" class=\"font-light\">TS-Load</option>\r\n    </select>  \r\n    <input bind:value={professorData.employment.hours} disabled={windowDisabled} type=\"text\"  class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Professor\" id=\"professor.employment.hours\" placeholder=\"Professor Load Hours\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" /> \r\n  </div>\r\n  \r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={editWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\"); \r\n  import { onDestroy } from \"svelte\";\r\n  import { editWindowStatus, selectedData } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let programData = {\r\n    _id: $selectedData._id,\r\n    name: $selectedData.name,\r\n    acronym: $selectedData.acronym,\r\n    year: $selectedData.year,\r\n    section: $selectedData.section,\r\n  }\r\n\r\n  $: if (!programData.name || !programData.acronym || !programData.year || !programData.section) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let editWindowStatusChange = () => editWindowStatus.set(!$editWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"edit-data-program\", programData, $selectedData);\r\n  }\r\n\r\n  ipcRenderer.on(\"edit-data-program\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        $selectedData.name = programData.name;\r\n        $selectedData.acronym = programData.acronym;\r\n        $selectedData.year = programData.year;\r\n        $selectedData.section = programData.section;\r\n      }\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"edit-data-program\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={programData.name} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.name\" placeholder=\"Program Name\" />\r\n  <input bind:value={programData.acronym} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.acronym\" placeholder=\"Program Acronym (e.g. BSIT)\" />\r\n  <input bind:value={programData.year} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.year\" placeholder=\"Program Year\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <input bind:value={programData.section} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Program\" id=\"program.section\" placeholder=\"Program Section\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={editWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { editWindowStatus, selectedData } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  let roomData = {\r\n    _id: $selectedData._id,\r\n    name: $selectedData.name,\r\n  }\r\n\r\n  $: if (!roomData.name) {\r\n    fieldDisabled = true;\r\n  } else fieldDisabled = false;\r\n\r\n  let editWindowStatusChange = () => editWindowStatus.set(!$editWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    ipcRenderer.send(\"edit-data-room\", roomData, $selectedData);\r\n  };\r\n\r\n  ipcRenderer.on(\"edit-data-room\", (event, status) => {\r\n    setTimeout(() => {\r\n      if  (status.success == true) {\r\n        $selectedData.name = roomData.name;\r\n      }\r\n      message = status.message;\r\n      windowDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"edit-data-room\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <input bind:value={roomData.name} disabled={windowDisabled} type=\"text\" class=\"p-2 drop-shadow-md m-2 rounded-md font-light\" name=\"Room\" id=\"room.name\" placeholder=\"Room Name (e.g. Faculty Room)\" />\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={editWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import { onDestroy } from \"svelte\";\r\n    import { editWindowStatus, selectedData , tbdData } from \"../../stores/ui\";\r\n    let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n    let scheduleTimeHourStart, scheduleTimeMinuteStart, scheduleTimePostfixStart, scheduleTimeHourEnd, scheduleTimeMinuteEnd, scheduleTimePostfixEnd, scheduleCourse, scheduleProgram, scheduleRoom;\r\n    let scheduleData = {\r\n        type : 'edit',\r\n        _id: $tbdData._id,\r\n        day: $tbdData.day,\r\n        time: {\r\n            start: {\r\n                hours: $tbdData.time.start.hours,\r\n                minutes: $tbdData.time.start.minutes,\r\n            },\r\n            end: {\r\n                hours: $tbdData.time.end.hours,\r\n                minutes: $tbdData.time.start.minutes,\r\n            }\r\n        },\r\n    }\r\n  \r\n    let editWindowStatusChange = () => editWindowStatus.set(!$editWindowStatus);\r\n    let saveData = () => {\r\n        if (scheduleTimePostfixStart == \"PM\") {\r\n            if (scheduleTimeHourStart != 12)\r\n            scheduleData.time.start.hours = scheduleTimeHourStart + 12;\r\n            else scheduleData.time.start.hours = 12;\r\n        } else {\r\n            if (scheduleTimeHourStart + 12 == 24) {\r\n            scheduleData.time.start.hours = 0;\r\n            } else {\r\n            scheduleData.time.start.hours = scheduleTimeHourStart;\r\n            }\r\n        }\r\n        if (scheduleTimePostfixEnd == \"PM\") {\r\n            if (scheduleTimeHourEnd != 12)\r\n            scheduleData.time.end.hours = scheduleTimeHourEnd + 12;\r\n            else scheduleData.time.end.hours = 12;\r\n        } else {\r\n            if (scheduleTimeHourEnd + 12 == 24) {\r\n            scheduleData.time.end.hours = 0;\r\n            } else {\r\n            scheduleData.time.end.hours = scheduleTimeHourEnd;\r\n            }\r\n        }\r\n        scheduleData.time.start.minutes = scheduleTimeMinuteStart;\r\n        scheduleData.time.end.minutes = scheduleTimeMinuteEnd;\r\n        scheduleData.type = 'edit';\r\n\r\n        windowDisabled = true;\r\n        // ipcRenderer.send(\"save-data-professor-advisetime\", scheduleData , type = 'add');\r\n        ipcRenderer.send(\"save-data-professor-advisetime\", scheduleData);\r\n    };\r\n  \r\n    ipcRenderer.on(\"save-data-professor-advisetime\", (event, status) => {\r\n      setTimeout(() => {\r\n        if (status.success == true) {        \r\n            scheduleData = {\r\n                type : 'edit',\r\n                _id: $tbdData._id,\r\n                day: $tbdData.day,\r\n                time: {\r\n                    start: {\r\n                        hours: $tbdData.time.start.hours,\r\n                        minutes: $tbdData.time.start.minutes,\r\n                    },\r\n                    end: {\r\n                        hours: $tbdData.time.end.hours,\r\n                        minutes: $tbdData.time.start.minutes,\r\n                    }\r\n                },\r\n            }\r\n\r\n            $tbdData.advisingTime = status.data;\r\n            ipcRenderer.send(\"retrieve-professor-data-advisetime\" , $tbdData._id);\r\n        }        \r\n\r\n        message = status.message;\r\n        windowDisabled = false;\r\n      }, 2000);\r\n    })\r\n  \r\n    onDestroy(() => {\r\n      ipcRenderer.removeAllListeners(\"save-data-professor-advisetime\");\r\n    })\r\n  </script>\r\n  \r\n  <div class=\"w-full h-full flex flex-col\">\r\n    <div class=\"w-full flex flex-row\">\r\n        <div class=\"w-full flex flex-col\">\r\n          <p class=\"px-2 mx-2 rounded-md font-light\">Select Day:</p>\r\n          <select bind:value={scheduleData.day} readonly disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\">\r\n            <option value=\"0\" class=\"font-light\">Monday</option>\r\n            <option value=\"1\" class=\"font-light\">Tuesday</option>\r\n            <option value=\"2\" class=\"font-light\">Wednesday</option>\r\n            <option value=\"3\" class=\"font-light\">Thursday</option>\r\n            <option value=\"4\" class=\"font-light\">Friday</option>\r\n            <option value=\"5\" class=\"font-light\">Saturday</option>\r\n            <option value=\"6\" class=\"font-light\">Sunday</option>\r\n          </select>\r\n        </div>\r\n    </div>\r\n    <p class=\"px-2 mx-2 rounded-md font-light\">Select Start Time:</p>\r\n    <div class=\"w-full flex items-center\">\r\n      <select bind:value={scheduleTimeHourStart} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        {#each Array(12) as _, i}\r\n          <option value=\"{i + 1}\" class=\"font-light\">{i + 1}</option>\r\n        {/each}\r\n      </select>\r\n      <p class=\"mb-2\">:</p>\r\n      <select bind:value={scheduleTimeMinuteStart} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value={\"00\"} class=\"font-light\">00</option>\r\n        <option value={\"30\"} class=\"font-light\">30</option>\r\n      </select>\r\n      <select bind:value={scheduleTimePostfixStart} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value=\"AM\" class=\"font-light\">AM</option>\r\n        <option value=\"PM\" class=\"font-light\">PM</option>\r\n      </select>\r\n    </div>\r\n    <p class=\"px-2 mx-2 rounded-md font-light\">Select End Time:</p>\r\n    <div class=\"w-full flex items-center\">\r\n      <select bind:value={scheduleTimeHourEnd} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        {#each Array(12) as _, i}\r\n          <option value=\"{i + 1}\" class=\"font-light\">{i + 1}</option>\r\n        {/each}\r\n      </select>\r\n      <p class=\"mb-2\">:</p>\r\n      <select bind:value={scheduleTimeMinuteEnd} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value={\"00\"} class=\"font-light\">00</option>\r\n        <option value={\"30\"} class=\"font-light\">30</option>\r\n      </select>\r\n      <select bind:value={scheduleTimePostfixEnd} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 w-full drop-shadow-md rounded-md font-light\">\r\n        <option value=\"AM\" class=\"font-light\">AM</option>\r\n        <option value=\"PM\" class=\"font-light\">PM</option>\r\n      </select>\r\n    </div>    \r\n    <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n  </div>\r\n  \r\n  <div class=\"flex flex-row justify-end\">\r\n    <button on:click={editWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n    <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n  </div>","<script>\r\n  import EditCourse from \"./EditWindowViews/EditCourse.svelte\";\r\n  import EditProfessor from \"./EditWindowViews/EditProfessor.svelte\";\r\n  import EditProgram from \"./EditWindowViews/EditProgram.svelte\";\r\n  import EditRoom from \"./EditWindowViews/EditRoom.svelte\";\r\n  import EditAdviseTime from \"./EditWindowViews/EditAdviseTime.svelte\";\r\n  import { viewComponentValue, editWindowStatus } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\"; \r\n\r\n  let headerTitle = [\r\n    \"Courses\",\r\n    \"Rooms\",\r\n    \"Professors\",\r\n    \"Programs\",\r\n  ];\r\n</script>\r\n\r\n{#if $editWindowStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-end px-6 pb-4 items-end backdrop-filter backdrop-blur-sm\" >\r\n\r\n    <div transition:fly={{y: 200, duration: 250}} class=\"z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\" style=\"width: 28rem; height: 38rem;\">\r\n      <h1 class=\"w-full p-2 text-2xl font-light text-center text-white bg-yellow-400 rounded-t-md drop-shadow-md\">\r\n        Edit Existing \r\n        {#if $viewComponentValue == 8}\r\n          Advise Time\r\n        {:else}\r\n          {headerTitle[$viewComponentValue - 1]}\r\n        {/if}   \r\n      </h1>\r\n\r\n      {#if $viewComponentValue == 1}\r\n        <EditCourse />\r\n      {:else if $viewComponentValue == 2}\r\n        <EditRoom />\r\n      {:else if $viewComponentValue == 3}\r\n        <EditProfessor />\r\n      {:else if $viewComponentValue == 4}\r\n        <EditProgram />\r\n      {:else if $viewComponentValue == 8}\r\n        <EditAdviseTime />        \r\n      {/if}\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { deleteWindowStatus, selectedData, viewComponentValue, editWindowStatus , tbdData } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\";\r\n  import { onDestroy } from \"svelte\";\r\n  let message = \"Do you want to delete this?\"\r\n  let disableWindow = false;\r\n\r\n  let deleteRequest = () => {\r\n    disableWindow = true;\r\n    console.log('deleteRequest : ' + $viewComponentValue);\r\n\r\n    switch ($viewComponentValue) {\r\n      case 1:\r\n        console.log(\"Entered 1\");\r\n        ipcRenderer.send(\"delete-course-data\", $selectedData._id);\r\n        break;\r\n      case 2:\r\n        console.log(\"Entered 2\");\r\n        ipcRenderer.send(\"delete-room-data\", $selectedData._id);\r\n        break;\r\n      case 3:\r\n        console.log(\"Entered 3\");\r\n        ipcRenderer.send(\"delete-professor-data\", $selectedData._id);\r\n        break;\r\n      case 4:\r\n        console.log(\"Entered 4\");\r\n        ipcRenderer.send(\"delete-program-data\", $selectedData._id);\r\n        break;\r\n      case 8:\r\n        console.log(\"Entered 8\");\r\n        // ipcRenderer.send(\"delete-advisetime\", $selectedData._id);\r\n        \r\n        let scheduleData = $selectedData;\r\n        scheduleData.type = 'delete';\r\n        scheduleData.day = $selectedData.day;\r\n        //     _id: $selectedData._id,\r\n        //     day: $selectedData.day,\r\n        //     type : 'delete',\r\n        // }\r\n        \r\n        ipcRenderer.send(\"save-data-professor-advisetime\", scheduleData);\r\n        break;        \r\n    }\r\n  }\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"delete-course-data\");\r\n    ipcRenderer.removeAllListeners(\"delete-room-data\");\r\n    ipcRenderer.removeAllListeners(\"delete-professor-data\");\r\n    ipcRenderer.removeAllListeners(\"delete-program-data\");\r\n    ipcRenderer.removeAllListeners(\"delete-advisetime\");\r\n    ipcRenderer.removeAllListeners(\"save-data-professor-advisetime\");\r\n  });\r\n\r\n  ipcRenderer.on(\"delete-course-data\", (event, res) => {\r\n    console.log(res)\r\n    if (res.success) {\r\n      message = res.message;\r\n      setTimeout(() => {\r\n        $selectedData = \"\";\r\n        $deleteWindowStatus = false;\r\n        message = \"Do you want to delete this?\";\r\n        disableWindow = false;\r\n        ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-program-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-room-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-course-data\");\r\n        $editWindowStatus = false;\r\n      }, 1000);\r\n    }\r\n  })\r\n  ipcRenderer.on(\"delete-room-data\", (event, res) => {\r\n    console.log(res)\r\n    if (res.success) {\r\n      message = res.message;\r\n      setTimeout(() => {\r\n        $selectedData = \"\";\r\n        $deleteWindowStatus = false;\r\n        message = \"Do you want to delete this?\";\r\n        disableWindow = false;\r\n        ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-program-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-room-data\", $selectedData._id);\r\n      }, 1000);\r\n    }\r\n  })\r\n  ipcRenderer.on(\"delete-professor-data\", (event, res) => {\r\n    console.log(res)\r\n    if (res.success) {\r\n      message = res.message;\r\n      setTimeout(() => {\r\n        $selectedData = \"\";\r\n        $deleteWindowStatus = false;\r\n        message = \"Do you want to delete this?\";\r\n        disableWindow = false;\r\n        ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-program-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-room-data\", $selectedData._id);\r\n      }, 1000);\r\n    }\r\n  })\r\n  ipcRenderer.on(\"delete-program-data\", (event, res) => {\r\n    console.log(res)\r\n    if (res.success) {\r\n      message = res.message;\r\n      setTimeout(() => {\r\n        $selectedData = \"\";\r\n        $deleteWindowStatus = false;\r\n        message = \"Do you want to delete this?\";\r\n        disableWindow = false;\r\n        ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-program-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-room-data\", $selectedData._id);\r\n      }, 1000);\r\n    }\r\n  })\r\n\r\n  ipcRenderer.on(\"save-data-professor-advisetime\", (event, status) => {\r\n      setTimeout(() => {\r\n        if (status.success == true) {\r\n          ipcRenderer.send(\"retrieve-professor-data-advisetime\" , $selectedData._id);\r\n          $selectedData.advisingTime = status.data;\r\n          $deleteWindowStatus = false;\r\n          message = \"Do you want to delete this?\";\r\n          disableWindow = false;\r\n        }\r\n      }, 1000);\r\n    }) \r\n</script>\r\n\r\n{#if $deleteWindowStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-center px-6 items-center backdrop-filter backdrop-blur-sm\" >\r\n\r\n    <div transition:fly={{y: 200, duration: 200}} class=\" w-80 h-auto z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\">\r\n      <h1 class=\"w-full p-2 px-4 text-2xl font-light text-center rounded-t-md\">\r\n        {message}\r\n      </h1>\r\n      <div class=\"flex flex-col justify-center items-center p-2\">\r\n        <button disabled={disableWindow} on:click={() => deleteWindowStatus.set(!$deleteWindowStatus)} class=\"w-4/6 p-1 mb-1 mt-1 rounded-full hover:drop-shadow-md hover:bg-white active:bg-gray-200 font-thin\">No, go back</button>\r\n        <button disabled={disableWindow} on:click={deleteRequest} class=\"w-4/6 p-1 mb-1 rounded-full hover:drop-shadow-md hover:bg-red-800 active:bg-red-900 hover:text-white font-thin\">Yes, continue</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { deleteWindowScheduleStatus, tbdData, selectedData } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\";\r\n  import { onDestroy } from \"svelte\";\r\n  let message = \"Do you want to delete this?\"\r\n  let disableWindow = false;\r\n\r\n  let deleteRequest = () => {\r\n    disableWindow = true;\r\n    ipcRenderer.send(\"delete-schedule-data\", $tbdData._id)\r\n  }\r\n\r\n  onDestroy(() => ipcRenderer.removeAllListeners(\"delete-schedule-data\"));\r\n\r\n  ipcRenderer.on(\"delete-schedule-data\", (event, res) => {\r\n    console.log(res)\r\n    if (res.success) {\r\n      message = res.message;\r\n      setTimeout(() => {\r\n        $deleteWindowScheduleStatus = false;\r\n        message = \"Do you want to delete this?\";\r\n        disableWindow = false;\r\n        ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-program-data\", $selectedData._id);\r\n        ipcRenderer.send(\"retrieve-schedule-room-data\", $selectedData._id);\r\n      }, 1000);\r\n    }\r\n  })\r\n</script>\r\n\r\n{#if $deleteWindowScheduleStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-center px-6 items-center backdrop-filter backdrop-blur-sm\" >\r\n\r\n    <div transition:fly={{y: 200, duration: 250}} class=\" w-80 h-auto z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\">\r\n      <h1 class=\"w-full p-2 px-4 text-2xl font-light text-center rounded-t-md\">{message}</h1>\r\n      <div class=\"flex flex-col justify-center items-center p-2\">\r\n        <button disabled={disableWindow} on:click={() => deleteWindowScheduleStatus.set(!$deleteWindowScheduleStatus)} class=\"w-4/6 p-1 mb-1 mt-1 rounded-full hover:drop-shadow-md hover:bg-white active:bg-gray-200 font-thin\">No, go back</button>\r\n        <button disabled={disableWindow} on:click={deleteRequest} class=\"w-4/6 p-1 mb-1 rounded-full hover:drop-shadow-md hover:bg-red-800 active:bg-red-900 hover:text-white font-thin\">Yes, continue</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { resetPasswordWindowStatus } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\";\r\n  import { onDestroy } from \"svelte\";\r\n  let message = \"Are you sure you want to reset your password? This will delete all data saved on the system.\"\r\n  let disableWindow = false;\r\n\r\n  let resetRequest = () => {\r\n    console.log(\"tite\");\r\n    ipcRenderer.send(\"login-reset\");\r\n    disableWindow = true;\r\n  }\r\n\r\n  ipcRenderer.on(\"login-reset\", (event, res) => {\r\n    if (res.success) {\r\n      message = res.message;\r\n      setTimeout(() => {\r\n        $resetPasswordWindowStatus = false;\r\n        disableWindow = false;\r\n        message = \"Are you sure you want to reset your password? This will delete all data saved on the system.\"\r\n      }, 5000);\r\n    }\r\n  })\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"login-reset\");\r\n  });\r\n</script>\r\n\r\n{#if $resetPasswordWindowStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-center px-6 items-center backdrop-filter backdrop-blur-sm\" >\r\n\r\n    <div transition:fly={{y: 200, duration: 250}} class=\" w-80 h-auto z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\">\r\n      <h1 class=\"w-full p-2 px-4 text-2xl font-light text-center rounded-t-md\">{message}</h1>\r\n      <div class=\"flex flex-col justify-center items-center p-2\">\r\n        <button disabled={disableWindow} on:click={() => resetPasswordWindowStatus.set(!$resetPasswordWindowStatus)} class=\"w-4/6 p-1 mb-1 mt-1 rounded-full hover:drop-shadow-md hover:bg-white active:bg-gray-200 font-thin\">No, go back</button>\r\n        <button disabled={disableWindow} on:click={resetRequest} class=\"w-4/6 p-1 mb-1 rounded-full hover:drop-shadow-md hover:bg-red-800 active:bg-red-900 hover:text-white font-thin\">Yes, continue</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { exitApplicationWindowStatus } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\";\r\n  import { onDestroy } from \"svelte\";\r\n  let message = \"Are you sure you want to close the application?\"\r\n  let disableWindow = false;\r\n\r\n  let resetRequest = () => {\r\n    console.log(\"tite\");\r\n    ipcRenderer.send(\"shutdown-prompt\")\r\n    disableWindow = true;\r\n  }\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"login-reset\");\r\n  });\r\n</script>\r\n\r\n{#if $exitApplicationWindowStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-center px-6 items-center backdrop-filter backdrop-blur-sm\" >\r\n\r\n    <div transition:fly={{y: 200, duration: 250}} class=\" w-80 h-auto z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\">\r\n      <h1 class=\"w-full p-2 px-4 text-2xl font-light text-center rounded-t-md\">{message}</h1>\r\n      <div class=\"flex flex-col justify-center items-center p-2\">\r\n        <button disabled={disableWindow} on:click={() => exitApplicationWindowStatus.set(!$exitApplicationWindowStatus)} class=\"w-4/6 p-1 mb-1 mt-1 rounded-full hover:drop-shadow-md hover:bg-white active:bg-gray-200 font-thin\">No, go back</button>\r\n        <button disabled={disableWindow} on:click={resetRequest} class=\"w-4/6 p-1 mb-1 rounded-full hover:drop-shadow-md hover:bg-red-800 active:bg-red-900 hover:text-white font-thin\">Yes, continue</button>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<svg id=\"svg\" class=\"h-72 w-72 m-4 drop-shadow-md\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0, 0, 400,400\"><g id=\"svgg\"><path id=\"path0\" d=\"M183.789 0.423 C 134.727 4.908,92.694 24.420,58.557 58.557 C -38.913 156.026,-11.096 320.157,113.086 380.303 C 156.602 401.380,207.496 405.861,254.252 392.734 C 329.911 371.491,386.697 306.989,398.029 229.418 C 414.396 117.391,335.823 14.786,223.220 1.141 C 215.335 0.186,191.193 -0.254,183.789 0.423 M201.563 12.648 C 201.563 12.944,201.167 13.449,200.684 13.770 C 199.807 14.352,199.805 14.378,199.941 23.465 C 200.084 32.996,200.234 34.055,201.544 34.756 C 203.132 35.606,202.315 35.938,198.633 35.938 C 194.840 35.938,194.268 35.686,195.779 34.683 C 196.624 34.121,196.634 33.996,196.531 25.277 C 196.416 15.575,196.263 14.441,194.998 13.872 C 193.167 13.049,194.063 12.533,197.559 12.400 C 199.438 12.329,201.108 12.234,201.270 12.190 C 201.431 12.146,201.563 12.352,201.563 12.648 M215.962 13.079 C 224.378 13.726,223.600 13.311,223.256 16.975 C 222.906 20.714,221.641 21.073,220.732 17.690 C 220.206 15.732,219.091 14.844,217.157 14.844 L 215.738 14.844 215.512 17.285 C 214.181 31.635,214.258 35.547,215.868 35.547 C 216.164 35.547,216.406 35.831,216.406 36.179 C 216.406 36.738,215.961 36.779,212.598 36.534 C 208.288 36.220,207.583 35.887,209.324 34.987 C 209.991 34.643,210.623 33.968,210.730 33.489 C 210.972 32.406,212.109 17.885,212.109 15.880 L 212.109 14.412 210.059 14.530 C 208.048 14.646,207.989 14.685,207.031 16.503 C 205.543 19.330,204.085 19.220,204.434 16.309 C 204.570 15.181,204.682 13.773,204.684 13.180 C 204.687 12.114,204.709 12.105,206.738 12.315 C 207.866 12.431,212.017 12.775,215.962 13.079 M191.207 12.961 C 191.907 13.713,191.507 17.787,190.723 17.898 C 190.089 17.988,189.745 17.759,189.483 17.071 C 187.963 13.073,181.690 13.829,181.653 18.014 C 181.635 20.056,182.891 21.387,186.302 22.938 C 191.520 25.311,192.969 26.924,192.969 30.358 C 192.969 34.931,190.300 36.781,183.485 36.933 C 181.074 36.987,178.368 37.203,177.471 37.413 C 175.602 37.850,175.497 37.766,171.354 32.528 C 168.706 29.180,168.120 28.810,166.000 29.149 C 164.616 29.371,164.423 29.519,164.597 30.230 C 164.708 30.684,165.006 32.285,165.260 33.789 C 165.814 37.064,166.197 37.891,167.159 37.891 C 168.257 37.891,168.512 39.015,167.467 39.243 C 165.870 39.592,161.971 40.234,161.452 40.234 C 160.705 40.234,160.821 39.570,161.725 38.666 C 162.221 38.169,162.442 37.557,162.322 37.006 C 162.217 36.526,161.508 32.529,160.746 28.125 C 159.210 19.252,158.946 18.359,157.863 18.359 C 156.749 18.359,156.478 17.239,157.533 16.998 C 161.701 16.046,167.988 15.207,169.383 15.416 C 174.719 16.217,176.105 23.197,171.635 26.761 L 170.548 27.628 171.599 28.179 C 172.177 28.482,173.926 30.207,175.485 32.012 C 179.003 36.085,179.297 36.209,179.297 33.626 C 179.297 31.769,179.360 31.641,180.273 31.641 C 180.902 31.641,181.250 31.860,181.250 32.257 C 181.250 34.866,186.682 36.148,188.793 34.037 C 191.426 31.404,189.623 28.224,183.905 25.413 C 174.525 20.803,177.491 12.046,188.221 12.669 C 189.800 12.761,191.144 12.892,191.207 12.961 M229.269 14.590 C 231.839 15.080,232.687 15.755,231.291 16.198 C 229.955 16.622,229.997 17.745,231.529 22.466 L 233.011 27.032 235.792 23.575 C 239.012 19.573,239.428 18.629,238.449 17.548 C 237.412 16.401,237.960 16.261,241.391 16.795 C 244.772 17.320,245.373 17.916,243.364 18.748 C 242.686 19.029,240.415 21.324,237.943 24.227 L 233.689 29.222 233.033 32.789 C 232.323 36.655,232.439 37.719,233.614 38.092 C 234.431 38.352,234.677 39.453,233.917 39.453 C 232.762 39.453,226.718 38.175,226.392 37.861 C 226.170 37.648,226.494 37.347,227.217 37.095 C 228.693 36.580,229.117 35.674,229.718 31.752 L 230.191 28.661 228.162 22.381 C 226.980 18.722,225.816 15.814,225.372 15.412 C 223.767 13.960,224.813 13.740,229.269 14.590 M164.258 17.453 C 162.442 17.740,162.410 17.933,163.335 22.990 L 164.204 27.743 165.598 27.494 C 169.665 26.767,170.883 25.401,170.626 21.855 C 170.359 18.167,168.382 16.800,164.258 17.453 M153.606 20.775 C 153.962 22.104,154.165 23.335,154.057 23.510 C 153.653 24.163,152.412 23.795,151.782 22.834 C 150.654 21.112,145.194 21.214,143.277 22.993 C 143.018 23.233,145.005 30.682,145.445 31.122 C 146.081 31.758,150.000 30.012,150.223 28.994 C 150.629 27.139,150.741 26.953,151.455 26.953 C 152.157 26.953,154.106 32.563,153.657 33.290 C 153.291 33.882,151.974 33.582,151.563 32.813 C 151.085 31.921,150.292 31.848,147.829 32.468 C 145.761 32.989,145.764 32.963,147.130 37.875 C 148.437 42.578,148.219 42.404,151.617 41.449 C 155.018 40.492,155.859 39.667,155.859 37.288 C 155.859 33.589,157.845 34.511,158.610 38.565 C 159.176 41.563,160.169 40.900,151.480 43.332 C 143.917 45.449,142.634 45.549,144.185 43.898 L 145.069 42.957 142.615 34.272 C 140.012 25.058,139.500 23.828,138.272 23.828 C 136.664 23.828,137.511 22.675,139.551 22.086 C 140.679 21.760,143.975 20.808,146.875 19.971 C 149.775 19.133,152.331 18.427,152.554 18.403 C 152.777 18.379,153.250 19.447,153.606 20.775 M265.805 24.147 C 275.236 29.236,268.256 48.433,257.693 46.460 C 251.276 45.261,248.560 40.153,250.630 33.176 C 253.288 24.216,259.301 20.638,265.805 24.147 M134.586 24.243 C 134.727 24.472,134.561 24.969,134.218 25.348 C 133.434 26.215,133.428 28.195,134.180 38.672 C 134.976 49.765,134.975 49.779,133.783 50.322 C 132.652 50.838,133.617 51.777,124.218 41.016 C 118.302 34.241,117.240 33.244,115.918 33.217 C 114.430 33.187,115.392 32.342,118.609 30.856 C 122.375 29.116,122.656 29.049,122.656 29.883 C 122.656 30.205,122.492 30.469,122.292 30.469 C 121.655 30.469,121.424 31.969,121.918 32.895 C 122.583 34.142,132.101 45.373,132.313 45.161 C 132.511 44.962,131.321 31.163,130.979 29.688 C 130.639 28.227,130.104 27.734,128.858 27.734 C 126.877 27.734,127.632 26.775,130.762 25.315 C 134.244 23.691,134.244 23.691,134.586 24.243 M259.940 24.984 C 255.862 26.635,252.085 37.955,254.200 42.188 C 256.323 46.437,261.235 45.481,264.007 40.279 C 268.833 31.225,266.470 22.339,259.940 24.984 M284.668 32.526 C 288.374 34.405,291.406 36.122,291.406 36.343 C 291.406 37.030,289.459 40.625,289.088 40.625 C 287.914 40.625,287.490 40.098,287.712 38.915 C 288.113 36.777,287.446 35.860,284.429 34.401 C 282.903 33.663,281.589 33.135,281.508 33.229 C 281.427 33.322,280.478 35.124,279.398 37.234 L 277.435 41.069 279.531 42.097 L 281.628 43.125 282.820 42.244 C 285.336 40.383,285.746 41.416,283.931 45.043 C 282.012 48.879,282.247 48.597,281.377 48.110 C 280.881 47.832,280.664 47.256,280.664 46.221 C 280.664 44.827,280.535 44.663,278.626 43.637 L 276.588 42.542 274.818 46.068 C 272.907 49.873,272.703 50.926,273.671 51.995 C 275.090 53.564,273.700 53.459,270.277 51.740 C 266.883 50.035,266.204 49.219,268.182 49.219 C 269.392 49.219,270.032 48.206,274.627 39.027 C 277.972 32.346,278.188 31.771,277.781 30.645 C 277.270 29.232,277.231 28.789,277.637 28.976 C 277.798 29.050,280.962 30.648,284.668 32.526 M113.413 33.856 C 113.557 34.000,113.412 34.518,113.092 35.007 C 112.344 36.148,112.288 36.016,117.142 44.531 C 121.652 52.442,122.519 53.580,123.785 53.249 C 125.753 52.735,124.420 54.321,121.488 55.982 C 118.721 57.550,116.997 57.847,118.315 56.528 C 119.242 55.602,118.608 53.973,114.584 46.935 C 109.975 38.874,109.255 37.891,107.963 37.891 C 106.192 37.891,106.705 37.151,109.669 35.429 C 112.995 33.496,113.036 33.479,113.413 33.856 M104.688 39.235 C 104.688 39.544,104.512 39.906,104.297 40.039 C 103.455 40.559,104.104 41.828,109.645 50.495 C 115.058 58.961,115.342 59.502,114.649 60.009 C 113.500 60.849,113.429 60.822,103.415 55.767 C 98.207 53.138,93.808 50.924,93.641 50.848 C 93.219 50.655,102.343 64.577,102.883 64.951 C 103.124 65.117,103.710 65.186,104.186 65.105 C 105.887 64.815,105.304 65.848,102.826 67.517 C 100.459 69.111,98.442 69.370,99.922 67.891 C 100.798 67.014,100.393 66.118,96.058 59.326 C 90.293 50.296,90.059 50.000,88.652 50.000 C 86.946 50.000,87.238 49.410,89.735 47.813 L 91.970 46.383 101.071 50.929 L 110.171 55.474 105.861 49.026 C 101.894 43.092,101.458 42.578,100.385 42.578 C 98.681 42.578,98.942 42.021,101.465 40.270 C 103.871 38.601,104.688 38.338,104.688 39.235 M308.542 46.973 C 312.548 49.819,315.907 52.306,316.005 52.500 C 316.184 52.850,313.282 57.395,312.868 57.412 C 311.931 57.453,311.309 56.350,311.696 55.334 C 312.623 52.894,311.215 49.609,309.241 49.609 C 309.139 49.609,306.579 53.109,303.551 57.385 C 298.149 65.017,297.446 66.430,298.516 67.500 C 300.114 69.098,297.839 68.390,295.117 66.442 C 292.261 64.398,291.463 63.331,292.969 63.569 C 294.601 63.827,295.384 63.011,300.773 55.426 L 306.367 47.553 305.430 46.822 C 303.570 45.373,302.103 45.505,299.519 47.354 C 297.633 48.704,297.485 46.727,299.282 44.200 C 301.345 41.300,299.985 40.893,308.542 46.973 M217.188 43.158 C 343.392 57.779,402.076 206.752,319.516 302.926 C 242.326 392.845,96.048 367.740,52.973 257.180 C 10.206 147.414,100.567 29.647,217.188 43.158 M84.194 53.822 C 83.949 55.269,84.048 55.421,88.685 60.756 C 96.002 69.175,96.792 71.925,93.046 75.931 C 88.027 81.299,84.607 80.571,77.776 72.680 C 71.344 65.249,71.648 65.527,70.304 65.822 C 68.409 66.238,68.891 65.254,71.740 62.891 C 74.647 60.479,74.855 60.435,74.683 62.260 C 74.547 63.709,74.502 63.645,80.552 70.572 C 86.795 77.718,88.643 78.445,91.610 74.919 C 93.876 72.226,93.226 70.616,86.993 63.477 C 81.716 57.432,81.495 57.237,80.039 57.348 C 78.417 57.472,78.589 57.109,81.339 54.603 C 84.243 51.956,84.522 51.880,84.194 53.822 M323.774 58.721 C 325.143 60.146,325.177 61.269,323.830 60.548 C 322.746 59.968,322.800 59.936,319.685 62.957 C 316.146 66.388,316.122 65.975,320.072 69.611 L 323.340 72.620 326.166 69.706 C 328.839 66.950,328.978 66.718,328.736 65.427 C 328.371 63.480,328.960 63.674,331.860 66.459 C 334.496 68.990,334.711 69.657,332.764 69.268 C 330.741 68.863,317.549 82.860,318.420 84.488 C 319.518 86.540,317.918 86.060,315.426 83.590 C 312.576 80.766,312.354 80.264,314.110 80.615 C 315.233 80.840,315.591 80.605,318.615 77.652 C 322.483 73.877,322.490 74.383,318.519 70.602 L 315.358 67.593 312.127 70.903 C 309.040 74.066,308.908 74.274,309.153 75.583 C 309.533 77.609,308.768 77.349,305.935 74.490 C 303.347 71.879,303.227 71.425,305.211 71.743 C 307.120 72.049,319.729 58.790,319.408 56.814 C 319.048 54.598,320.370 55.175,323.774 58.721 M342.581 78.060 L 347.756 84.049 345.851 85.757 C 343.664 87.717,343.528 87.764,342.987 86.754 C 342.697 86.211,342.746 85.705,343.167 84.898 C 344.118 83.074,343.861 82.207,341.569 79.504 L 339.387 76.933 337.032 78.994 C 335.737 80.127,334.218 81.430,333.658 81.888 L 332.639 82.721 333.995 84.297 C 335.603 86.166,336.277 86.477,337.613 85.969 C 340.092 85.026,339.829 86.659,337.106 89.125 C 334.591 91.403,332.932 91.575,333.831 89.464 C 334.532 87.816,334.394 87.232,332.909 85.558 L 331.384 83.839 327.899 86.886 C 323.786 90.481,323.895 90.011,326.488 92.957 C 328.762 95.540,329.662 95.823,332.208 94.759 C 333.403 94.260,333.593 94.274,334.160 94.900 C 334.764 95.568,331.907 98.380,329.982 99.013 C 329.477 99.178,319.827 88.253,319.598 87.257 C 319.498 86.821,319.794 86.749,320.966 86.925 C 323.268 87.272,336.877 75.512,336.702 73.327 C 336.521 71.070,336.589 71.125,342.581 78.060 M61.961 76.660 C 64.618 78.660,64.136 79.556,60.511 79.354 C 52.030 78.882,56.303 90.745,66.080 94.812 C 71.464 97.052,75.822 93.543,73.445 88.883 C 72.026 86.099,73.480 85.544,76.149 87.851 L 77.884 89.351 76.274 92.062 C 71.312 100.414,65.152 100.784,57.553 93.187 C 52.228 87.864,52.232 83.012,57.567 77.504 C 59.979 75.014,59.816 75.045,61.961 76.660 M48.828 91.361 C 48.828 92.732,49.150 93.014,57.326 98.797 C 64.024 103.534,64.623 103.835,66.309 103.308 C 67.597 102.906,67.412 103.465,65.224 106.579 C 63.025 109.711,62.500 109.989,62.500 108.025 C 62.500 105.628,46.154 94.417,45.113 96.100 C 44.753 96.683,44.050 96.113,44.306 95.446 C 44.788 94.188,48.141 89.856,48.473 90.061 C 48.668 90.182,48.828 90.767,48.828 91.361 M358.078 98.928 C 362.847 106.395,363.014 109.163,358.860 111.857 C 354.868 114.445,351.060 113.290,348.033 108.572 C 347.336 107.487,346.553 106.681,346.292 106.781 C 345.021 107.269,340.228 110.602,340.179 111.033 C 340.149 111.303,340.105 111.875,340.081 112.305 C 339.995 113.902,339.259 113.396,337.398 110.462 C 335.728 107.829,335.143 105.690,336.450 106.997 C 337.429 107.976,339.053 107.255,346.186 102.675 C 354.423 97.386,354.757 97.121,354.666 95.947 C 354.484 93.622,354.951 94.030,358.078 98.928 M42.433 100.135 C 42.103 101.451,42.783 101.948,52.625 107.589 C 64.721 114.521,64.311 114.825,42.809 114.850 L 37.305 114.857 40.430 116.537 C 42.148 117.462,45.464 119.321,47.798 120.670 C 51.948 123.068,52.568 123.237,54.395 122.469 C 55.430 122.034,55.244 122.793,53.625 125.607 C 52.121 128.223,51.380 128.619,51.349 126.824 C 51.325 125.436,51.661 125.681,42.713 120.539 C 34.618 115.888,34.116 115.683,32.825 116.489 C 31.532 117.296,31.538 116.576,32.843 114.263 C 34.398 111.508,33.239 111.788,44.571 111.433 L 54.182 111.133 47.594 107.477 C 41.201 103.929,40.979 103.840,40.055 104.446 C 38.515 105.455,38.514 104.511,40.052 101.761 C 41.464 99.235,42.906 98.250,42.433 100.135 M352.252 102.794 L 348.058 105.539 349.231 107.244 C 353.529 113.492,361.879 108.233,357.821 101.834 C 357.181 100.825,356.610 100.011,356.552 100.024 C 356.493 100.038,354.558 101.284,352.252 102.794 M193.555 111.582 C 192.910 111.657,190.713 111.910,188.672 112.143 C 147.868 116.817,115.006 152.796,113.420 194.531 C 111.195 253.085,165.232 296.594,222.080 282.022 C 287.229 265.322,308.750 182.202,259.982 135.640 C 242.256 118.716,215.495 109.024,193.555 111.582 M367.588 115.123 C 369.527 119.399,369.567 120.085,367.812 118.935 C 366.791 118.265,366.480 118.343,362.012 120.391 C 360.562 121.056,359.375 121.737,359.375 121.904 C 359.375 122.272,362.683 129.610,362.984 129.912 C 363.620 130.547,370.646 126.619,370.771 125.559 C 371.002 123.593,371.715 124.156,373.145 127.432 C 374.573 130.705,374.564 132.037,373.123 130.733 C 372.087 129.795,372.318 129.723,363.206 133.828 C 353.918 138.013,353.906 138.019,353.906 139.283 C 353.906 141.157,353.115 140.552,351.775 137.653 C 351.014 136.004,350.391 134.417,350.391 134.125 C 350.391 133.506,351.016 133.416,351.367 133.984 C 351.859 134.781,353.952 134.328,357.594 132.638 L 361.337 130.901 360.314 128.634 C 359.751 127.387,358.930 125.520,358.488 124.485 C 357.537 122.253,357.563 122.252,352.465 124.709 C 349.479 126.148,348.998 126.518,348.828 127.507 C 348.488 129.490,347.866 129.012,346.320 125.578 C 344.568 121.689,344.690 121.105,346.918 122.715 C 347.431 123.085,349.181 122.428,356.361 119.170 C 364.919 115.287,365.625 114.836,365.625 113.249 C 365.625 111.783,366.416 112.538,367.588 115.123 M208.259 114.475 C 278.136 121.596,309.286 206.139,260.551 256.395 C 227.624 290.350,174.990 291.161,141.267 258.233 C 99.592 217.539,110.718 148.373,163.086 122.594 C 167.972 120.189,177.241 116.793,180.302 116.286 C 180.931 116.181,182.939 115.815,184.766 115.471 C 191.951 114.119,201.001 113.735,208.259 114.475 M30.469 122.493 C 30.835 124.630,48.750 131.389,50.014 129.866 C 51.265 128.359,51.266 130.123,50.018 133.353 C 48.755 136.618,47.656 137.551,47.656 135.358 C 47.656 134.186,47.361 133.994,42.701 132.135 L 38.722 130.548 37.135 134.645 C 36.261 136.898,35.547 138.884,35.547 139.057 C 35.547 139.230,37.418 140.097,39.705 140.983 C 43.543 142.471,45.313 142.719,45.313 141.771 C 45.313 141.570,45.576 141.406,45.898 141.406 C 46.700 141.406,46.659 141.665,45.271 145.298 C 44.027 148.557,43.323 149.089,42.966 147.042 C 42.602 144.960,24.945 138.284,23.430 139.655 C 22.158 140.806,22.141 139.564,23.384 136.328 C 24.538 133.324,25.781 132.170,25.781 134.103 C 25.781 135.360,26.132 135.609,30.194 137.243 L 33.631 138.626 33.959 137.770 C 34.139 137.299,34.920 135.345,35.695 133.428 C 36.469 131.510,37.061 129.905,37.009 129.860 C 35.502 128.560,28.125 126.830,28.125 127.776 C 28.125 127.968,27.861 128.125,27.539 128.125 C 26.737 128.125,26.779 127.867,28.166 124.233 C 29.411 120.974,30.117 120.440,30.469 122.493 M194.727 127.003 C 140.689 130.548,110.577 192.343,140.707 237.859 C 172.246 285.501,245.644 277.621,266.333 224.371 C 285.433 175.209,247.439 123.545,194.727 127.003 M205.664 129.709 C 254.298 133.904,283.422 186.036,261.300 229.297 C 235.751 279.259,164.227 279.259,138.698 229.297 C 116.614 186.077,145.999 133.482,194.336 129.713 C 200.053 129.267,200.534 129.267,205.664 129.709 M377.085 137.793 C 378.289 141.269,378.349 141.797,377.539 141.797 C 377.217 141.797,376.953 141.633,376.953 141.433 C 376.953 140.324,374.861 140.735,367.077 143.376 C 357.959 146.469,357.147 146.848,356.962 148.104 C 356.686 149.985,355.906 149.149,354.766 145.750 C 353.560 142.154,353.742 140.895,355.218 142.619 C 356.020 143.556,355.838 143.597,366.016 140.129 C 374.807 137.133,375.000 137.037,375.000 135.694 C 375.000 133.772,376.063 134.842,377.085 137.793 M191.746 142.761 C 146.247 150.222,128.056 205.255,160.377 237.660 C 195.631 273.007,255.658 248.173,255.658 198.242 C 255.658 163.798,225.120 137.288,191.746 142.761 M24.089 144.372 C 25.685 144.836,26.171 145.141,26.005 145.576 C 25.882 145.896,25.781 146.319,25.781 146.516 C 25.781 146.714,25.333 146.875,24.785 146.875 C 22.079 146.875,20.029 149.461,20.547 152.223 C 21.681 158.264,37.391 162.151,40.032 157.044 C 41.085 155.008,40.811 153.068,39.258 151.563 C 36.812 149.192,37.435 148.198,40.783 149.130 L 43.063 149.764 42.855 152.323 C 42.064 162.064,36.115 165.442,26.420 161.656 C 18.897 158.717,16.515 151.362,20.913 144.650 C 21.614 143.580,21.422 143.596,24.089 144.372 M380.087 147.363 C 380.540 148.921,380.998 150.503,381.106 150.879 C 381.351 151.731,380.370 151.799,379.688 150.977 C 378.972 150.115,378.712 150.163,368.940 152.961 C 358.334 155.998,359.622 155.163,360.549 158.405 C 361.535 161.853,361.973 162.260,364.955 162.500 C 369.608 162.874,366.346 165.671,361.304 165.630 C 360.685 165.625,356.315 151.367,356.788 150.894 C 357.019 150.663,357.661 150.918,358.669 151.642 C 359.211 152.031,360.898 151.672,368.044 149.646 C 377.745 146.896,378.125 146.749,378.125 145.754 C 378.125 145.007,378.448 144.531,378.955 144.531 C 379.125 144.531,379.634 145.806,380.087 147.363 M210.742 145.889 C 252.529 155.228,267.567 205.835,237.500 235.936 C 201.212 272.264,138.980 240.094,147.452 189.387 C 152.374 159.931,182.115 139.490,210.742 145.889 M193.945 158.216 C 164.927 162.685,150.136 196.388,166.522 220.703 C 188.679 253.582,239.970 237.908,240.023 198.242 C 240.056 173.343,218.320 154.462,193.945 158.216 M209.375 161.690 C 237.699 168.975,247.168 205.210,226.002 225.316 C 201.774 248.330,162.637 231.466,162.718 198.047 C 162.778 173.245,185.490 155.547,209.375 161.690 M384.311 164.746 C 385.392 169.877,385.235 171.679,383.894 169.531 C 383.223 168.458,382.428 168.512,372.461 170.314 C 363.818 171.877,362.891 172.209,362.891 173.740 C 362.891 175.615,361.825 173.430,361.352 170.585 C 360.739 166.900,360.914 166.205,362.129 167.509 C 363.127 168.580,362.352 168.633,372.602 166.789 C 381.954 165.107,382.813 164.844,382.813 163.658 C 382.813 162.086,383.919 162.889,384.311 164.746 M20.042 164.715 C 21.293 165.062,20.666 166.430,18.994 167.002 C 18.161 167.287,17.293 167.707,17.063 167.937 C 16.614 168.386,15.605 174.995,15.983 175.007 C 16.108 175.011,18.042 175.275,20.280 175.593 C 25.058 176.272,24.486 176.527,24.821 173.567 C 25.093 171.164,25.092 171.161,23.875 170.532 C 21.154 169.125,22.580 168.140,26.651 168.614 C 29.939 168.997,31.098 170.441,28.529 170.954 C 27.091 171.242,26.751 171.803,26.416 174.438 L 26.164 176.415 31.006 176.985 L 35.847 177.554 36.194 174.578 C 36.665 170.537,36.467 169.945,34.264 168.811 C 31.050 167.157,31.859 165.882,35.666 166.600 C 39.119 167.250,38.923 166.503,37.897 175.094 C 37.077 181.969,36.540 184.243,36.053 182.915 C 35.379 181.077,34.856 180.921,25.197 179.675 L 15.824 178.465 14.917 179.519 C 14.412 180.106,13.869 180.420,13.692 180.228 C 13.417 179.930,14.983 165.946,15.450 164.526 C 15.612 164.037,17.943 164.132,20.042 164.715 M193.053 171.882 C 172.827 177.182,166.003 202.459,180.814 217.223 C 200.488 236.836,233.132 218.177,226.321 191.211 C 222.736 177.015,207.422 168.118,193.053 171.882 M207.596 174.843 C 220.310 178.940,227.618 193.429,223.272 205.926 C 214.981 229.766,180.959 227.440,175.944 202.691 C 172.311 184.760,190.020 169.180,207.596 174.843 M386.463 177.441 C 387.332 188.600,386.006 191.335,379.913 190.947 C 375.687 190.678,373.665 188.300,373.172 183.020 L 372.934 180.473 369.573 180.720 C 365.749 181.000,364.955 181.298,364.444 182.641 C 363.939 183.970,363.352 183.829,363.124 182.324 C 362.301 176.888,362.659 174.460,363.972 176.563 C 364.583 177.542,366.519 177.574,376.409 176.770 C 384.182 176.138,384.630 176.044,384.972 174.964 C 385.547 173.154,386.216 174.266,386.463 177.441 M378.041 180.058 C 374.353 180.367,374.396 180.325,374.941 183.096 C 376.194 189.472,385.183 188.976,385.151 182.532 C 385.136 179.468,385.125 179.464,378.041 180.058 M17.871 183.449 C 19.337 183.842,19.046 185.404,17.451 185.704 C 15.438 186.081,14.453 187.234,14.453 189.212 L 14.453 190.894 20.375 191.150 C 32.795 191.688,34.256 191.567,35.117 189.930 C 36.175 187.923,36.699 190.933,36.080 195.453 C 35.807 197.442,35.329 197.771,34.786 196.342 C 34.279 195.010,34.194 194.998,23.664 194.692 L 14.063 194.413 14.063 195.865 C 14.063 197.913,14.655 198.789,16.635 199.664 C 17.998 200.267,18.359 200.628,18.359 201.385 C 18.359 202.456,18.227 202.481,14.608 202.103 L 12.305 201.863 12.402 194.974 C 12.455 191.186,12.601 186.987,12.726 185.645 L 12.953 183.203 14.972 183.208 C 16.083 183.211,17.388 183.320,17.871 183.449 M365.542 194.309 C 366.090 195.513,366.942 195.624,377.311 195.837 L 385.285 196.000 386.215 195.070 C 387.872 193.413,387.989 193.762,387.707 199.512 C 387.273 208.350,385.966 210.562,381.191 210.538 C 376.421 210.514,373.438 206.619,373.888 201.004 L 374.023 199.321 370.780 199.092 C 367.211 198.840,365.655 199.213,365.346 200.395 C 364.740 202.715,364.063 201.064,364.063 197.266 C 364.063 193.197,364.572 192.180,365.542 194.309 M375.781 201.387 C 375.781 205.293,377.151 206.752,380.854 206.788 C 384.419 206.824,385.929 205.139,385.935 201.120 C 385.938 199.343,385.588 199.231,379.980 199.224 L 375.781 199.219 375.781 201.387 M20.664 207.806 L 26.289 210.611 29.992 210.333 C 33.788 210.049,35.156 209.433,35.156 208.008 C 35.156 207.400,35.766 207.202,36.059 207.715 C 36.569 208.606,36.737 215.625,36.249 215.625 C 35.965 215.625,35.559 215.229,35.347 214.746 C 34.979 213.909,34.764 213.870,30.853 213.922 L 26.745 213.977 21.674 217.179 C 18.884 218.941,16.056 220.981,15.388 221.714 C 13.638 223.637,13.597 223.563,13.158 217.676 C 13.007 215.643,13.738 214.715,14.312 216.211 C 14.735 217.313,16.410 216.796,20.324 214.355 L 24.239 211.914 20.453 210.059 C 16.284 208.015,14.354 207.709,13.672 208.984 C 12.925 210.379,12.606 209.823,12.329 206.646 C 11.990 202.760,12.223 202.319,13.814 203.834 C 14.488 204.476,17.570 206.264,20.664 207.806 M364.844 211.866 C 364.844 213.000,366.136 213.306,373.286 213.868 C 383.658 214.683,385.430 214.655,385.742 213.672 C 386.398 211.604,387.226 212.851,386.973 215.527 C 386.836 216.978,386.723 218.647,386.722 219.238 C 386.718 220.493,385.744 220.718,385.435 219.536 C 385.121 218.335,384.037 218.123,374.586 217.420 C 365.368 216.734,364.636 216.777,364.240 218.026 C 363.391 220.701,362.804 216.089,363.524 212.402 C 363.736 211.318,364.844 210.868,364.844 211.866 M37.812 224.532 C 39.223 232.466,39.219 233.072,37.766 231.707 C 36.618 230.628,36.906 230.613,27.817 232.224 C 17.808 233.997,17.332 234.136,17.019 235.383 C 16.557 237.224,15.826 236.107,15.258 232.695 C 14.673 229.176,14.901 228.089,15.911 229.590 C 16.680 230.735,16.718 230.732,26.953 228.906 C 31.769 228.047,35.869 227.344,36.063 227.344 C 36.435 227.344,36.149 224.641,35.519 222.214 C 35.117 220.666,34.279 220.164,31.348 219.716 C 30.298 219.556,29.688 219.260,29.688 218.911 C 29.688 218.608,29.644 218.228,29.590 218.066 C 29.494 217.778,34.818 216.826,35.911 216.936 C 36.323 216.978,36.824 218.981,37.812 224.532 M364.063 221.080 C 364.063 222.265,364.921 222.529,374.273 224.211 C 384.466 226.045,383.809 225.995,384.661 225.000 C 385.495 224.026,386.455 223.964,386.181 224.902 C 386.072 225.278,385.868 226.392,385.730 227.377 C 385.591 228.362,385.361 229.341,385.219 229.552 C 385.026 229.840,372.429 234.721,366.406 236.841 C 366.084 236.955,366.348 237.070,366.992 237.097 C 367.637 237.124,371.064 237.652,374.609 238.271 C 381.014 239.388,381.061 239.390,382.113 238.643 C 383.823 237.428,383.875 237.578,383.163 241.667 C 382.755 244.008,381.641 245.282,381.641 243.407 C 381.641 242.106,380.773 241.846,370.187 239.967 C 360.551 238.258,359.766 238.058,359.772 237.321 C 359.782 235.932,360.142 235.750,370.898 231.711 C 376.699 229.533,381.229 227.747,380.964 227.742 C 380.700 227.738,376.850 227.113,372.410 226.354 L 364.337 224.973 363.446 225.810 C 362.044 227.127,361.822 226.596,362.413 223.340 C 362.927 220.505,364.063 218.950,364.063 221.080 M37.411 237.562 C 44.217 240.944,44.158 249.974,37.305 253.766 C 26.606 259.686,15.182 253.354,18.917 243.575 C 20.998 238.127,31.606 234.677,37.411 237.562 M29.937 240.463 C 22.560 242.249,18.790 246.313,20.838 250.273 C 23.516 255.452,39.309 251.620,40.454 245.513 C 41.291 241.053,36.669 238.834,29.937 240.463 M360.156 242.760 C 360.156 244.029,360.439 244.162,369.890 247.320 C 378.576 250.223,379.075 250.322,380.147 249.351 C 381.588 248.047,381.368 249.405,378.963 256.653 C 376.125 265.208,376.551 264.662,373.511 263.635 C 370.592 262.650,370.512 261.305,373.350 260.916 C 374.220 260.796,375.199 260.477,375.525 260.206 C 376.033 259.785,378.290 253.903,378.024 253.695 C 377.774 253.501,370.452 251.172,370.090 251.172 C 369.861 251.172,369.363 252.157,368.984 253.362 L 368.293 255.552 369.236 256.585 C 370.166 257.604,370.280 259.199,369.399 258.875 C 369.150 258.783,367.715 258.307,366.211 257.817 C 362.925 256.746,363.119 256.892,363.654 255.893 C 363.948 255.343,364.474 255.078,365.268 255.078 C 366.256 255.078,366.543 254.846,367.045 253.644 C 368.321 250.591,368.249 250.493,363.485 248.806 C 358.645 247.092,358.978 246.999,357.864 250.369 C 356.707 253.868,356.777 254.409,358.594 255.964 C 361.894 258.789,358.015 259.532,354.009 256.843 C 353.920 256.783,358.213 243.880,358.787 242.480 C 359.210 241.451,360.156 241.644,360.156 242.760 M34.124 259.522 C 35.755 260.203,37.625 262.460,38.492 264.792 C 39.468 267.416,39.484 267.420,42.912 266.039 C 46.251 264.692,47.391 263.787,47.194 262.636 C 46.857 260.670,48.269 262.282,49.452 265.214 C 50.689 268.282,50.772 270.791,49.566 268.652 C 48.929 267.525,47.672 267.827,39.181 271.146 C 30.677 274.471,29.807 274.940,29.612 276.310 C 29.220 279.055,24.877 268.929,24.832 265.167 C 24.777 260.638,29.675 257.663,34.124 259.522 M356.493 259.816 C 358.867 260.853,358.741 260.713,358.203 261.720 C 357.859 262.362,357.519 262.511,356.807 262.332 C 352.281 261.196,349.803 268.167,353.993 270.250 C 356.334 271.413,357.412 271.105,361.299 268.160 C 370.255 261.374,376.668 268.562,370.448 278.414 L 369.156 280.460 367.097 279.558 C 364.315 278.339,364.243 277.272,366.917 276.889 C 371.647 276.213,372.825 270.370,368.474 269.168 C 366.715 268.683,364.959 269.401,361.546 272.003 C 354.086 277.691,346.835 271.918,350.998 263.605 C 353.331 258.946,353.784 258.633,356.493 259.816 M30.795 262.734 C 27.352 263.776,26.319 266.015,27.614 269.629 C 28.419 271.873,28.156 271.862,33.203 269.864 C 38.292 267.850,38.109 268.034,37.116 265.922 C 35.584 262.662,33.877 261.801,30.795 262.734 M359.255 286.035 C 358.788 292.416,357.000 295.816,353.178 297.593 C 351.169 298.527,350.669 299.026,348.271 302.500 L 345.602 306.368 346.922 306.104 C 347.648 305.959,349.912 305.011,351.953 303.997 C 353.994 302.983,355.820 302.086,356.010 302.003 C 356.535 301.775,355.907 304.587,354.852 307.183 C 352.210 313.683,347.716 316.863,338.532 318.732 L 334.961 319.458 331.929 322.680 C 330.261 324.452,328.969 325.975,329.059 326.064 C 329.148 326.153,331.831 325.791,335.021 325.259 C 346.144 323.403,345.680 323.315,343.397 326.847 C 338.597 334.274,332.310 337.414,320.592 338.236 L 314.936 338.633 311.010 341.680 L 307.084 344.727 315.651 344.832 C 320.363 344.890,324.219 345.093,324.219 345.284 C 324.219 345.994,320.726 349.887,318.699 351.436 C 312.414 356.239,306.120 357.464,294.141 356.214 L 290.039 355.786 285.816 358.012 C 283.493 359.236,281.659 360.305,281.741 360.387 C 281.824 360.469,284.779 360.793,288.309 361.106 C 294.946 361.694,298.828 362.344,298.828 362.865 C 298.828 363.282,294.709 366.456,292.578 367.681 C 287.093 370.834,280.595 371.148,272.230 368.664 C 268.830 367.655,267.467 367.409,266.761 367.678 C 265.176 368.281,252.380 371.484,251.556 371.484 C 249.854 371.484,250.898 370.360,253.493 369.398 C 254.984 368.845,258.386 367.410,261.051 366.209 L 265.898 364.026 267.364 360.322 C 270.494 352.413,274.409 348.082,282.459 343.616 C 286.938 341.133,287.053 342.563,283.060 351.111 C 279.437 358.868,279.391 358.625,284.035 356.166 C 287.075 354.556,287.970 353.893,288.136 353.127 C 290.713 341.222,294.125 336.170,304.459 328.957 C 305.730 328.070,306.917 327.344,307.096 327.344 C 307.797 327.344,307.359 331.005,306.055 336.051 C 303.993 344.026,303.924 343.893,308.402 340.577 C 311.913 337.976,312.096 337.627,312.105 333.480 C 312.122 326.186,315.224 319.539,321.622 313.086 L 325.494 309.180 325.831 310.547 C 326.016 311.299,326.056 314.946,325.919 318.652 C 325.756 323.061,325.805 325.391,326.061 325.391 C 326.695 325.391,332.890 318.410,332.630 317.989 C 331.367 315.946,332.813 306.833,335.075 302.587 C 336.477 299.953,342.632 292.910,343.117 293.383 C 343.490 293.746,343.516 296.810,343.188 301.758 L 342.877 306.445 345.834 302.317 C 348.519 298.567,348.829 297.940,349.213 295.481 C 349.966 290.665,352.141 287.454,356.867 284.185 C 359.503 282.362,359.523 282.377,359.255 286.035 M44.120 285.410 C 48.770 288.542,50.869 291.629,51.734 296.610 C 52.178 299.167,52.526 299.901,54.889 303.258 C 57.952 307.609,58.417 307.862,58.052 304.980 C 56.893 295.841,57.294 293.506,59.638 295.757 C 66.062 301.926,69.135 309.058,68.606 316.574 L 68.356 320.131 71.630 323.388 C 75.548 327.285,75.569 327.269,75.136 320.777 C 74.794 315.654,74.877 311.889,75.351 311.029 C 75.743 310.318,82.005 316.651,84.254 320.033 C 87.183 324.440,89.025 331.107,89.077 337.490 L 89.091 339.258 92.690 341.916 C 96.930 345.048,96.914 345.067,95.298 338.848 C 92.402 327.701,92.580 327.288,98.438 331.555 C 106.292 337.276,109.773 342.280,112.083 351.172 L 113.148 355.273 116.828 357.314 C 121.226 359.752,121.275 359.689,118.934 354.587 C 113.432 342.596,113.463 342.079,119.475 345.410 C 126.351 349.219,130.752 354.241,133.504 361.418 L 134.961 365.219 140.234 367.543 C 143.135 368.822,146.536 370.275,147.793 370.774 C 150.166 371.716,150.762 372.380,149.408 372.574 C 148.728 372.671,139.883 370.543,134.863 369.074 C 133.558 368.692,132.848 368.689,131.543 369.059 C 119.703 372.415,115.742 372.482,109.486 369.432 C 107.017 368.228,102.722 365.033,102.450 364.197 C 102.240 363.553,105.564 362.910,111.523 362.441 C 114.316 362.222,117.213 361.918,117.960 361.767 L 119.318 361.492 115.083 359.231 L 110.848 356.969 106.971 357.391 C 93.383 358.869,86.768 357.141,79.922 350.324 C 78.009 348.420,76.573 346.734,76.730 346.576 C 76.888 346.418,80.805 346.201,85.435 346.094 L 93.854 345.898 89.924 342.872 L 85.993 339.846 80.321 339.443 C 68.775 338.623,62.611 335.608,57.824 328.439 C 55.266 324.610,55.185 324.632,65.463 326.398 C 73.094 327.710,72.876 327.838,69.306 324.121 C 65.977 320.654,66.319 320.824,59.570 319.295 C 52.135 317.609,47.603 313.402,45.351 306.093 C 44.322 302.754,44.321 302.754,47.334 304.418 C 48.693 305.169,51.090 306.239,52.660 306.798 L 55.516 307.813 52.771 303.849 C 50.535 300.622,49.714 299.747,48.352 299.140 C 44.092 297.239,42.270 293.875,41.570 286.621 C 41.274 283.555,41.327 283.530,44.120 285.410 M172.118 364.604 C 171.605 366.661,168.359 385.235,168.359 386.110 C 168.359 387.235,169.516 388.141,171.441 388.526 C 172.751 388.788,173.425 389.630,172.806 390.231 C 172.527 390.501,160.836 388.676,159.112 388.093 C 157.629 387.592,159.117 386.470,161.063 386.622 C 164.278 386.874,164.267 386.895,166.026 377.145 C 166.879 372.420,167.577 368.335,167.577 368.066 C 167.579 367.381,165.770 367.458,163.749 368.230 C 162.288 368.788,161.991 368.802,161.691 368.328 C 161.073 367.350,161.483 367.079,166.406 365.204 C 171.421 363.293,172.472 363.183,172.118 364.604 M230.616 364.746 C 230.732 365.337,231.203 368.896,231.663 372.656 C 232.123 376.416,232.573 379.569,232.664 379.663 C 233.105 380.121,234.973 379.005,235.086 378.215 C 235.375 376.199,237.109 377.120,237.109 379.289 C 237.109 381.390,237.014 381.470,234.180 381.729 C 232.269 381.904,232.982 387.554,234.979 388.055 C 236.444 388.423,236.146 389.321,234.473 389.578 C 228.506 390.492,226.225 390.107,228.956 388.645 C 229.713 388.240,229.769 387.959,229.593 385.493 C 229.347 382.053,229.762 382.245,224.133 382.971 C 221.476 383.313,219.178 383.594,219.026 383.594 C 217.971 383.594,226.386 364.914,227.866 363.973 C 228.993 363.256,230.403 363.652,230.616 364.746 M191.833 366.534 C 197.475 369.513,197.269 381.989,191.478 388.022 C 188.281 391.353,181.993 392.966,181.712 390.527 C 181.595 389.510,181.673 389.453,183.193 389.453 C 186.451 389.453,189.155 387.239,190.595 383.390 C 191.823 380.108,191.770 380.009,189.268 380.889 C 181.943 383.463,176.416 377.623,179.451 370.513 C 181.360 366.040,187.289 364.135,191.833 366.534 M210.742 366.498 C 217.187 369.733,217.866 387.189,211.706 391.266 C 207.670 393.937,203.093 392.610,200.781 388.098 L 199.414 385.430 199.414 379.141 C 199.414 368.366,204.083 363.156,210.742 366.498 M184.388 368.677 C 180.836 372.229,182.542 379.297,186.951 379.297 C 191.461 379.297,193.229 376.228,191.763 370.946 C 190.803 367.490,186.805 366.260,184.388 368.677 M205.859 368.066 C 202.244 369.898,202.156 387.014,205.746 389.839 C 209.943 393.140,212.718 387.210,211.752 377.004 C 211.035 369.428,209.066 366.441,205.859 368.066 M225.975 372.356 C 225.159 374.132,223.924 376.822,223.232 378.333 L 221.972 381.080 225.215 380.677 C 226.999 380.455,228.569 380.161,228.704 380.024 C 228.941 379.783,227.893 369.560,227.602 369.269 C 227.524 369.190,226.791 370.579,225.975 372.356 \" stroke=\"none\" fill=\"#fbfafa\" fill-rule=\"evenodd\"></path><path id=\"path1\" d=\"M191.080 84.412 C 186.066 100.110,182.023 113.010,182.095 113.079 C 182.167 113.148,183.457 112.973,184.961 112.690 C 188.305 112.061,195.488 111.328,198.310 111.328 L 200.391 111.328 200.391 83.594 C 200.391 68.340,200.347 55.862,200.293 55.865 C 200.239 55.868,196.093 68.715,191.080 84.412 M191.211 114.526 C 189.277 114.721,186.201 115.180,184.375 115.546 L 181.055 116.211 179.995 119.240 C 179.412 120.906,178.340 124.170,177.612 126.493 L 176.289 130.717 179.876 129.651 C 184.346 128.322,192.276 126.953,195.508 126.953 C 196.851 126.953,198.499 126.843,199.170 126.709 L 200.391 126.465 200.391 120.264 L 200.391 114.063 197.559 114.116 C 196.001 114.146,193.145 114.330,191.211 114.526 M194.336 129.713 C 189.576 130.084,183.528 131.289,178.758 132.817 L 175.195 133.959 172.696 141.882 C 171.321 146.239,170.113 150.030,170.012 150.306 C 169.911 150.582,171.651 149.850,173.879 148.679 C 180.990 144.941,188.658 142.784,196.547 142.304 L 200.391 142.069 200.391 135.683 L 200.391 129.297 199.316 129.352 C 198.726 129.383,196.484 129.545,194.336 129.713 M191.992 145.498 C 184.171 146.745,174.578 150.513,170.067 154.110 L 168.982 154.975 172.445 159.812 C 174.350 162.472,176.035 164.795,176.190 164.975 C 176.346 165.154,177.161 164.866,178.003 164.335 C 184.184 160.433,192.562 157.813,198.856 157.813 L 200.391 157.813 200.391 151.367 L 200.391 144.922 197.754 144.961 C 196.304 144.982,193.711 145.223,191.992 145.498 M65.706 154.508 C 65.814 154.616,76.607 162.509,89.690 172.048 L 113.477 189.391 114.300 184.442 C 114.753 181.719,115.607 177.680,116.198 175.466 C 116.789 173.251,117.209 171.380,117.132 171.308 C 117.055 171.236,106.709 167.810,94.141 163.695 C 81.572 159.579,69.989 155.784,68.399 155.262 C 66.810 154.739,65.598 154.400,65.706 154.508 M239.386 158.496 C 245.194 164.335,250.020 171.748,252.546 178.711 C 252.935 179.785,253.385 180.816,253.546 181.001 C 253.772 181.262,264.056 178.181,265.311 177.477 C 266.471 176.825,259.568 163.124,254.983 156.977 L 252.984 154.297 244.096 154.297 L 235.208 154.297 239.386 158.496 M256.641 154.501 C 256.641 154.622,257.340 155.648,258.196 156.780 C 260.832 160.272,264.215 166.497,266.222 171.546 C 267.276 174.198,268.156 176.409,268.178 176.459 C 268.474 177.139,280.068 172.452,279.854 171.739 C 279.019 168.950,276.236 162.480,274.284 158.789 L 272.012 154.492 264.326 154.386 C 260.099 154.328,256.641 154.380,256.641 154.501 M277.730 159.561 C 279.169 162.457,280.855 166.324,281.476 168.155 C 282.231 170.378,282.803 171.483,283.198 171.479 C 283.523 171.476,295.303 167.624,309.375 162.919 L 334.961 154.363 305.037 154.330 L 275.114 154.297 277.730 159.561 M227.832 160.515 L 224.236 165.561 228.254 169.597 C 232.679 174.043,235.332 177.931,237.377 182.970 C 238.129 184.824,238.878 186.115,239.186 186.090 C 240.376 185.992,250.781 182.330,250.781 182.009 C 250.781 180.358,247.166 172.945,244.192 168.499 C 240.947 163.648,233.111 155.469,231.709 155.469 C 231.554 155.469,229.809 157.739,227.832 160.515 M193.324 161.154 C 188.312 162.061,181.891 164.677,179.221 166.898 L 178.169 167.773 180.708 171.289 C 184.347 176.329,183.780 176.070,187.177 174.238 C 190.528 172.430,195.258 171.094,198.305 171.094 L 200.391 171.094 200.391 165.820 L 200.391 160.547 198.340 160.582 C 197.212 160.601,194.955 160.859,193.324 161.154 M219.507 172.173 L 216.556 176.295 219.129 178.870 C 221.810 181.552,224.061 184.887,225.220 187.891 C 226.204 190.438,226.039 190.413,231.219 188.813 C 236.747 187.105,236.540 187.601,233.994 182.159 C 231.686 177.226,227.057 171.348,223.436 168.753 L 222.458 168.052 219.507 172.173 M119.171 174.902 C 117.609 180.156,115.774 190.907,116.346 191.458 C 116.486 191.593,119.256 193.637,122.501 196.000 L 128.399 200.297 128.639 195.363 C 128.898 190.022,129.987 183.020,131.216 178.788 C 131.786 176.824,131.866 176.085,131.521 175.957 C 129.819 175.321,120.485 172.266,120.248 172.266 C 120.087 172.266,119.602 173.452,119.171 174.902 M193.750 174.456 C 191.157 175.153,188.034 176.560,186.765 177.605 L 185.835 178.372 192.917 188.189 C 196.813 193.588,200.000 198.091,200.000 198.196 C 200.000 198.300,198.198 197.777,195.996 197.033 C 193.794 196.289,188.523 194.562,184.284 193.197 L 176.575 190.713 176.181 192.134 C 175.191 195.701,175.556 204.983,176.731 206.158 C 176.790 206.217,181.978 204.579,188.261 202.519 C 194.544 200.459,199.749 198.838,199.827 198.916 C 199.905 198.994,196.900 203.314,193.148 208.515 C 189.397 213.717,186.328 218.146,186.328 218.356 C 186.328 219.565,195.217 222.656,198.695 222.656 L 200.391 222.656 200.391 198.242 L 200.391 173.828 198.145 173.854 C 196.909 173.868,194.932 174.139,193.750 174.456 M133.472 181.135 C 131.930 187.435,131.527 190.626,131.484 196.853 L 131.445 202.495 138.477 207.642 C 142.344 210.473,145.567 212.738,145.640 212.675 C 145.713 212.612,145.471 211.185,145.101 209.503 C 143.624 202.772,143.913 191.513,145.752 184.222 C 146.689 180.506,147.073 180.905,140.625 178.887 C 137.725 177.979,135.161 177.165,134.927 177.078 C 134.674 176.983,134.088 178.614,133.472 181.135 M207.678 188.710 C 203.845 194.091,200.780 198.566,200.868 198.654 C 201.229 199.015,223.438 191.318,223.438 190.832 C 223.438 188.617,216.567 178.877,215.032 178.916 C 214.821 178.921,211.512 183.329,207.678 188.710 M148.666 183.732 C 146.179 192.287,146.622 211.975,149.373 215.118 C 149.445 215.201,161.431 211.356,161.586 211.200 C 161.635 211.151,161.313 209.798,160.871 208.192 C 159.608 203.607,159.449 195.128,160.527 189.893 C 160.987 187.665,161.311 185.800,161.248 185.749 C 161.184 185.698,158.460 184.768,155.193 183.684 L 149.254 181.711 148.666 183.732 M163.690 188.184 C 161.868 194.698,162.522 210.156,164.619 210.156 C 164.982 210.156,171.422 208.095,173.701 207.249 C 174.047 207.120,174.025 206.564,173.612 205.004 C 172.729 201.663,172.520 197.732,173.056 194.530 C 173.915 189.404,174.243 189.934,169.154 188.224 C 163.733 186.402,164.187 186.406,163.690 188.184 M201.172 199.394 C 201.172 199.576,212.223 215.160,214.308 217.918 C 214.940 218.755,220.565 212.130,222.171 208.657 C 223.395 206.012,224.151 206.467,212.305 202.719 C 206.719 200.952,201.929 199.423,201.660 199.321 C 201.392 199.219,201.172 199.252,201.172 199.394 M224.300 210.254 C 222.555 213.751,220.277 216.718,217.693 218.860 L 216.051 220.221 218.994 224.369 C 220.613 226.649,222.085 228.516,222.265 228.516 C 224.733 228.516,236.236 212.810,235.464 210.494 C 235.374 210.224,226.892 207.143,225.943 207.035 C 225.924 207.033,225.185 208.481,224.300 210.254 M236.907 214.350 C 234.194 220.374,229.607 226.430,225.438 229.492 C 223.510 230.908,223.373 230.492,227.744 236.515 L 231.307 241.426 232.939 240.161 C 240.313 234.442,250.391 220.074,250.391 215.278 C 250.391 215.052,247.798 214.047,244.629 213.046 C 241.460 212.045,238.768 211.170,238.646 211.103 C 238.524 211.035,237.741 212.496,236.907 214.350 M250.819 221.672 C 247.533 228.861,242.282 235.783,236.318 240.787 L 232.893 243.660 236.604 248.797 L 240.314 253.935 242.130 252.471 C 248.099 247.657,252.492 243.038,256.306 237.564 L 258.119 234.961 255.329 226.436 L 252.539 217.911 250.819 221.672 M183.906 221.397 C 180.718 225.152,178.416 229.039,179.088 229.531 C 182.590 232.091,190.146 234.876,195.369 235.531 C 200.938 236.229,200.391 236.753,200.391 230.721 L 200.391 225.505 197.540 225.264 C 193.957 224.961,189.955 223.755,186.868 222.046 C 184.631 220.807,184.442 220.766,183.906 221.397 M172.954 236.510 L 169.179 241.751 171.607 243.284 C 178.987 247.945,187.600 250.725,196.777 251.406 L 200.391 251.675 200.391 245.219 L 200.391 238.764 197.363 238.488 C 190.078 237.825,183.225 235.511,177.525 231.789 C 176.778 231.301,176.497 231.590,172.954 236.510 M258.425 239.284 C 255.926 243.143,248.422 251.057,244.087 254.407 L 241.885 256.109 245.586 261.254 L 249.287 266.400 251.694 264.564 C 255.066 261.992,263.673 253.513,263.668 252.767 C 263.666 252.427,262.653 248.996,261.416 245.144 L 259.168 238.139 258.425 239.284 M163.793 249.207 L 160.204 254.252 163.367 256.281 C 169.297 260.085,181.549 265.179,183.747 264.755 C 184.200 264.667,187.667 262.322,191.451 259.544 L 198.332 254.492 196.529 254.221 C 195.538 254.071,192.909 253.678,190.688 253.346 C 184.036 252.353,174.821 248.817,169.696 245.292 C 167.467 243.758,167.850 243.504,163.793 249.207 M261.514 259.407 C 259.801 261.144,256.711 263.931,254.648 265.600 L 250.897 268.636 267.123 291.146 C 276.047 303.527,283.398 313.607,283.458 313.547 C 283.630 313.376,265.063 256.254,264.835 256.252 C 264.722 256.251,263.228 257.671,261.514 259.407 M156.250 259.670 C 155.068 261.325,153.444 263.591,152.639 264.705 L 151.177 266.730 154.006 268.603 C 157.004 270.587,164.317 274.498,167.078 275.593 L 168.726 276.247 174.782 271.815 C 178.112 269.377,180.837 267.295,180.837 267.188 C 180.838 267.080,179.002 266.402,176.757 265.681 C 172.270 264.240,165.240 260.857,161.398 258.290 C 158.328 256.239,158.786 256.116,156.250 259.670 M135.156 288.944 C 118.180 312.508,116.853 314.389,117.594 313.821 C 117.907 313.580,128.887 305.514,141.992 295.895 C 155.098 286.276,165.866 278.370,165.922 278.326 C 165.978 278.283,163.869 277.170,161.235 275.853 C 158.600 274.537,154.967 272.488,153.161 271.300 C 151.354 270.112,149.772 269.143,149.645 269.147 C 149.518 269.150,142.998 278.059,135.156 288.944 \" stroke=\"none\" fill=\"#fada06\" fill-rule=\"evenodd\"></path><path id=\"path2\" d=\"M200.298 83.340 L 200.401 111.211 205.121 111.478 C 207.718 111.625,211.874 112.092,214.357 112.517 C 216.841 112.942,218.924 113.237,218.987 113.174 C 219.172 112.989,200.661 55.469,200.417 55.469 C 200.295 55.469,200.242 68.011,200.298 83.340 M200.391 120.313 C 200.391 126.004,200.452 126.563,201.074 126.563 C 205.975 126.565,215.991 128.270,221.488 130.038 L 224.881 131.129 222.791 124.647 C 221.641 121.081,220.598 117.785,220.473 117.321 C 220.144 116.101,208.387 114.087,201.465 114.066 L 200.391 114.063 200.391 120.313 M200.391 135.879 L 200.391 142.188 202.696 142.188 C 210.390 142.188,222.239 145.884,229.756 150.629 C 230.578 151.148,231.249 151.438,231.249 151.274 C 231.247 150.886,226.203 135.133,225.949 134.720 C 225.112 133.366,211.135 130.112,204.785 129.793 L 200.391 129.571 200.391 135.879 M200.391 151.256 L 200.391 157.697 203.613 157.948 C 209.404 158.400,216.349 160.701,221.169 163.765 C 222.309 164.490,223.451 165.209,223.706 165.362 C 224.006 165.543,225.481 163.809,227.873 160.463 L 231.576 155.285 229.753 153.977 C 223.370 149.398,212.957 145.831,203.809 145.091 L 200.391 144.814 200.391 151.256 M65.234 154.151 C 65.234 154.355,65.542 154.547,65.918 154.579 C 66.294 154.612,77.882 158.340,91.670 162.866 C 105.457 167.391,116.883 171.092,117.060 171.090 C 117.238 171.088,117.985 169.462,118.721 167.477 C 119.457 165.491,121.145 161.714,122.473 159.082 L 124.888 154.297 105.901 154.296 C 95.458 154.296,82.036 154.180,76.074 154.038 C 69.323 153.878,65.234 153.920,65.234 154.151 M126.183 158.025 C 123.426 163.002,119.765 172.016,120.414 172.231 C 120.680 172.319,123.381 173.222,126.415 174.237 L 131.931 176.083 133.193 172.709 C 134.787 168.448,138.046 162.208,140.713 158.311 C 141.846 156.655,142.914 155.075,143.086 154.799 C 143.336 154.397,141.894 154.297,135.823 154.297 L 128.248 154.297 126.183 158.025 M144.922 157.216 C 140.675 162.979,135.420 173.083,135.065 176.171 C 134.975 176.951,141.703 179.653,146.716 180.851 C 146.735 180.856,146.972 180.112,147.242 179.199 C 149.072 173.005,154.375 164.727,160.380 158.691 L 164.752 154.297 155.911 154.299 L 147.070 154.300 144.922 157.216 M308.984 163.011 C 294.697 167.767,282.981 171.663,282.949 171.669 C 282.917 171.675,283.482 174.025,284.204 176.891 C 284.926 179.758,285.744 183.925,286.021 186.153 L 286.525 190.203 309.395 173.519 C 337.389 153.098,335.778 154.290,335.331 154.331 C 335.127 154.349,323.271 158.256,308.984 163.011 M165.966 157.242 C 158.991 163.029,152.076 172.864,149.975 179.983 C 149.376 182.014,148.703 181.556,155.714 183.884 L 161.622 185.846 162.106 184.232 C 163.532 179.465,167.537 173.518,172.544 168.731 C 176.223 165.214,176.236 165.195,175.602 164.228 C 175.252 163.694,173.599 161.357,171.929 159.035 L 168.892 154.814 165.966 157.242 M200.391 165.562 L 200.391 170.668 201.855 170.896 C 208.261 171.894,210.410 172.588,214.191 174.884 C 215.444 175.644,216.608 176.113,216.778 175.926 C 217.571 175.055,222.266 168.331,222.266 168.066 C 222.266 166.116,210.021 161.444,203.027 160.726 L 200.391 160.456 200.391 165.562 M174.496 170.693 C 170.065 174.887,166.854 179.569,164.923 184.652 L 164.187 186.590 168.714 188.076 C 171.205 188.893,173.420 189.628,173.637 189.708 C 173.854 189.789,174.341 188.982,174.720 187.915 C 175.731 185.070,178.990 180.422,181.682 177.985 L 184.035 175.856 181.054 171.717 C 177.510 166.797,178.456 166.945,174.496 170.693 M274.148 174.544 C 267.630 176.768,268.156 176.100,269.295 180.707 C 270.672 186.277,271.160 189.698,271.436 195.727 L 271.680 201.056 277.734 196.617 L 283.789 192.177 283.670 190.327 C 283.352 185.377,280.678 173.016,279.883 172.818 C 279.668 172.765,277.087 173.542,274.148 174.544 M200.391 198.242 L 200.391 222.656 201.465 222.649 C 204.884 222.628,213.385 219.561,213.925 218.155 C 214.045 217.843,211.350 213.753,207.616 208.581 C 204.032 203.615,201.167 199.485,201.249 199.402 C 201.332 199.319,206.282 200.808,212.249 202.710 L 223.098 206.168 223.434 205.282 C 224.641 202.108,224.693 192.896,223.511 191.714 C 223.345 191.548,218.219 193.078,212.119 195.114 C 206.020 197.150,200.956 198.743,200.867 198.653 C 200.778 198.564,203.801 194.162,207.586 188.872 C 211.371 183.582,214.508 179.062,214.558 178.828 C 214.836 177.518,205.405 173.828,201.778 173.828 L 200.391 173.828 200.391 198.242 M259.466 179.449 C 254.718 181.027,253.551 181.552,253.745 182.024 C 256.352 188.366,256.643 206.134,254.243 212.447 C 253.604 214.128,254.151 213.831,261.255 208.647 C 267.227 204.289,268.294 203.356,268.504 202.306 C 269.336 198.142,267.920 185.321,265.937 179.065 L 265.430 177.466 259.466 179.449 M183.304 180.370 C 180.031 183.471,176.067 189.995,176.988 190.764 C 177.302 191.026,200.000 198.332,200.000 198.170 C 200.000 198.055,186.655 179.370,185.752 178.222 C 185.710 178.167,184.608 179.134,183.304 180.370 M244.575 184.395 C 237.895 186.666,238.620 186.079,239.294 188.672 C 240.729 194.199,240.651 202.769,239.115 208.310 C 238.712 209.764,238.491 211.015,238.624 211.090 C 239.215 211.421,250.485 214.879,250.600 214.764 C 250.898 214.466,252.363 208.182,252.721 205.664 C 253.767 198.304,252.348 183.024,250.577 182.581 C 250.367 182.528,247.666 183.345,244.575 184.395 M230.664 188.936 C 228.301 189.693,226.342 190.339,226.311 190.371 C 226.280 190.403,226.517 191.660,226.838 193.164 C 227.515 196.345,227.312 202.251,226.424 205.168 L 225.862 207.016 230.595 208.556 C 233.197 209.404,235.445 210.024,235.589 209.935 C 237.859 208.532,237.797 187.905,235.521 187.628 C 235.213 187.591,233.027 188.179,230.664 188.936 M188.103 202.528 C 182.097 204.519,177.135 206.303,177.076 206.492 C 176.585 208.081,185.244 219.360,186.126 218.279 C 186.432 217.906,199.541 199.646,199.769 199.277 C 200.220 198.547,199.536 198.738,188.103 202.528 M169.239 208.747 C 163.748 210.561,163.990 210.018,166.455 215.001 C 168.944 220.029,174.681 226.880,177.806 228.554 C 178.380 228.861,184.850 220.891,184.304 220.548 C 181.204 218.603,177.533 214.246,175.445 210.034 L 174.023 207.167 169.239 208.747 M155.469 213.231 C 148.792 215.424,149.032 214.897,151.934 220.971 C 155.375 228.174,160.982 235.301,166.734 239.782 C 169.417 241.871,168.922 242.120,172.813 236.727 C 176.981 230.952,176.874 231.294,174.955 229.883 C 170.548 226.641,165.449 220.054,163.015 214.457 C 161.462 210.885,162.232 211.010,155.469 213.231 M145.322 226.172 C 143.975 230.361,142.730 234.168,142.554 234.631 C 141.772 236.694,157.478 253.906,160.143 253.906 C 160.443 253.906,167.089 244.868,167.293 244.182 C 167.342 244.016,166.025 242.786,164.366 241.448 C 157.775 236.134,150.080 225.671,147.960 219.141 C 147.855 218.818,146.668 221.982,145.322 226.172 M215.039 220.958 C 212.490 222.982,205.475 225.373,202.051 225.385 L 200.391 225.391 200.391 230.619 L 200.391 235.848 203.027 235.647 C 208.645 235.221,217.437 232.147,221.059 229.342 L 222.001 228.613 219.106 224.477 C 215.905 219.906,216.125 220.096,215.039 220.958 M222.266 231.914 C 217.976 234.998,209.637 237.905,203.418 238.482 L 200.391 238.764 200.391 245.187 L 200.391 251.610 203.223 251.361 C 212.892 250.513,221.472 247.703,228.845 242.970 L 231.323 241.380 230.374 240.124 C 229.852 239.433,228.231 237.197,226.772 235.156 C 225.313 233.115,224.010 231.329,223.876 231.188 C 223.742 231.046,223.018 231.373,222.266 231.914 M138.937 245.837 C 137.717 249.564,136.719 252.875,136.719 253.196 C 136.719 254.470,150.212 266.669,151.232 266.318 C 151.402 266.259,153.116 264.038,155.040 261.383 L 158.538 256.555 155.538 254.181 C 151.633 251.089,146.846 246.243,143.751 242.250 C 142.392 240.497,141.252 239.063,141.217 239.063 C 141.183 239.063,140.157 242.111,138.937 245.837 M230.664 245.149 C 224.129 249.686,215.078 252.814,204.501 254.189 L 202.167 254.492 209.189 259.668 C 217.134 265.524,215.983 265.208,222.070 263.200 C 226.439 261.760,233.206 258.493,237.228 255.884 L 240.277 253.906 238.791 251.835 C 237.973 250.697,236.338 248.414,235.156 246.764 C 233.975 245.113,232.920 243.770,232.813 243.778 C 232.705 243.786,231.738 244.403,230.664 245.149 M239.063 258.048 C 235.631 260.413,227.139 264.550,222.952 265.895 C 221.074 266.498,219.546 267.080,219.557 267.188 C 219.568 267.295,222.307 269.372,225.644 271.803 L 231.709 276.223 236.851 273.676 C 239.679 272.276,243.630 270.066,245.631 268.766 L 249.269 266.402 248.373 265.135 C 241.293 255.126,242.248 255.853,239.063 258.048 M135.427 256.915 C 134.905 257.774,116.784 314.180,116.971 314.366 C 117.090 314.486,117.188 314.378,117.188 314.128 C 117.188 313.877,117.407 313.716,117.676 313.770 C 117.944 313.823,118.116 313.636,118.058 313.353 C 117.999 313.071,124.943 303.152,133.488 291.311 C 142.032 279.471,149.144 269.587,149.291 269.346 C 149.451 269.086,148.500 268.125,146.948 266.977 C 145.511 265.915,142.374 263.146,139.976 260.824 C 137.578 258.502,135.531 256.743,135.427 256.915 M247.070 271.148 C 245.137 272.429,241.487 274.518,238.959 275.789 L 234.364 278.102 237.983 280.806 C 252.802 291.879,283.758 314.419,283.922 314.256 C 284.032 314.145,283.846 313.837,283.508 313.570 C 283.170 313.304,275.745 303.154,267.009 291.016 C 258.272 278.877,251.003 268.917,250.855 268.883 C 250.707 268.848,249.004 269.868,247.070 271.148 \" stroke=\"none\" fill=\"#daa126\" fill-rule=\"evenodd\"></path><path id=\"path3\" d=\"M194.531 12.748 C 194.531 12.885,194.950 13.385,195.462 13.859 C 196.374 14.705,196.399 14.906,196.680 23.901 C 196.983 33.607,196.895 34.583,195.683 34.967 C 193.949 35.518,195.140 35.938,198.438 35.938 C 202.253 35.938,202.404 35.859,201.041 34.596 C 200.187 33.805,200.112 33.366,199.869 27.751 C 199.340 15.536,199.548 13.281,201.200 13.281 C 201.399 13.281,201.563 13.105,201.563 12.891 C 201.563 12.659,200.130 12.500,198.047 12.500 C 196.113 12.500,194.531 12.612,194.531 12.748 M204.944 13.067 C 204.320 14.693,204.654 18.359,205.426 18.359 C 205.883 18.359,206.256 17.997,206.403 17.413 C 207.057 14.807,210.780 12.993,212.318 14.531 C 212.558 14.771,211.057 33.250,210.730 34.085 C 210.582 34.463,210.041 34.878,209.527 35.007 C 207.259 35.576,208.755 36.116,213.574 36.467 C 216.205 36.658,216.957 36.314,215.428 35.617 C 214.021 34.976,213.981 34.260,214.794 24.099 C 215.651 13.387,215.312 14.459,217.728 14.832 C 219.756 15.145,220.191 15.570,220.932 17.966 C 221.682 20.390,223.046 20.096,223.052 17.508 C 223.055 16.365,223.156 15.063,223.276 14.615 C 223.488 13.828,223.286 13.785,217.314 13.336 C 213.914 13.081,209.798 12.765,208.167 12.635 C 205.593 12.429,205.167 12.486,204.944 13.067 M183.080 13.288 C 176.293 15.325,177.133 22.144,184.598 25.609 C 188.836 27.576,189.844 28.653,189.844 31.216 C 189.844 36.062,182.974 37.151,181.236 32.580 C 180.448 30.508,179.158 31.377,179.442 33.789 C 179.581 34.971,179.593 35.938,179.470 35.937 C 178.744 35.937,177.526 34.819,175.233 32.048 C 173.810 30.328,172.100 28.638,171.432 28.293 L 170.218 27.665 171.681 26.460 C 177.102 21.991,174.010 15.211,166.797 15.748 C 160.449 16.220,155.610 17.527,157.993 18.126 C 159.197 18.428,159.371 19.030,161.136 28.989 C 162.745 38.069,162.742 38.025,161.650 39.043 C 160.405 40.203,160.805 40.277,164.571 39.586 C 167.464 39.054,169.166 38.281,167.443 38.281 C 166.370 38.281,165.657 36.810,165.007 33.258 C 164.261 29.180,164.359 28.923,166.667 28.912 C 168.643 28.903,168.966 29.162,172.316 33.439 C 175.618 37.657,175.750 37.737,178.320 37.085 C 179.180 36.868,181.420 36.703,183.299 36.720 C 189.372 36.773,192.228 35.215,192.778 31.549 C 193.342 27.789,191.644 25.591,186.267 23.122 C 182.483 21.384,181.534 20.346,181.534 17.948 C 181.534 14.071,186.839 12.789,189.030 16.136 C 190.423 18.263,191.406 18.084,191.406 15.703 C 191.406 14.672,191.195 13.617,190.938 13.359 C 190.398 12.820,184.808 12.769,183.080 13.288 M225.000 14.204 C 225.000 14.317,225.358 15.015,225.795 15.756 C 226.232 16.497,227.465 19.715,228.534 22.907 L 230.479 28.711 229.862 32.031 C 229.170 35.753,228.487 37.109,227.302 37.109 C 225.198 37.109,227.195 38.122,230.399 38.680 C 233.996 39.306,234.945 39.069,233.203 37.981 C 231.607 36.984,232.670 30.306,234.846 27.659 C 238.839 22.802,241.785 19.627,243.082 18.782 C 244.855 17.627,244.851 17.623,241.378 16.961 C 238.586 16.429,237.193 16.571,238.426 17.261 C 239.961 18.120,239.145 19.913,235.028 24.728 C 232.742 27.402,232.854 27.474,231.274 22.328 C 229.890 17.823,229.870 16.779,231.152 16.216 C 232.514 15.618,232.227 15.373,229.590 14.880 C 228.247 14.629,226.665 14.328,226.074 14.212 C 225.483 14.096,225.000 14.092,225.000 14.204 M168.926 17.797 C 170.799 19.024,171.630 22.830,170.501 25.013 C 169.340 27.258,164.297 28.703,163.894 26.906 C 163.677 25.939,162.508 19.365,162.379 18.385 C 162.224 17.216,167.338 16.756,168.926 17.797 M144.435 20.843 C 137.369 22.890,136.765 23.168,138.465 23.595 C 139.779 23.925,139.852 24.102,142.549 33.493 C 145.132 42.486,145.238 43.144,144.273 44.210 C 143.184 45.413,143.704 45.335,151.332 43.148 C 160.068 40.644,159.059 41.383,158.323 38.031 C 157.561 34.559,156.502 34.339,156.119 37.574 C 155.991 38.653,155.683 39.781,155.435 40.080 C 154.870 40.761,148.756 42.670,148.393 42.279 C 148.009 41.866,145.605 33.171,145.816 32.960 C 145.914 32.862,147.008 32.494,148.249 32.141 L 150.505 31.499 151.437 32.583 C 152.625 33.965,153.722 33.701,153.337 32.125 C 152.300 27.882,151.922 27.034,151.156 27.235 C 150.629 27.373,150.391 27.771,150.391 28.513 C 150.391 29.939,145.803 32.410,145.173 31.324 C 144.873 30.805,142.969 23.870,142.969 23.294 C 142.969 22.697,146.108 21.581,148.849 21.203 C 150.066 21.035,150.390 21.185,151.469 22.414 C 153.611 24.854,154.507 23.363,153.109 19.685 C 152.648 18.472,152.597 18.479,144.435 20.843 M256.836 24.179 C 250.471 27.846,247.959 39.492,252.602 43.803 C 259.165 49.896,267.518 45.485,269.758 34.742 C 271.516 26.309,263.919 20.099,256.836 24.179 M130.469 25.667 C 128.857 26.429,127.715 27.102,127.930 27.164 C 128.145 27.225,128.774 27.374,129.328 27.496 C 129.918 27.624,130.537 28.159,130.822 28.785 C 131.241 29.703,132.951 45.695,132.662 45.984 C 132.535 46.111,123.121 35.016,122.171 33.619 C 121.334 32.389,121.292 31.115,122.066 30.472 C 123.514 29.270,121.959 29.499,118.765 30.958 C 115.116 32.625,114.844 32.949,116.775 33.335 C 117.685 33.517,119.531 35.390,125.200 41.882 C 135.438 53.607,135.048 53.773,133.967 38.142 C 133.265 27.985,133.247 26.751,133.781 25.679 C 134.736 23.765,134.497 23.764,130.469 25.667 M264.484 25.276 C 269.893 28.471,264.885 44.922,258.504 44.922 C 253.722 44.922,252.118 40.222,254.437 33.008 C 256.703 25.959,260.584 22.972,264.484 25.276 M277.344 29.506 C 277.344 29.621,277.618 30.134,277.954 30.646 C 278.958 32.178,270.340 48.964,268.457 49.146 C 266.507 49.334,266.909 49.851,270.353 51.583 C 273.553 53.192,274.490 53.331,273.305 52.022 C 272.374 50.994,272.453 50.616,274.481 46.387 C 276.538 42.096,276.313 42.241,278.897 43.550 C 280.693 44.460,280.822 44.626,280.934 46.183 C 281.129 48.874,282.017 48.519,283.724 45.070 C 284.883 42.727,285.095 41.999,284.694 41.744 C 283.955 41.276,283.795 41.317,283.008 42.188 C 282.044 43.252,279.188 42.749,277.417 41.204 C 277.314 41.114,281.132 33.239,281.451 32.885 C 281.623 32.693,286.442 35.172,287.207 35.847 C 287.677 36.261,287.891 37.027,287.891 38.300 C 287.891 39.892,288.694 41.198,289.267 40.537 C 289.580 40.175,291.436 36.231,291.335 36.144 C 290.342 35.290,277.344 29.123,277.344 29.506 M109.766 35.585 C 106.863 37.330,106.468 37.891,108.144 37.891 C 109.585 37.891,109.573 37.875,114.978 47.298 C 119.375 54.966,119.409 55.049,118.667 56.238 C 117.827 57.583,118.565 57.465,121.610 55.766 C 124.856 53.955,125.217 53.516,123.464 53.516 C 122.068 53.516,122.087 53.542,116.669 44.109 C 112.703 37.204,112.003 35.509,112.891 34.961 C 113.443 34.620,113.376 33.977,112.793 34.022 C 112.524 34.042,111.162 34.746,109.766 35.585 M101.897 40.192 C 99.471 41.743,99.096 42.373,100.583 42.401 C 101.120 42.411,101.713 42.587,101.901 42.792 C 102.590 43.543,110.553 55.925,110.262 55.792 C 110.096 55.716,105.901 53.604,100.939 51.098 L 91.916 46.541 89.673 48.030 C 87.913 49.199,86.975 50.854,88.664 49.810 C 89.534 49.272,90.724 50.707,95.198 57.694 C 101.199 67.066,100.980 66.630,100.243 67.755 C 99.273 69.236,99.915 69.166,102.570 67.501 C 105.410 65.720,105.614 65.336,103.809 65.161 C 102.728 65.057,92.502 51.105,93.088 50.534 C 93.130 50.493,97.749 52.760,103.352 55.571 C 117.393 62.616,117.278 62.707,109.566 50.666 C 104.153 42.214,103.364 40.543,104.331 39.575 C 105.369 38.537,103.905 38.908,101.897 40.192 M299.332 44.460 C 297.828 46.594,297.774 46.761,298.456 47.187 C 298.925 47.480,299.268 47.503,299.422 47.252 C 300.535 45.451,303.387 45.144,305.375 46.611 L 306.595 47.510 301.903 54.126 C 295.134 63.671,295.133 63.672,293.536 63.672 C 291.639 63.672,291.831 63.983,295.177 66.331 C 298.222 68.468,298.930 68.643,298.075 67.046 C 297.415 65.812,297.811 65.104,304.074 56.336 L 309.124 49.265 310.242 50.061 C 312.236 51.481,312.657 52.481,312.134 54.556 C 311.323 57.778,312.366 58.008,314.432 55.063 C 315.357 53.744,315.957 52.529,315.770 52.352 C 314.974 51.604,301.510 42.188,301.236 42.188 C 301.071 42.188,300.214 43.210,299.332 44.460 M184.527 43.176 C 57.096 55.818,-2.811 208.311,81.945 304.297 C 162.082 395.052,311.177 364.678,349.424 249.805 C 385.392 141.776,297.743 31.944,184.527 43.176 M81.496 54.676 C 79.013 56.849,78.827 57.280,80.446 57.109 C 82.377 56.906,92.964 69.490,92.967 71.992 C 92.972 75.469,89.011 77.957,85.972 76.385 C 83.271 74.988,74.060 63.464,74.439 61.955 C 74.799 60.518,74.484 60.653,71.664 63.144 C 69.009 65.489,68.810 65.986,70.634 65.719 C 71.680 65.565,72.197 66.038,77.109 71.641 C 84.717 80.320,86.516 80.984,91.719 77.029 C 97.441 72.679,96.405 69.643,84.677 56.398 C 83.883 55.502,83.712 54.498,84.169 53.418 C 84.663 52.252,83.805 52.656,81.496 54.676 M209.740 83.887 C 220.433 117.276,218.699 113.231,222.778 114.314 C 242.601 119.576,260.243 132.302,272.247 150.000 L 275.029 154.102 305.260 154.297 L 335.492 154.492 311.109 172.266 L 286.726 190.039 286.715 197.656 C 286.683 218.800,280.416 236.870,267.612 252.734 C 266.312 254.346,265.247 255.840,265.247 256.055 C 265.246 256.270,269.462 269.439,274.614 285.320 C 279.766 301.202,283.923 314.254,283.851 314.326 C 283.779 314.398,272.603 306.280,259.015 296.287 L 234.309 278.117 230.686 279.474 C 211.519 286.653,190.648 286.911,171.377 280.207 C 168.609 279.244,166.138 278.539,165.887 278.639 C 165.635 278.740,154.532 286.841,141.212 296.641 C 127.892 306.441,116.955 314.326,116.907 314.163 C 116.859 314.000,121.019 300.959,126.152 285.183 L 135.483 256.499 133.213 253.738 C 119.899 237.550,113.877 220.981,113.329 199.037 L 113.086 189.286 89.177 171.889 C 76.027 162.321,65.261 154.379,65.251 154.240 C 65.242 154.101,78.642 154.084,95.029 154.201 L 124.824 154.415 126.963 151.150 C 139.022 132.744,156.779 119.819,177.787 114.156 L 181.754 113.086 190.971 84.277 C 196.040 68.433,200.289 55.469,200.414 55.469 C 200.538 55.469,204.735 68.257,209.740 83.887 M319.723 56.626 C 320.170 58.657,306.942 72.364,304.910 71.976 C 303.456 71.698,303.649 72.034,306.479 74.706 C 308.771 76.870,309.787 77.281,308.943 75.704 C 308.437 74.758,308.800 74.191,312.371 70.350 C 315.534 66.947,315.233 66.912,319.412 71.164 L 322.223 74.023 318.945 77.494 C 315.957 80.658,315.565 80.945,314.520 80.736 C 312.701 80.372,312.833 80.739,315.415 83.218 C 318.169 85.863,318.524 86.014,318.167 84.390 C 317.716 82.334,330.940 68.664,333.027 69.031 C 334.108 69.221,334.024 69.074,331.671 66.667 C 329.312 64.254,328.024 63.586,328.905 65.232 C 329.464 66.276,329.556 66.107,326.541 69.529 C 323.175 73.349,323.528 73.354,319.630 69.434 L 316.426 66.211 319.308 63.127 C 321.975 60.273,322.280 60.062,323.400 60.285 C 325.083 60.622,324.936 60.260,322.352 57.703 C 319.787 55.164,319.364 54.991,319.723 56.626 M336.842 73.085 C 336.960 73.535,336.957 74.162,336.835 74.478 C 336.414 75.577,322.189 87.572,321.530 87.384 C 321.183 87.285,320.723 87.139,320.508 87.059 C 319.252 86.592,320.430 88.334,324.828 93.446 L 329.775 99.197 332.109 97.401 C 334.980 95.192,334.753 94.019,331.666 95.108 C 329.181 95.985,329.002 95.921,326.517 93.262 C 323.625 90.168,323.569 90.446,327.832 86.756 L 331.445 83.628 332.894 85.271 C 334.364 86.939,334.683 88.148,333.993 89.438 C 332.998 91.296,334.625 91.070,337.060 89.011 C 339.749 86.736,339.780 85.863,337.161 86.215 C 335.799 86.397,335.565 86.279,334.246 84.738 C 332.416 82.599,332.296 82.949,335.974 79.703 C 339.601 76.502,339.180 76.540,341.521 79.193 C 344.203 82.232,344.305 82.523,343.407 84.553 C 342.239 87.193,343.134 87.708,345.507 85.763 C 347.752 83.924,348.036 84.616,342.326 77.994 C 337.503 72.401,336.406 71.419,336.842 73.085 M57.724 77.655 C 52.467 83.037,52.508 88.150,57.849 93.412 C 63.675 99.150,70.149 99.970,73.734 95.425 C 77.696 90.403,77.940 89.335,75.542 87.528 C 73.370 85.890,72.085 86.782,73.645 88.844 C 75.011 90.650,73.765 94.368,71.476 95.316 C 66.431 97.406,55.855 89.582,55.861 83.763 C 55.864 80.519,58.432 78.389,61.390 79.179 C 64.485 80.005,63.792 77.734,60.321 75.677 C 60.089 75.540,58.921 76.430,57.724 77.655 M47.016 91.699 C 46.427 92.505,45.521 93.747,45.003 94.459 C 43.959 95.896,44.053 96.377,45.253 95.735 C 46.475 95.081,46.365 95.023,53.759 100.233 C 62.043 106.069,63.006 106.908,62.722 108.041 C 62.285 109.781,63.089 109.265,65.062 106.540 C 67.285 103.468,67.389 102.969,65.670 103.618 C 64.623 104.013,64.260 103.841,60.301 101.058 C 48.761 92.950,48.628 92.839,48.690 91.484 C 48.766 89.850,48.326 89.906,47.016 91.699 M354.688 96.074 C 354.688 97.463,354.544 97.575,345.291 103.455 C 338.417 107.823,337.638 108.185,336.831 107.378 C 335.377 105.924,335.755 107.641,337.467 110.262 C 339.645 113.599,340.048 113.877,340.043 112.035 C 340.039 110.720,341.829 109.036,345.313 107.078 L 346.805 106.239 347.682 107.710 C 350.541 112.497,354.326 114.087,358.182 112.120 C 362.799 109.765,362.748 106.543,357.976 99.073 C 355.160 94.667,354.688 94.236,354.688 96.074 M40.114 101.956 C 39.010 103.983,38.777 104.688,39.212 104.688 C 39.534 104.688,39.906 104.512,40.039 104.297 C 40.527 103.508,41.691 103.984,48.409 107.715 L 55.267 111.523 44.799 111.719 L 34.332 111.914 33.098 114.142 C 31.786 116.511,31.830 117.256,33.225 116.278 C 34.333 115.502,34.323 115.498,42.969 120.499 C 51.111 125.209,51.563 125.541,51.563 126.818 C 51.563 128.281,52.074 127.903,53.601 125.314 C 55.136 122.711,55.183 121.923,53.746 122.865 C 52.653 123.581,52.410 123.496,47.656 120.748 C 45.615 119.568,42.363 117.760,40.430 116.731 C 38.496 115.701,37.090 114.828,37.305 114.790 C 38.054 114.658,40.496 114.609,50.230 114.532 L 60.031 114.453 60.471 113.486 C 60.967 112.398,61.865 113.019,50.000 106.248 C 42.422 101.923,42.188 101.747,42.188 100.364 C 42.188 98.624,41.742 98.966,40.114 101.956 M358.192 102.051 C 361.895 108.508,353.727 113.532,349.216 107.571 C 347.638 105.486,347.580 105.587,352.058 102.671 C 356.918 99.508,356.743 99.525,358.192 102.051 M365.625 113.787 C 365.625 115.144,365.409 115.274,356.367 119.363 C 348.022 123.137,346.929 123.467,346.097 122.465 C 344.946 121.079,345.098 122.509,346.408 125.393 C 347.966 128.822,348.230 129.065,348.567 127.380 C 348.755 126.438,349.246 126.030,351.448 124.986 C 355.107 123.249,357.513 122.226,357.634 122.353 C 357.880 122.616,361.328 130.509,361.328 130.812 C 361.328 131.207,353.507 134.766,352.638 134.766 C 352.314 134.766,351.824 134.495,351.549 134.163 C 350.359 132.730,350.479 134.457,351.762 137.234 C 353.165 140.270,353.906 140.990,353.906 139.318 C 353.906 137.943,354.601 137.518,363.172 133.646 C 371.028 130.097,372.470 129.658,373.353 130.540 C 374.395 131.583,374.247 130.320,373.002 127.552 C 371.691 124.636,371.094 123.940,371.094 125.330 C 371.094 126.390,370.115 127.111,366.284 128.873 L 362.845 130.454 362.317 129.192 C 362.026 128.498,361.156 126.540,360.382 124.842 C 359.607 123.144,359.063 121.666,359.172 121.557 C 359.595 121.134,366.140 118.359,366.714 118.359 C 367.048 118.359,367.625 118.634,367.997 118.971 C 369.203 120.063,369.119 118.967,367.767 116.002 C 366.377 112.953,365.625 112.175,365.625 113.787 M176.089 117.598 C 157.465 123.233,140.891 135.441,130.141 151.443 C 129.247 152.774,128.516 153.961,128.516 154.080 C 128.516 154.199,131.899 154.296,136.035 154.294 L 143.555 154.291 145.508 151.909 C 151.867 144.154,162.139 136.586,171.875 132.484 C 174.131 131.534,176.009 130.732,176.049 130.703 C 176.189 130.600,180.469 117.090,180.469 116.750 C 180.469 116.281,180.397 116.295,176.089 117.598 M220.321 116.895 C 220.326 116.948,221.344 120.144,222.585 123.997 L 224.840 131.002 228.924 132.818 C 238.622 137.130,248.297 144.353,254.492 151.909 L 256.445 154.291 263.965 154.294 C 268.101 154.296,271.484 154.199,271.484 154.080 C 271.484 152.735,263.639 143.033,258.536 138.069 C 251.319 131.047,245.353 126.876,236.133 122.403 C 230.397 119.621,220.250 116.086,220.321 116.895 M28.175 124.663 C 26.877 127.978,26.848 128.694,28.056 127.602 C 28.450 127.245,29.065 126.953,29.423 126.953 C 30.208 126.953,37.109 129.678,37.109 129.989 C 37.109 130.527,33.839 138.672,33.623 138.672 C 33.111 138.672,27.105 136.252,26.270 135.709 C 25.748 135.371,25.391 134.744,25.391 134.171 C 25.391 132.460,24.835 133.132,23.543 136.403 C 22.117 140.014,22.122 140.109,23.678 139.234 C 25.658 138.119,43.359 145.397,43.359 147.326 C 43.359 148.820,44.060 147.946,45.208 145.020 C 46.446 141.864,46.487 140.929,45.341 141.967 C 44.969 142.303,44.358 142.578,43.983 142.578 C 43.265 142.578,35.156 139.508,35.156 139.236 C 35.156 138.855,38.371 131.023,38.643 130.742 C 38.809 130.571,40.334 130.980,42.031 131.653 C 47.196 133.699,47.677 133.989,47.921 135.211 C 48.257 136.891,48.517 136.616,49.895 133.128 C 51.321 129.516,51.316 129.417,49.759 130.310 C 48.647 130.949,48.521 130.914,40.624 127.820 C 30.102 123.696,30.459 123.876,30.200 122.582 C 29.860 120.881,29.517 121.233,28.175 124.663 M170.077 136.465 C 162.467 140.201,156.953 144.166,151.005 150.181 L 147.126 154.102 156.023 154.207 L 164.919 154.312 167.327 152.594 C 169.335 151.161,169.814 150.592,170.212 149.168 C 170.475 148.229,171.641 144.517,172.805 140.918 C 173.968 137.319,174.788 134.375,174.627 134.375 C 174.466 134.375,172.419 135.315,170.077 136.465 M226.378 135.645 C 226.500 136.128,227.702 139.948,229.049 144.133 L 231.499 151.743 233.287 153.027 L 235.075 154.312 243.974 154.207 L 252.874 154.102 248.995 150.181 C 243.210 144.331,237.788 140.392,230.466 136.718 C 225.974 134.463,226.088 134.493,226.378 135.645 M375.216 135.845 C 374.899 137.287,374.779 137.343,364.854 140.674 C 356.040 143.634,356.031 143.636,355.009 142.711 C 353.788 141.606,353.765 142.422,354.925 145.687 C 356.117 149.041,356.415 149.388,356.798 147.863 C 357.122 146.573,357.495 146.403,366.765 143.305 C 375.451 140.402,375.950 140.303,377.022 141.274 C 378.169 142.312,378.184 141.744,377.094 138.448 C 375.874 134.756,375.552 134.311,375.216 135.845 M20.448 145.995 C 16.799 154.246,19.800 159.908,29.086 162.293 C 36.801 164.274,40.918 161.836,42.395 154.412 C 43.218 150.275,43.143 150.000,41.016 149.365 C 37.759 148.392,37.061 149.229,39.366 151.342 C 42.860 154.544,39.988 159.763,34.730 159.765 C 32.391 159.766,27.536 158.511,25.100 157.277 C 19.260 154.318,18.636 148.191,24.036 146.831 C 26.584 146.189,26.405 145.224,23.593 144.441 L 21.405 143.832 20.448 145.995 M378.516 145.252 C 378.516 146.606,377.122 147.230,368.935 149.543 C 358.286 152.550,359.156 152.396,357.992 151.480 C 357.441 151.047,356.937 150.756,356.871 150.834 C 356.713 151.023,360.686 165.113,360.980 165.407 C 361.276 165.703,367.414 164.260,367.285 163.925 C 367.231 163.786,367.188 163.423,367.188 163.118 C 367.188 162.707,366.651 162.569,365.108 162.583 C 362.022 162.611,361.489 162.168,360.420 158.683 C 359.307 155.056,358.350 155.726,368.864 152.778 C 377.987 150.220,379.430 149.999,380.029 151.071 C 380.892 152.612,380.917 150.975,380.080 147.859 C 379.251 144.775,378.516 143.549,378.516 145.252 M382.981 163.834 C 382.659 165.119,381.863 165.364,372.788 166.968 C 363.461 168.616,362.749 168.651,361.945 167.504 C 360.830 165.912,360.824 167.935,361.930 172.949 C 362.139 173.894,362.891 174.171,362.891 173.303 C 362.891 172.041,364.499 171.530,373.556 169.918 L 382.855 168.263 383.738 169.092 C 385.050 170.325,385.077 170.222,384.425 166.406 C 383.816 162.845,383.411 162.122,382.981 163.834 M15.492 165.476 C 14.910 168.487,13.623 179.769,13.837 179.983 C 13.971 180.117,14.350 179.841,14.680 179.371 C 15.459 178.258,16.178 178.275,26.465 179.652 C 34.488 180.726,35.938 181.128,35.938 182.274 C 35.938 182.570,36.113 182.813,36.328 182.813 C 36.543 182.813,36.719 182.769,36.720 182.715 C 36.721 182.661,37.160 179.189,37.695 175.000 C 38.231 170.811,38.669 167.361,38.670 167.335 C 38.671 167.309,37.925 167.172,37.012 167.032 C 36.099 166.891,34.780 166.673,34.082 166.548 C 32.981 166.350,32.813 166.428,32.813 167.139 C 32.813 167.693,33.224 168.132,34.082 168.496 C 36.589 169.557,36.893 170.271,36.435 174.042 C 35.921 178.287,36.601 178.082,27.586 176.708 L 26.071 176.477 26.293 174.331 C 26.528 172.054,27.378 170.703,28.576 170.703 C 30.120 170.703,29.397 169.224,27.734 168.980 C 26.875 168.853,25.469 168.647,24.609 168.520 C 22.695 168.239,22.379 169.394,24.068 170.501 C 25.058 171.150,25.383 175.138,24.517 176.004 C 24.021 176.500,15.625 175.282,15.625 174.714 C 15.625 170.429,16.864 167.484,18.958 166.793 C 20.076 166.424,20.997 165.398,20.583 164.984 C 20.507 164.908,19.379 164.734,18.077 164.598 L 15.710 164.351 15.492 165.476 M385.156 174.796 C 385.156 176.119,383.482 176.475,374.046 177.158 L 364.694 177.835 363.755 176.710 L 362.816 175.586 363.069 179.285 C 363.308 182.781,363.582 183.945,363.935 182.966 C 364.567 181.209,366.475 180.519,370.783 180.486 C 373.284 180.467,373.031 180.081,373.635 184.835 C 374.475 191.443,383.437 193.439,386.023 187.593 C 386.810 185.814,386.834 179.865,386.072 175.488 C 385.851 174.224,385.156 173.698,385.156 174.796 M385.080 181.805 C 385.290 185.881,383.761 187.583,379.839 187.640 C 376.415 187.689,374.685 185.741,374.631 181.776 L 374.609 180.153 378.809 179.892 C 381.118 179.749,383.184 179.568,383.398 179.491 C 384.606 179.055,384.963 179.546,385.080 181.805 M12.889 186.035 C 12.889 187.378,12.773 191.509,12.633 195.215 L 12.377 201.953 15.368 201.953 C 19.064 201.953,19.626 200.980,16.597 199.824 C 14.527 199.033,14.063 198.326,14.063 195.964 L 14.063 194.220 21.387 194.384 C 33.887 194.662,35.156 194.880,35.156 196.740 C 35.156 197.029,35.332 197.266,35.547 197.266 C 35.781 197.266,35.938 195.703,35.938 193.359 C 35.938 191.016,35.781 189.453,35.547 189.453 C 35.332 189.453,35.156 189.695,35.156 189.991 C 35.156 191.456,34.169 191.596,24.653 191.478 C 13.700 191.342,14.063 191.411,14.063 189.479 C 14.063 187.558,15.143 186.206,17.161 185.601 C 20.119 184.715,19.370 183.594,15.820 183.594 L 12.891 183.594 12.889 186.035 M116.016 197.476 C 116.016 217.612,123.194 237.876,135.224 251.704 L 136.536 253.213 138.852 246.108 C 140.939 239.702,141.113 238.921,140.618 238.154 C 133.692 227.426,129.691 215.858,128.684 203.647 L 128.421 200.459 122.456 196.128 C 119.176 193.746,116.385 191.797,116.254 191.797 C 116.123 191.797,116.016 194.353,116.016 197.476 M277.734 196.616 L 271.680 201.052 271.395 203.358 C 270.194 213.085,268.977 218.258,266.328 224.909 C 265.418 227.193,263.479 231.148,262.018 233.698 L 259.363 238.333 261.615 245.332 C 262.854 249.181,263.987 252.333,264.133 252.337 C 264.420 252.344,269.130 246.098,270.755 243.555 C 279.587 229.728,284.298 213.118,283.910 197.164 L 283.789 192.180 277.734 196.616 M364.256 197.288 C 364.004 200.473,364.251 202.239,364.751 200.830 C 365.338 199.175,366.301 198.828,370.313 198.828 L 374.219 198.828 374.219 201.870 C 374.219 208.004,377.768 211.352,383.008 210.162 C 386.392 209.393,387.500 206.593,387.500 198.809 C 387.500 194.196,387.270 193.307,386.518 195.020 L 386.133 195.898 376.422 195.791 C 366.806 195.685,365.234 195.479,365.234 194.322 C 365.234 192.141,364.483 194.418,364.256 197.288 M381.782 199.213 L 386.026 199.219 385.871 201.957 C 385.650 205.860,384.655 206.836,380.892 206.836 C 377.075 206.836,375.391 205.065,375.391 201.054 C 375.391 199.088,375.647 198.700,376.748 198.995 C 377.183 199.112,379.449 199.210,381.782 199.213 M12.420 205.761 C 12.579 209.379,12.760 209.803,13.645 208.630 C 14.574 207.398,15.787 207.636,20.805 210.035 L 24.618 211.858 21.977 213.536 C 20.524 214.459,18.402 215.702,17.261 216.299 L 15.186 217.383 14.464 216.504 C 13.304 215.092,13.173 215.429,13.470 219.043 C 13.807 223.141,13.738 223.041,15.206 221.572 C 15.855 220.924,18.719 218.908,21.572 217.091 L 26.758 213.789 30.078 213.543 C 34.074 213.247,34.922 213.433,35.514 214.732 C 36.141 216.108,36.500 215.555,36.400 213.366 C 36.179 208.532,35.567 206.515,35.002 208.763 C 34.709 209.932,33.955 210.184,29.706 210.533 L 26.367 210.808 20.218 207.747 C 16.835 206.063,13.849 204.334,13.581 203.905 C 12.673 202.452,12.301 203.047,12.420 205.761 M131.799 205.762 C 132.708 214.774,137.870 229.727,141.655 234.314 L 142.411 235.230 145.053 226.981 L 147.695 218.732 146.808 215.977 L 145.921 213.222 138.978 208.174 C 130.826 202.246,131.466 202.461,131.799 205.762 M261.058 208.733 C 254.311 213.608,253.919 213.962,253.304 215.744 L 252.657 217.621 255.270 225.705 C 256.708 230.151,258.021 233.934,258.190 234.112 C 258.550 234.490,262.280 227.342,264.055 222.871 C 266.092 217.742,269.057 204.440,268.318 203.744 C 268.233 203.664,264.966 205.909,261.058 208.733 M363.485 214.676 C 363.183 218.309,363.362 218.975,364.289 217.652 C 365.033 216.591,366.436 216.560,376.555 217.382 C 384.926 218.063,385.071 218.096,385.609 219.467 C 386.196 220.961,386.617 219.720,386.724 216.183 C 386.834 212.528,386.839 212.541,385.811 213.825 L 384.908 214.954 375.755 214.261 C 365.879 213.513,365.043 213.352,364.656 212.132 C 364.150 210.539,363.759 211.389,363.485 214.676 M32.617 217.451 C 28.770 217.931,28.331 219.282,31.901 219.650 C 34.804 219.950,35.422 220.623,36.109 224.228 C 36.787 227.786,38.057 227.112,26.887 229.118 L 17.383 230.825 16.278 230.026 C 14.784 228.947,14.753 229.060,15.472 232.939 C 16.002 235.795,16.797 237.234,16.797 235.338 C 16.797 234.241,18.685 233.658,26.758 232.260 C 31.270 231.478,35.354 230.753,35.834 230.648 C 36.391 230.526,37.000 230.750,37.518 231.268 C 39.126 232.876,39.076 232.232,36.528 218.457 C 36.278 217.106,35.984 217.031,32.617 217.451 M363.119 220.725 C 362.696 221.942,362.073 226.266,362.289 226.482 C 362.415 226.608,362.788 226.326,363.117 225.855 C 363.898 224.740,364.303 224.760,373.633 226.370 C 377.930 227.111,381.533 227.729,381.641 227.744 C 381.748 227.759,377.008 229.589,371.108 231.809 C 361.351 235.481,360.355 235.940,360.106 236.870 C 359.781 238.084,358.658 237.763,370.508 239.846 C 380.555 241.611,381.544 241.899,381.716 243.105 C 381.958 244.798,382.587 243.872,383.101 241.066 C 383.693 237.841,383.565 237.358,382.476 238.702 L 381.729 239.624 373.979 238.343 C 369.717 237.639,366.183 237.016,366.126 236.960 C 366.070 236.903,370.138 235.308,375.166 233.414 C 386.187 229.262,385.082 229.942,385.599 227.003 C 386.072 224.320,385.846 223.618,384.930 224.926 C 384.127 226.073,383.378 226.037,374.274 224.413 C 364.295 222.632,364.932 222.820,364.067 221.398 C 363.541 220.532,363.256 220.330,363.119 220.725 M27.539 237.457 C 18.793 240.004,15.696 247.167,20.818 253.000 C 26.622 259.611,42.188 254.631,42.188 246.163 C 42.188 238.691,35.977 234.999,27.539 237.457 M36.667 239.838 C 38.346 239.848,40.625 242.583,40.622 244.583 C 40.610 252.582,21.552 256.416,20.106 248.710 C 19.302 244.423,28.983 238.541,34.961 239.684 C 35.391 239.766,36.158 239.835,36.667 239.838 M356.675 249.222 C 355.297 253.304,354.243 256.703,354.331 256.775 C 354.420 256.847,355.635 257.356,357.031 257.907 C 360.324 259.206,361.003 258.437,358.501 256.240 C 357.452 255.318,356.934 254.538,356.934 253.880 C 356.934 252.448,358.676 247.266,359.158 247.266 C 359.519 247.266,368.012 249.987,368.261 250.182 C 369.112 250.851,366.274 255.385,364.904 255.544 C 362.289 255.848,366.392 258.594,369.461 258.594 C 370.214 258.594,369.984 257.258,369.141 256.731 C 368.052 256.051,368.735 250.781,369.912 250.781 C 370.281 250.781,377.854 253.505,378.061 253.712 C 378.315 253.966,376.146 260.082,375.661 260.479 C 375.405 260.688,374.406 261.014,373.441 261.203 C 370.860 261.709,370.946 262.578,373.663 263.435 C 376.379 264.291,376.020 264.756,378.621 257.031 C 379.815 253.486,380.914 250.278,381.063 249.902 C 381.253 249.423,381.146 249.219,380.706 249.219 C 380.361 249.219,380.078 249.383,380.078 249.583 C 380.078 250.661,378.050 250.297,371.377 248.022 C 359.826 244.084,360.154 244.230,359.895 242.934 C 359.517 241.043,359.276 241.514,356.675 249.222 M191.487 259.643 C 187.558 262.557,184.395 264.994,184.461 265.060 C 186.473 267.072,213.627 266.945,215.705 264.914 C 215.856 264.766,212.818 262.317,208.954 259.471 C 199.700 252.657,200.926 252.645,191.487 259.643 M29.297 259.602 C 24.392 261.168,23.785 264.270,26.865 272.038 C 28.668 276.585,29.688 278.037,29.688 276.057 C 29.688 274.719,29.719 274.702,38.672 271.187 C 48.721 267.241,48.323 267.353,49.249 268.192 C 50.526 269.347,50.512 268.561,49.191 265.085 C 47.975 261.883,47.266 261.137,47.266 263.061 C 47.266 264.239,46.787 264.602,43.393 266.002 C 39.376 267.658,39.518 267.682,38.493 265.183 C 36.405 260.089,33.429 258.282,29.297 259.602 M352.848 260.841 C 346.031 270.927,353.146 278.738,362.344 271.266 C 364.760 269.304,366.471 268.602,368.097 268.907 C 373.045 269.835,371.957 276.953,366.868 276.953 C 364.347 276.953,364.386 278.221,366.940 279.283 L 368.945 280.118 369.832 279.024 C 376.236 271.124,370.718 261.672,362.942 267.221 C 357.225 271.302,356.205 271.701,354.174 270.654 C 349.606 268.302,351.273 262.465,356.637 262.026 C 358.756 261.852,358.623 260.819,356.367 259.923 C 355.338 259.514,354.407 259.136,354.299 259.083 C 354.190 259.030,353.537 259.821,352.848 260.841 M35.537 263.077 C 36.342 263.805,37.891 266.854,37.891 267.710 C 37.891 268.148,35.002 269.416,28.658 271.760 C 27.405 272.224,26.498 266.057,27.591 264.498 C 29.120 262.315,33.775 261.483,35.537 263.077 M175.121 271.604 C 171.858 274.009,169.177 276.087,169.164 276.222 C 169.127 276.609,177.444 279.268,181.370 280.125 C 192.974 282.658,205.270 282.757,217.188 280.414 C 221.242 279.616,230.340 276.848,230.968 276.220 C 231.484 275.703,219.511 267.096,218.565 267.304 C 218.130 267.400,215.928 267.891,213.672 268.396 C 209.977 269.223,208.622 269.314,200.000 269.314 C 190.100 269.314,190.684 269.375,181.836 267.406 C 181.293 267.285,179.241 268.569,175.121 271.604 M356.507 284.639 C 352.126 287.594,349.254 292.306,349.205 296.623 C 349.186 298.211,343.504 306.551,342.871 305.918 C 342.587 305.634,342.600 304.309,342.911 301.569 C 343.907 292.813,343.622 292.297,339.976 296.257 C 334.405 302.309,332.670 306.496,332.639 313.956 L 332.617 319.123 329.310 322.448 C 325.320 326.458,325.176 326.373,325.574 320.229 C 325.933 314.691,325.887 310.497,325.464 310.073 C 324.934 309.543,318.918 315.734,316.780 319.009 C 313.949 323.346,312.440 328.829,312.014 336.323 C 311.916 338.034,311.832 338.138,308.451 340.717 C 303.601 344.417,303.568 344.354,305.899 335.967 C 307.008 331.981,307.415 327.539,306.649 327.799 C 305.291 328.261,298.800 333.358,296.544 335.733 C 292.489 340.002,290.629 343.618,288.905 350.586 L 288.036 354.102 284.350 356.151 C 279.086 359.078,279.095 359.105,282.812 351.172 C 285.498 345.440,286.518 342.188,285.628 342.188 C 284.943 342.188,278.183 346.294,276.172 347.931 C 272.103 351.245,268.300 357.089,266.769 362.383 C 266.270 364.107,262.360 366.245,253.906 369.417 C 246.311 372.266,255.752 371.015,265.130 367.929 L 267.565 367.128 272.721 368.573 C 283.052 371.467,289.255 370.533,296.205 365.036 C 299.452 362.467,298.646 362.065,288.755 361.321 C 280.241 360.680,280.284 360.721,285.364 358.045 L 289.648 355.787 294.141 356.116 C 308.998 357.204,315.074 355.484,321.717 348.311 L 324.312 345.508 322.801 345.222 C 321.969 345.065,317.993 345.046,313.965 345.178 C 309.774 345.317,306.651 345.272,306.664 345.073 C 306.677 344.883,308.532 343.320,310.787 341.602 L 314.887 338.477 320.852 338.017 C 332.419 337.125,337.705 334.598,342.607 327.618 C 345.386 323.660,345.302 323.619,337.258 325.036 C 331.379 326.071,328.516 326.476,328.516 326.271 C 328.516 326.183,329.964 324.553,331.733 322.649 L 334.951 319.188 338.365 318.560 C 348.319 316.731,352.958 313.028,355.431 304.939 C 355.882 303.466,356.250 302.195,356.250 302.115 C 356.250 302.034,355.151 302.571,353.809 303.309 C 351.173 304.757,346.197 306.743,345.666 306.559 C 344.822 306.266,350.974 298.272,352.344 297.881 C 354.598 297.238,357.233 294.265,358.123 291.358 C 358.786 289.194,359.677 282.791,359.311 282.825 C 359.239 282.831,357.977 283.648,356.507 284.639 M41.909 287.615 C 42.325 293.501,44.418 297.269,48.141 298.831 C 50.110 299.658,56.025 306.995,55.304 307.717 C 54.976 308.045,50.433 306.301,47.724 304.807 C 44.699 303.139,44.631 303.198,45.660 306.586 C 47.909 313.991,52.551 317.709,61.914 319.602 C 66.225 320.474,66.138 320.419,70.006 324.705 C 72.541 327.514,72.656 327.718,71.622 327.546 C 60.928 325.778,58.032 325.360,57.194 325.463 L 56.195 325.586 57.820 328.095 C 62.587 335.453,68.254 338.289,80.082 339.232 L 86.140 339.715 90.043 342.750 C 92.189 344.418,94.121 345.964,94.336 346.183 C 94.602 346.456,92.606 346.512,88.064 346.359 C 81.183 346.127,76.953 346.344,76.953 346.930 C 76.953 347.114,78.316 348.628,79.982 350.293 C 86.590 356.899,92.642 358.462,107.031 357.280 L 111.133 356.943 115.393 359.202 C 120.473 361.895,120.457 361.914,112.571 362.503 C 107.026 362.918,102.845 363.568,102.538 364.064 C 102.267 364.503,106.597 367.760,109.236 369.101 C 114.942 372.000,120.139 372.172,128.460 369.737 L 133.288 368.324 135.687 369.113 C 140.363 370.651,149.360 372.671,149.759 372.272 C 150.257 371.775,150.299 371.800,146.875 370.554 C 145.264 369.968,141.926 368.565,139.458 367.437 L 134.971 365.385 133.387 361.481 C 130.029 353.201,125.718 348.631,117.230 344.352 L 115.125 343.291 115.323 345.045 C 115.432 346.011,116.517 348.921,117.734 351.514 C 120.385 357.156,121.211 359.375,120.660 359.375 C 119.333 359.375,112.872 355.328,112.653 354.360 C 109.884 342.101,106.797 337.542,96.329 330.251 L 93.635 328.375 93.845 331.082 C 93.960 332.571,94.601 335.709,95.269 338.056 C 97.336 345.315,97.235 345.459,92.537 341.962 C 88.709 339.111,88.874 339.450,88.510 333.700 C 88.000 325.630,84.666 319.096,77.916 312.941 L 75.615 310.843 75.296 311.965 C 75.121 312.581,75.095 316.206,75.238 320.020 C 75.546 328.214,75.711 328.059,71.483 323.535 L 68.288 320.117 68.218 314.844 C 68.116 307.199,66.599 303.592,60.944 297.548 L 58.022 294.425 57.740 295.747 C 57.585 296.475,57.624 298.564,57.827 300.391 C 58.273 304.399,58.309 307.423,57.910 307.418 C 56.836 307.406,51.970 299.230,51.578 296.779 C 50.793 291.863,48.672 288.638,44.329 285.755 C 41.587 283.935,41.647 283.889,41.909 287.615 M166.406 365.290 C 161.898 367.008,161.509 367.249,161.841 368.116 C 162.039 368.630,162.354 368.605,164.289 367.925 C 168.156 366.566,168.105 366.320,166.180 377.119 C 164.483 386.636,164.442 386.719,161.290 386.719 C 159.268 386.719,158.946 386.815,159.056 387.389 C 159.243 388.361,172.153 390.658,172.676 389.812 C 172.941 389.384,172.559 389.101,170.997 388.570 C 167.602 387.415,167.641 388.150,170.234 373.926 C 172.418 361.947,172.818 362.847,166.406 365.290 M228.600 363.949 C 227.720 364.118,218.750 381.094,218.750 382.591 C 218.750 383.502,219.085 383.516,224.312 382.825 C 229.965 382.077,229.444 381.817,229.873 385.595 C 230.118 387.761,229.599 389.063,228.488 389.063 C 228.288 389.063,228.125 389.332,228.125 389.662 C 228.125 390.282,228.292 390.278,233.952 389.496 C 235.907 389.226,236.460 388.497,234.989 388.128 C 233.716 387.808,233.319 387.011,232.991 384.113 L 232.723 381.742 234.916 381.468 L 237.109 381.194 237.109 379.269 C 237.109 376.962,236.161 376.612,235.077 378.518 C 234.543 379.456,232.422 380.313,232.422 379.590 C 232.422 379.536,231.982 376.170,231.445 372.109 C 230.908 368.048,230.469 364.489,230.469 364.199 C 230.469 363.668,230.232 363.636,228.600 363.949 M184.673 366.014 C 179.815 367.477,177.399 373.457,179.785 378.111 C 181.370 381.201,186.143 382.292,190.140 380.478 L 191.803 379.723 191.550 380.779 C 190.204 386.394,186.780 389.831,182.520 389.842 C 181.596 389.844,181.406 390.430,182.015 391.394 C 182.449 392.079,185.699 391.535,188.175 390.363 C 197.015 386.175,198.670 368.338,190.430 366.061 C 188.638 365.566,186.227 365.546,184.673 366.014 M204.688 366.433 C 197.710 369.355,197.112 387.607,203.864 391.550 C 206.459 393.066,210.680 392.412,212.774 390.169 C 217.004 385.639,216.506 371.065,211.997 367.437 C 210.365 366.123,206.646 365.612,204.688 366.433 M190.319 368.229 C 192.213 369.916,193.026 376.491,191.504 377.819 C 187.586 381.236,182.417 379.264,182.424 374.355 C 182.432 368.720,186.941 365.221,190.319 368.229 M209.462 368.652 C 212.526 371.899,213.077 386.143,210.267 389.482 C 208.007 392.168,204.843 390.464,203.675 385.932 C 200.927 375.280,204.801 363.715,209.462 368.652 M228.496 374.609 C 228.768 377.295,229.016 379.663,229.046 379.872 C 229.098 380.229,222.313 381.428,222.002 381.117 C 221.924 381.038,223.130 378.223,224.683 374.861 C 226.237 371.496,227.617 368.967,227.753 369.237 C 227.889 369.506,228.223 371.924,228.496 374.609 \" stroke=\"none\" fill=\"#840404\" fill-rule=\"evenodd\"></path><path id=\"path4\" d=\"M204.693 12.793 C 204.697 13.215,204.809 13.312,204.986 13.047 C 205.144 12.811,205.537 12.517,205.859 12.394 C 206.251 12.245,206.154 12.161,205.566 12.140 C 204.976 12.119,204.689 12.334,204.693 12.793 M186.237 12.783 C 186.940 12.870,187.994 12.868,188.581 12.779 C 189.168 12.690,188.594 12.619,187.305 12.621 C 186.016 12.623,185.535 12.696,186.237 12.783 M209.473 12.769 C 209.849 12.868,210.464 12.868,210.840 12.769 C 211.216 12.671,210.908 12.591,210.156 12.591 C 209.404 12.591,209.097 12.671,209.473 12.769 M214.551 13.160 C 214.927 13.258,215.542 13.258,215.918 13.160 C 216.294 13.062,215.986 12.981,215.234 12.981 C 214.482 12.981,214.175 13.062,214.551 13.160 M219.629 13.551 C 220.005 13.649,220.620 13.649,220.996 13.551 C 221.372 13.452,221.064 13.372,220.313 13.372 C 219.561 13.372,219.253 13.452,219.629 13.551 M209.282 14.339 C 209.768 14.432,210.471 14.429,210.844 14.331 C 211.218 14.233,210.820 14.157,209.961 14.161 C 209.102 14.165,208.796 14.245,209.282 14.339 M212.200 15.625 C 212.200 16.377,212.280 16.685,212.379 16.309 C 212.477 15.933,212.477 15.317,212.379 14.941 C 212.280 14.565,212.200 14.873,212.200 15.625 M223.138 16.016 C 223.138 16.768,223.218 17.075,223.316 16.699 C 223.414 16.323,223.414 15.708,223.316 15.332 C 223.218 14.956,223.138 15.264,223.138 16.016 M167.090 15.510 C 167.573 15.603,168.364 15.603,168.848 15.510 C 169.331 15.417,168.936 15.341,167.969 15.341 C 167.002 15.341,166.606 15.417,167.090 15.510 M204.395 16.992 C 204.400 17.852,204.480 18.157,204.573 17.671 C 204.667 17.185,204.663 16.482,204.565 16.109 C 204.467 15.735,204.391 16.133,204.395 16.992 M215.325 17.188 C 215.325 17.939,215.405 18.247,215.504 17.871 C 215.602 17.495,215.602 16.880,215.504 16.504 C 215.405 16.128,215.325 16.436,215.325 17.188 M191.406 16.973 C 191.406 17.503,191.176 17.625,190.442 17.485 C 189.911 17.383,189.570 17.451,189.683 17.635 C 190.030 18.195,191.416 18.007,191.662 17.366 C 191.789 17.034,191.784 16.654,191.650 16.520 C 191.516 16.386,191.406 16.590,191.406 16.973 M199.752 22.070 C 199.753 24.219,199.819 25.048,199.898 23.913 C 199.977 22.778,199.976 21.020,199.896 20.006 C 199.816 18.993,199.751 19.922,199.752 22.070 M211.809 20.703 C 211.809 21.455,211.890 21.763,211.988 21.387 C 212.086 21.011,212.086 20.396,211.988 20.020 C 211.890 19.644,211.809 19.951,211.809 20.703 M170.810 22.656 C 170.810 23.623,170.886 24.019,170.979 23.535 C 171.072 23.052,171.072 22.261,170.979 21.777 C 170.886 21.294,170.810 21.689,170.810 22.656 M214.934 22.266 C 214.934 23.018,215.015 23.325,215.113 22.949 C 215.211 22.573,215.211 21.958,215.113 21.582 C 215.015 21.206,214.934 21.514,214.934 22.266 M260.254 22.926 C 260.630 23.024,261.245 23.024,261.621 22.926 C 261.997 22.827,261.689 22.747,260.938 22.747 C 260.186 22.747,259.878 22.827,260.254 22.926 M133.959 24.195 C 134.438 24.498,134.441 24.654,133.981 25.263 C 133.473 25.935,133.483 25.938,134.150 25.330 C 134.870 24.673,134.708 23.823,133.864 23.834 C 133.572 23.838,133.607 23.972,133.959 24.195 M196.627 27.539 C 196.628 29.688,196.694 30.517,196.773 29.381 C 196.852 28.246,196.851 26.488,196.771 25.475 C 196.691 24.462,196.626 25.391,196.627 27.539 M211.419 25.781 C 211.419 26.533,211.499 26.841,211.597 26.465 C 211.696 26.089,211.696 25.474,211.597 25.098 C 211.499 24.722,211.419 25.029,211.419 25.781 M214.552 27.539 C 214.556 28.398,214.636 28.704,214.729 28.218 C 214.823 27.732,214.819 27.029,214.722 26.656 C 214.624 26.282,214.547 26.680,214.552 27.539 M133.310 28.125 C 133.310 29.092,133.386 29.487,133.479 29.004 C 133.572 28.521,133.572 27.729,133.479 27.246 C 133.386 26.763,133.310 27.158,133.310 28.125 M211.028 30.859 C 211.028 31.611,211.109 31.919,211.207 31.543 C 211.305 31.167,211.305 30.552,211.207 30.176 C 211.109 29.800,211.028 30.107,211.028 30.859 M214.169 32.813 C 214.169 33.779,214.245 34.175,214.338 33.691 C 214.431 33.208,214.431 32.417,214.338 31.934 C 214.245 31.450,214.169 31.846,214.169 32.813 M133.692 34.180 C 133.697 35.039,133.777 35.345,133.870 34.859 C 133.963 34.373,133.960 33.670,133.862 33.296 C 133.764 32.923,133.688 33.320,133.692 34.180 M176.172 33.325 C 176.172 33.393,176.743 33.964,177.441 34.595 L 178.711 35.742 177.564 34.473 C 176.494 33.289,176.172 33.024,176.172 33.325 M131.731 36.719 C 131.731 37.471,131.812 37.778,131.910 37.402 C 132.008 37.026,132.008 36.411,131.910 36.035 C 131.812 35.659,131.731 35.967,131.731 36.719 M155.958 36.914 C 155.962 37.773,156.042 38.079,156.136 37.593 C 156.229 37.107,156.226 36.404,156.128 36.031 C 156.030 35.657,155.954 36.055,155.958 36.914 M212.988 36.597 C 213.364 36.696,213.979 36.696,214.355 36.597 C 214.731 36.499,214.424 36.419,213.672 36.419 C 212.920 36.419,212.612 36.499,212.988 36.597 M183.496 36.994 C 183.979 37.088,184.771 37.088,185.254 36.994 C 185.737 36.901,185.342 36.825,184.375 36.825 C 183.408 36.825,183.013 36.901,183.496 36.994 M134.083 40.039 C 134.087 40.898,134.167 41.204,134.261 40.718 C 134.354 40.232,134.351 39.529,134.253 39.156 C 134.155 38.782,134.079 39.180,134.083 40.039 M132.122 41.016 C 132.122 41.768,132.202 42.075,132.301 41.699 C 132.399 41.323,132.399 40.708,132.301 40.332 C 132.202 39.956,132.122 40.264,132.122 41.016 M196.387 42.479 C 198.374 42.549,201.626 42.549,203.613 42.479 C 205.601 42.408,203.975 42.350,200.000 42.350 C 196.025 42.350,194.399 42.408,196.387 42.479 M187.407 42.854 C 187.893 42.948,188.596 42.944,188.969 42.847 C 189.343 42.749,188.945 42.672,188.086 42.677 C 187.227 42.681,186.921 42.761,187.407 42.854 M211.235 42.854 C 211.721 42.948,212.424 42.944,212.798 42.847 C 213.171 42.749,212.773 42.672,211.914 42.677 C 211.055 42.681,210.749 42.761,211.235 42.854 M251.172 42.700 C 251.172 42.768,251.743 43.339,252.441 43.970 L 253.711 45.117 252.564 43.848 C 251.494 42.664,251.172 42.399,251.172 42.700 M131.799 45.222 C 132.726 46.308,132.820 46.307,132.782 45.215 C 132.765 44.731,132.660 44.563,132.548 44.841 C 132.384 45.250,132.224 45.251,131.700 44.847 C 131.252 44.502,131.282 44.616,131.799 45.222 M134.474 45.898 C 134.478 46.758,134.558 47.063,134.651 46.577 C 134.745 46.092,134.741 45.388,134.643 45.015 C 134.546 44.642,134.469 45.039,134.474 45.898 M272.702 50.636 C 272.677 51.093,272.928 51.692,273.260 51.968 C 273.592 52.243,273.757 52.748,273.627 53.090 C 273.441 53.581,273.492 53.611,273.874 53.232 C 274.257 52.852,274.230 52.610,273.742 52.060 C 273.404 51.679,273.042 51.016,272.937 50.586 C 272.757 49.844,272.745 49.847,272.702 50.636 M322.805 58.068 C 324.056 59.396,324.600 60.261,324.403 60.607 C 324.160 61.034,324.204 61.040,324.638 60.637 C 325.081 60.225,324.812 59.797,323.040 58.098 L 320.909 56.055 322.805 58.068 M80.896 57.129 C 80.988 57.183,81.764 57.842,82.621 58.594 L 84.180 59.961 82.834 58.496 C 82.093 57.690,81.317 57.031,81.108 57.031 C 80.900 57.031,80.804 57.075,80.896 57.129 M320.291 62.012 L 318.945 63.477 320.410 62.130 C 321.774 60.877,322.055 60.547,321.756 60.547 C 321.691 60.547,321.032 61.206,320.291 62.012 M313.074 64.941 L 310.742 67.383 313.184 65.051 C 314.526 63.769,315.625 62.670,315.625 62.610 C 315.625 62.321,315.239 62.674,313.074 64.941 M331.778 66.653 C 333.339 68.289,333.897 69.116,333.536 69.259 C 333.198 69.394,333.176 69.481,333.473 69.500 C 334.620 69.576,334.163 68.718,331.915 66.571 L 329.492 64.258 331.778 66.653 M313.071 69.629 L 311.133 71.680 313.184 69.741 C 315.089 67.940,315.414 67.578,315.122 67.578 C 315.060 67.578,314.137 68.501,313.071 69.629 M318.164 70.313 C 319.440 71.602,320.571 72.656,320.679 72.656 C 320.786 72.656,319.830 71.602,318.555 70.313 C 317.279 69.023,316.148 67.969,316.040 67.969 C 315.933 67.969,316.888 69.023,318.164 70.313 M320.703 70.508 C 321.870 71.689,322.913 72.656,323.020 72.656 C 323.128 72.656,322.261 71.689,321.094 70.508 C 319.927 69.326,318.884 68.359,318.777 68.359 C 318.669 68.359,319.536 69.326,320.703 70.508 M324.786 71.191 L 323.242 72.852 324.902 71.307 C 326.446 69.871,326.742 69.531,326.446 69.531 C 326.383 69.531,325.636 70.278,324.786 71.191 M95.013 71.094 C 95.013 71.846,95.093 72.153,95.191 71.777 C 95.289 71.401,95.289 70.786,95.191 70.410 C 95.093 70.034,95.013 70.342,95.013 71.094 M306.445 75.000 C 307.503 76.074,308.457 76.953,308.564 76.953 C 308.672 76.953,307.894 76.074,306.836 75.000 C 305.778 73.926,304.824 73.047,304.717 73.047 C 304.609 73.047,305.387 73.926,306.445 75.000 M83.984 74.805 C 84.713 75.557,85.397 76.172,85.505 76.172 C 85.612 76.172,85.104 75.557,84.375 74.805 C 83.646 74.053,82.962 73.438,82.855 73.438 C 82.747 73.438,83.256 74.053,83.984 74.805 M324.402 76.270 L 322.070 78.711 324.512 76.379 C 325.854 75.097,326.953 73.998,326.953 73.938 C 326.953 73.649,326.568 74.002,324.402 76.270 M57.599 77.441 L 56.055 79.102 57.715 77.557 C 58.628 76.708,59.375 75.961,59.375 75.897 C 59.375 75.602,59.035 75.897,57.599 77.441 M316.968 79.395 L 315.820 80.664 317.090 79.517 C 317.788 78.886,318.359 78.314,318.359 78.247 C 318.359 77.945,318.037 78.211,316.968 79.395 M59.473 79.176 C 59.849 79.274,60.464 79.274,60.840 79.176 C 61.216 79.077,60.908 78.997,60.156 78.997 C 59.404 78.997,59.097 79.077,59.473 79.176 M315.420 83.499 C 317.724 85.912,318.360 86.232,318.658 85.132 C 318.781 84.676,318.733 84.681,318.403 85.156 C 318.065 85.643,317.579 85.345,315.541 83.398 L 313.086 81.055 315.420 83.499 M94.311 82.910 L 93.164 84.180 94.434 83.032 C 95.617 81.963,95.883 81.641,95.581 81.641 C 95.514 81.641,94.942 82.212,94.311 82.910 M304.297 81.763 C 304.297 81.830,304.868 82.401,305.566 83.032 L 306.836 84.180 305.689 82.910 C 304.619 81.727,304.297 81.461,304.297 81.763 M346.847 83.301 C 347.272 83.866,347.272 84.102,346.847 84.668 C 346.356 85.319,346.367 85.319,347.078 84.668 C 347.812 83.995,347.812 83.974,347.078 83.301 C 346.367 82.650,346.356 82.650,346.847 83.301 M53.614 85.352 C 53.618 86.211,53.698 86.517,53.792 86.031 C 53.885 85.545,53.882 84.842,53.784 84.468 C 53.686 84.095,53.610 84.492,53.614 85.352 M344.516 86.541 C 344.241 86.873,343.736 87.039,343.394 86.909 C 342.894 86.718,342.869 86.769,343.266 87.169 C 343.664 87.570,343.925 87.499,344.622 86.801 C 345.097 86.326,345.381 85.938,345.252 85.938 C 345.123 85.938,344.792 86.209,344.516 86.541 M88.462 88.379 L 86.523 90.430 88.574 88.491 C 90.480 86.690,90.804 86.328,90.513 86.328 C 90.451 86.328,89.528 87.251,88.462 88.379 M311.133 88.281 C 312.191 89.355,313.144 90.234,313.252 90.234 C 313.359 90.234,312.582 89.355,311.523 88.281 C 310.465 87.207,309.512 86.328,309.404 86.328 C 309.297 86.328,310.075 87.207,311.133 88.281 M48.483 91.639 C 48.458 92.089,48.833 92.792,49.316 93.201 C 50.188 93.939,50.190 93.939,49.552 93.164 C 49.198 92.734,48.823 92.031,48.718 91.602 C 48.535 90.850,48.526 90.852,48.483 91.639 M82.593 94.629 L 81.445 95.898 82.715 94.751 C 83.898 93.682,84.164 93.359,83.862 93.359 C 83.795 93.359,83.224 93.931,82.593 94.629 M316.016 93.482 C 316.016 93.549,316.587 94.120,317.285 94.751 L 318.555 95.898 317.407 94.629 C 316.338 93.446,316.016 93.180,316.016 93.482 M333.686 94.751 C 334.209 95.373,334.258 95.663,333.901 96.021 C 333.646 96.276,333.539 96.484,333.663 96.484 C 334.548 96.484,334.686 95.366,333.885 94.688 C 333.010 93.947,333.010 93.947,333.686 94.751 M359.075 105.078 C 359.075 105.830,359.155 106.138,359.254 105.762 C 359.352 105.386,359.352 104.771,359.254 104.395 C 359.155 104.019,359.075 104.326,359.075 105.078 M348.828 109.888 C 348.828 109.955,349.399 110.526,350.098 111.157 L 351.367 112.305 350.220 111.035 C 349.150 109.852,348.828 109.586,348.828 109.888 M48.242 111.328 L 41.992 111.554 48.558 111.636 C 52.856 111.690,55.041 111.584,54.883 111.328 C 54.750 111.113,54.608 110.975,54.567 111.020 C 54.526 111.065,51.680 111.204,48.242 111.328 M354.204 113.167 C 354.690 113.260,355.393 113.257,355.766 113.159 C 356.140 113.061,355.742 112.985,354.883 112.989 C 354.023 112.993,353.718 113.073,354.204 113.167 M43.457 114.743 C 45.122 114.817,47.847 114.817,49.512 114.743 C 51.177 114.670,49.814 114.610,46.484 114.610 C 43.154 114.610,41.792 114.670,43.457 114.743 M29.545 121.357 C 29.788 121.534,30.084 122.031,30.203 122.461 C 30.372 123.077,30.402 123.042,30.346 122.296 C 30.306 121.776,30.010 121.279,29.688 121.192 C 29.300 121.088,29.252 121.144,29.545 121.357 M370.849 124.792 C 370.728 125.107,370.720 125.590,370.831 125.866 C 370.941 126.142,371.046 125.986,371.063 125.521 C 371.080 125.055,371.313 124.586,371.582 124.477 C 371.964 124.323,371.962 124.274,371.570 124.250 C 371.294 124.233,370.970 124.477,370.849 124.792 M201.074 126.838 C 201.558 126.931,202.349 126.931,202.832 126.838 C 203.315 126.745,202.920 126.669,201.953 126.669 C 200.986 126.669,200.591 126.745,201.074 126.838 M348.468 127.604 C 348.451 128.070,348.218 128.539,347.949 128.648 C 347.567 128.802,347.569 128.851,347.961 128.875 C 348.554 128.912,348.986 127.969,348.700 127.259 C 348.590 126.983,348.485 127.139,348.468 127.604 M200.879 129.566 C 201.255 129.664,201.870 129.664,202.246 129.566 C 202.622 129.468,202.314 129.388,201.563 129.388 C 200.811 129.388,200.503 129.468,200.879 129.566 M25.444 134.034 C 25.414 134.600,25.697 135.301,26.074 135.597 C 26.669 136.063,26.699 136.057,26.307 135.547 C 26.059 135.225,25.775 134.521,25.677 133.984 L 25.497 133.008 25.444 134.034 M138.464 136.816 L 136.133 139.258 138.574 136.926 C 140.842 134.761,141.194 134.375,140.906 134.375 C 140.845 134.375,139.747 135.474,138.464 136.816 M261.133 136.719 C 262.408 138.008,263.540 139.063,263.647 139.063 C 263.755 139.063,262.799 138.008,261.523 136.719 C 260.248 135.430,259.116 134.375,259.009 134.375 C 258.901 134.375,259.857 135.430,261.133 136.719 M140.422 138.770 L 136.914 142.383 140.527 138.875 C 143.883 135.618,144.318 135.156,144.035 135.156 C 143.977 135.156,142.351 136.782,140.422 138.770 M259.375 138.867 C 261.192 140.693,262.766 142.188,262.873 142.188 C 262.981 142.188,261.582 140.693,259.766 138.867 C 257.949 137.041,256.375 135.547,256.267 135.547 C 256.160 135.547,257.558 137.041,259.375 138.867 M149.405 147.754 L 146.289 150.977 149.512 147.861 C 151.284 146.147,152.734 144.697,152.734 144.638 C 152.734 144.353,152.299 144.761,149.405 147.754 M250.195 147.656 C 251.904 149.375,253.390 150.781,253.497 150.781 C 253.605 150.781,252.295 149.375,250.586 147.656 C 248.877 145.938,247.391 144.531,247.284 144.531 C 247.177 144.531,248.487 145.938,250.195 147.656 M43.092 147.235 C 43.132 147.755,43.428 148.252,43.750 148.339 C 44.137 148.443,44.186 148.387,43.893 148.174 C 43.649 147.997,43.353 147.500,43.235 147.070 C 43.065 146.454,43.035 146.489,43.092 147.235 M38.281 150.513 C 38.281 150.580,38.853 151.151,39.551 151.782 L 40.820 152.930 39.673 151.660 C 38.604 150.477,38.281 150.211,38.281 150.513 M33.503 159.658 C 34.205 159.745,35.260 159.743,35.847 159.654 C 36.434 159.565,35.859 159.494,34.570 159.496 C 33.281 159.498,32.801 159.571,33.503 159.658 M32.910 163.160 C 33.286 163.258,33.901 163.258,34.277 163.160 C 34.653 163.062,34.346 162.981,33.594 162.981 C 32.842 162.981,32.534 163.062,32.910 163.160 M15.369 164.665 C 15.242 164.997,15.247 165.378,15.381 165.512 C 15.515 165.646,15.625 165.474,15.625 165.131 C 15.625 164.788,16.021 164.431,16.504 164.338 L 17.383 164.169 16.492 164.116 C 16.002 164.086,15.496 164.334,15.369 164.665 M28.394 169.003 C 28.864 169.105,29.327 169.532,29.422 169.952 C 29.557 170.545,29.585 170.518,29.544 169.830 C 29.506 169.180,29.234 168.928,28.516 168.881 C 27.702 168.828,27.682 168.848,28.394 169.003 M364.013 177.051 C 364.424 177.576,365.059 177.718,366.747 177.662 L 368.945 177.590 366.809 177.443 C 365.634 177.363,364.403 177.088,364.074 176.832 C 363.551 176.425,363.543 176.452,364.013 177.051 M377.251 176.839 C 377.737 176.932,378.440 176.929,378.813 176.831 C 379.187 176.733,378.789 176.657,377.930 176.661 C 377.070 176.665,376.765 176.745,377.251 176.839 M371.973 177.222 C 372.349 177.321,372.964 177.321,373.340 177.222 C 373.716 177.124,373.408 177.044,372.656 177.044 C 371.904 177.044,371.597 177.124,371.973 177.222 M386.419 179.688 C 386.419 180.439,386.499 180.747,386.597 180.371 C 386.696 179.995,386.696 179.380,386.597 179.004 C 386.499 178.628,386.419 178.936,386.419 179.688 M384.058 179.539 C 384.421 179.647,384.806 180.032,384.914 180.395 C 385.057 180.873,385.089 180.841,385.032 180.278 C 384.985 179.823,384.630 179.468,384.175 179.421 C 383.612 179.364,383.580 179.396,384.058 179.539 M379.004 179.957 C 379.380 180.055,379.995 180.055,380.371 179.957 C 380.747 179.859,380.439 179.778,379.688 179.778 C 378.936 179.778,378.628 179.859,379.004 179.957 M362.981 181.250 C 362.981 182.002,363.062 182.310,363.160 181.934 C 363.258 181.558,363.258 180.942,363.160 180.566 C 363.062 180.190,362.981 180.498,362.981 181.250 M368.657 180.745 C 369.143 180.838,369.846 180.835,370.219 180.737 C 370.593 180.639,370.195 180.563,369.336 180.567 C 368.477 180.572,368.171 180.652,368.657 180.745 M36.750 181.901 C 36.733 182.367,36.499 182.836,36.230 182.944 C 35.848 183.099,35.851 183.148,36.243 183.172 C 36.836 183.209,37.267 182.266,36.982 181.556 C 36.871 181.280,36.767 181.436,36.750 181.901 M373.138 182.813 C 373.138 183.564,373.218 183.872,373.316 183.496 C 373.414 183.120,373.414 182.505,373.316 182.129 C 373.218 181.753,373.138 182.061,373.138 182.813 M13.965 183.486 C 14.663 183.572,15.806 183.572,16.504 183.486 C 17.202 183.399,16.631 183.328,15.234 183.328 C 13.838 183.328,13.267 183.399,13.965 183.486 M12.643 189.258 C 12.644 191.406,12.709 192.235,12.788 191.100 C 12.868 189.965,12.867 188.207,12.787 187.194 C 12.706 186.181,12.642 187.109,12.643 189.258 M42.677 188.086 C 42.681 188.945,42.761 189.251,42.854 188.765 C 42.948 188.279,42.944 187.576,42.847 187.202 C 42.749 186.829,42.672 187.227,42.677 188.086 M357.122 188.281 C 357.122 189.033,357.202 189.341,357.301 188.965 C 357.399 188.589,357.399 187.974,357.301 187.598 C 357.202 187.222,357.122 187.529,357.122 188.281 M14.169 189.453 C 14.169 190.420,14.245 190.815,14.338 190.332 C 14.431 189.849,14.431 189.058,14.338 188.574 C 14.245 188.091,14.169 188.486,14.169 189.453 M35.934 192.108 L 36.125 195.117 36.246 192.422 C 36.312 190.939,36.226 189.585,36.054 189.412 C 35.883 189.239,35.828 190.452,35.934 192.108 M113.372 191.016 C 113.372 191.768,113.452 192.075,113.551 191.699 C 113.649 191.323,113.649 190.708,113.551 190.332 C 113.452 189.956,113.372 190.264,113.372 191.016 M16.712 191.304 C 17.847 191.383,19.605 191.382,20.619 191.302 C 21.632 191.222,20.703 191.157,18.555 191.158 C 16.406 191.159,15.577 191.225,16.712 191.304 M31.157 191.683 C 31.643 191.776,32.346 191.772,32.719 191.675 C 33.093 191.577,32.695 191.500,31.836 191.505 C 30.977 191.509,30.671 191.589,31.157 191.683 M42.348 200.000 C 42.348 203.760,42.407 205.298,42.478 203.418 C 42.550 201.538,42.550 198.462,42.478 196.582 C 42.407 194.702,42.348 196.240,42.348 200.000 M357.583 200.000 C 357.583 203.760,357.641 205.298,357.713 203.418 C 357.784 201.538,357.784 198.462,357.713 196.582 C 357.641 194.702,357.583 196.240,357.583 200.000 M364.131 195.410 L 364.199 197.461 364.353 195.710 C 364.438 194.746,364.715 193.826,364.968 193.665 C 365.275 193.470,365.201 193.369,364.746 193.365 C 364.173 193.360,364.073 193.689,364.131 195.410 M14.947 194.421 C 15.541 194.511,16.419 194.508,16.900 194.416 C 17.380 194.323,16.895 194.249,15.820 194.252 C 14.746 194.255,14.353 194.331,14.947 194.421 M387.628 196.680 C 387.630 198.184,387.701 198.751,387.785 197.941 C 387.870 197.130,387.868 195.900,387.782 195.206 C 387.696 194.513,387.626 195.176,387.628 196.680 M27.051 194.818 C 28.071 194.899,29.741 194.899,30.762 194.818 C 31.782 194.738,30.947 194.672,28.906 194.672 C 26.865 194.672,26.030 194.738,27.051 194.818 M115.753 198.242 C 115.755 199.746,115.826 200.313,115.910 199.503 C 115.995 198.693,115.993 197.462,115.907 196.769 C 115.821 196.075,115.751 196.738,115.753 198.242 M284.113 198.242 C 284.114 199.746,284.185 200.313,284.269 199.503 C 284.354 198.693,284.353 197.462,284.266 196.769 C 284.180 196.075,284.111 196.738,284.113 198.242 M376.087 195.992 C 377.222 196.071,378.980 196.070,379.994 195.990 C 381.007 195.910,380.078 195.845,377.930 195.846 C 375.781 195.847,374.952 195.912,376.087 195.992 M255.980 198.242 C 255.983 199.531,256.056 200.012,256.142 199.309 C 256.229 198.607,256.228 197.553,256.138 196.966 C 256.049 196.379,255.978 196.953,255.980 198.242 M253.231 198.047 C 253.231 199.014,253.308 199.409,253.401 198.926 C 253.494 198.442,253.494 197.651,253.401 197.168 C 253.308 196.685,253.231 197.080,253.231 198.047 M370.605 199.111 C 371.304 199.197,372.446 199.197,373.145 199.111 C 373.843 199.024,373.271 198.953,371.875 198.953 C 370.479 198.953,369.907 199.024,370.605 199.111 M375.549 199.369 C 375.435 199.667,375.410 200.678,375.493 201.615 L 375.645 203.320 375.713 201.298 C 375.766 199.737,375.937 199.235,376.465 199.097 C 377.106 198.930,377.105 198.916,376.453 198.873 C 376.070 198.849,375.663 199.072,375.549 199.369 M373.949 201.758 C 373.951 203.047,374.024 203.527,374.111 202.825 C 374.198 202.123,374.196 201.068,374.107 200.481 C 374.018 199.894,373.947 200.469,373.949 201.758 M128.622 202.344 C 128.622 203.311,128.698 203.706,128.791 203.223 C 128.884 202.739,128.884 201.948,128.791 201.465 C 128.698 200.981,128.622 201.377,128.622 202.344 M271.192 202.539 C 271.197 203.398,271.277 203.704,271.370 203.218 C 271.463 202.732,271.460 202.029,271.362 201.656 C 271.264 201.282,271.188 201.680,271.192 202.539 M15.918 202.229 C 16.401 202.322,17.192 202.322,17.676 202.229 C 18.159 202.136,17.764 202.060,16.797 202.060 C 15.830 202.060,15.435 202.136,15.918 202.229 M268.450 203.125 C 268.450 203.877,268.530 204.185,268.629 203.809 C 268.727 203.433,268.727 202.817,268.629 202.441 C 268.530 202.065,268.450 202.373,268.450 203.125 M12.208 204.883 C 12.212 205.742,12.292 206.048,12.386 205.562 C 12.479 205.076,12.476 204.373,12.378 203.999 C 12.280 203.626,12.204 204.023,12.208 204.883 M113.372 205.078 C 113.372 205.830,113.452 206.138,113.551 205.762 C 113.649 205.386,113.649 204.771,113.551 204.395 C 113.452 204.019,113.372 204.326,113.372 205.078 M286.419 205.078 C 286.419 205.830,286.499 206.138,286.597 205.762 C 286.696 205.386,286.696 204.771,286.597 204.395 C 286.499 204.019,286.419 204.326,286.419 205.078 M35.410 207.685 C 35.657 207.863,35.948 208.447,36.058 208.984 C 36.229 209.825,36.248 209.802,36.195 208.819 C 36.160 208.175,35.877 207.609,35.547 207.520 C 35.155 207.415,35.110 207.469,35.410 207.685 M13.911 208.132 C 13.802 208.308,14.231 208.376,14.864 208.283 C 15.498 208.190,16.016 208.047,16.016 207.963 C 16.016 207.666,14.104 207.819,13.911 208.132 M30.176 210.426 C 30.552 210.524,31.167 210.524,31.543 210.426 C 31.919 210.327,31.611 210.247,30.859 210.247 C 30.107 210.247,29.800 210.327,30.176 210.426 M42.677 211.914 C 42.681 212.773,42.761 213.079,42.854 212.593 C 42.948 212.107,42.944 211.404,42.847 211.031 C 42.749 210.657,42.672 211.055,42.677 211.914 M357.122 211.719 C 357.122 212.471,357.202 212.778,357.301 212.402 C 357.399 212.026,357.399 211.411,357.301 211.035 C 357.202 210.659,357.122 210.967,357.122 211.719 M36.419 213.672 C 36.419 214.424,36.499 214.731,36.597 214.355 C 36.696 213.979,36.696 213.364,36.597 212.988 C 36.499 212.612,36.419 212.920,36.419 213.672 M363.372 213.672 C 363.372 214.424,363.452 214.731,363.551 214.355 C 363.649 213.979,363.649 213.364,363.551 212.988 C 363.452 212.612,363.372 212.920,363.372 213.672 M31.938 213.558 C 32.424 213.651,33.127 213.647,33.501 213.550 C 33.874 213.452,33.477 213.375,32.617 213.380 C 31.758 213.384,31.452 213.464,31.938 213.558 M27.051 213.941 C 27.427 214.039,28.042 214.039,28.418 213.941 C 28.794 213.843,28.486 213.763,27.734 213.763 C 26.982 213.763,26.675 213.843,27.051 213.941 M371.391 213.948 C 371.877 214.042,372.580 214.038,372.954 213.940 C 373.327 213.842,372.930 213.766,372.070 213.770 C 371.211 213.775,370.905 213.855,371.391 213.948 M376.469 214.339 C 376.955 214.432,377.658 214.429,378.032 214.331 C 378.405 214.233,378.008 214.157,377.148 214.161 C 376.289 214.165,375.983 214.245,376.469 214.339 M386.809 215.234 C 386.809 215.986,386.890 216.294,386.988 215.918 C 387.086 215.542,387.086 214.927,386.988 214.551 C 386.890 214.175,386.809 214.482,386.809 215.234 M381.941 214.736 C 382.643 214.823,383.697 214.821,384.284 214.732 C 384.871 214.643,384.297 214.572,383.008 214.574 C 381.719 214.576,381.238 214.649,381.941 214.736 M180.469 217.383 C 181.198 218.135,181.882 218.750,181.989 218.750 C 182.097 218.750,181.588 218.135,180.859 217.383 C 180.131 216.631,179.446 216.016,179.339 216.016 C 179.232 216.016,179.740 216.631,180.469 217.383 M35.621 217.039 C 35.983 217.147,36.369 217.532,36.477 217.895 C 36.620 218.373,36.652 218.341,36.594 217.778 C 36.547 217.323,36.193 216.968,35.738 216.921 C 35.174 216.864,35.142 216.896,35.621 217.039 M369.438 217.073 C 369.924 217.167,370.627 217.163,371.001 217.065 C 371.374 216.967,370.977 216.891,370.117 216.895 C 369.258 216.900,368.952 216.980,369.438 217.073 M374.516 217.464 C 375.002 217.557,375.705 217.554,376.079 217.456 C 376.452 217.358,376.055 217.282,375.195 217.286 C 374.336 217.290,374.030 217.370,374.516 217.464 M379.785 217.847 C 380.161 217.946,380.776 217.946,381.152 217.847 C 381.528 217.749,381.221 217.669,380.469 217.669 C 379.717 217.669,379.409 217.749,379.785 217.847 M13.372 220.313 C 13.372 221.064,13.452 221.372,13.551 220.996 C 13.649 220.620,13.649 220.005,13.551 219.629 C 13.452 219.253,13.372 219.561,13.372 220.313 M31.744 236.608 C 32.337 236.698,33.216 236.696,33.697 236.603 C 34.177 236.510,33.691 236.437,32.617 236.440 C 31.543 236.443,31.150 236.519,31.744 236.608 M20.483 241.113 L 19.336 242.383 20.605 241.236 C 21.304 240.604,21.875 240.033,21.875 239.966 C 21.875 239.664,21.553 239.930,20.483 241.113 M42.294 246.094 C 42.294 247.061,42.370 247.456,42.463 246.973 C 42.556 246.489,42.556 245.698,42.463 245.215 C 42.370 244.731,42.294 245.127,42.294 246.094 M151.172 246.680 C 152.339 247.861,153.382 248.828,153.489 248.828 C 153.596 248.828,152.729 247.861,151.563 246.680 C 150.396 245.498,149.353 244.531,149.245 244.531 C 149.138 244.531,150.005 245.498,151.172 246.680 M149.414 248.828 C 150.472 249.902,151.426 250.781,151.533 250.781 C 151.641 250.781,150.863 249.902,149.805 248.828 C 148.747 247.754,147.793 246.875,147.686 246.875 C 147.578 246.875,148.356 247.754,149.414 248.828 M25.494 253.015 C 26.087 253.104,26.966 253.102,27.447 253.009 C 27.927 252.917,27.441 252.843,26.367 252.846 C 25.293 252.849,24.900 252.925,25.494 253.015 M363.911 255.398 C 363.802 255.574,364.231 255.642,364.864 255.549 C 365.498 255.456,366.016 255.312,366.016 255.229 C 366.016 254.931,364.104 255.085,363.911 255.398 M371.723 261.257 C 371.615 261.433,372.044 261.501,372.677 261.408 C 373.310 261.315,373.828 261.172,373.828 261.088 C 373.828 260.791,371.917 260.944,371.723 261.257 M24.708 265.039 C 24.712 265.898,24.792 266.204,24.886 265.718 C 24.979 265.232,24.976 264.529,24.878 264.156 C 24.780 263.782,24.704 264.180,24.708 265.039 M192.676 266.676 C 193.052 266.774,193.667 266.774,194.043 266.676 C 194.419 266.577,194.111 266.497,193.359 266.497 C 192.607 266.497,192.300 266.577,192.676 266.676 M205.957 266.676 C 206.333 266.774,206.948 266.774,207.324 266.676 C 207.700 266.577,207.393 266.497,206.641 266.497 C 205.889 266.497,205.581 266.577,205.957 266.676 M198.926 267.077 C 199.517 267.166,200.483 267.166,201.074 267.077 C 201.665 266.987,201.182 266.914,200.000 266.914 C 198.818 266.914,198.335 266.987,198.926 267.077 M349.716 268.359 C 349.716 269.326,349.792 269.722,349.885 269.238 C 349.978 268.755,349.978 267.964,349.885 267.480 C 349.792 266.997,349.716 267.393,349.716 268.359 M193.066 269.410 C 193.442 269.508,194.058 269.508,194.434 269.410 C 194.810 269.312,194.502 269.231,193.750 269.231 C 192.998 269.231,192.690 269.312,193.066 269.410 M205.566 269.410 C 205.942 269.508,206.558 269.508,206.934 269.410 C 207.310 269.312,207.002 269.231,206.250 269.231 C 205.498 269.231,205.190 269.312,205.566 269.410 M197.168 282.321 C 198.726 282.395,201.274 282.395,202.832 282.321 C 204.390 282.247,203.115 282.186,200.000 282.186 C 196.885 282.186,195.610 282.247,197.168 282.321 M41.406 285.352 C 41.406 286.104,41.475 286.719,41.559 286.719 C 41.643 286.719,41.783 286.104,41.871 285.352 C 41.959 284.600,41.890 283.984,41.718 283.984 C 41.547 283.984,41.406 284.600,41.406 285.352 M197.559 285.055 C 198.901 285.131,201.099 285.131,202.441 285.055 C 203.784 284.979,202.686 284.916,200.000 284.916 C 197.314 284.916,196.216 284.979,197.559 285.055 M59.961 296.484 C 61.019 297.559,61.973 298.438,62.080 298.438 C 62.187 298.438,61.410 297.559,60.352 296.484 C 59.293 295.410,58.340 294.531,58.232 294.531 C 58.125 294.531,58.903 295.410,59.961 296.484 M57.513 299.609 C 57.513 300.361,57.593 300.669,57.691 300.293 C 57.789 299.917,57.789 299.302,57.691 298.926 C 57.593 298.550,57.513 298.857,57.513 299.609 M342.685 304.297 C 342.685 305.264,342.761 305.659,342.854 305.176 C 342.947 304.692,342.947 303.901,342.854 303.418 C 342.761 302.935,342.685 303.330,342.685 304.297 M81.641 304.419 C 81.641 304.486,82.212 305.058,82.910 305.689 L 84.180 306.836 83.032 305.566 C 81.963 304.383,81.641 304.117,81.641 304.419 M316.968 305.566 L 315.820 306.836 317.090 305.689 C 317.788 305.058,318.359 304.486,318.359 304.419 C 318.359 304.117,318.037 304.383,316.968 305.566 M88.477 311.719 C 89.535 312.793,90.488 313.672,90.596 313.672 C 90.703 313.672,89.925 312.793,88.867 311.719 C 87.809 310.645,86.856 309.766,86.748 309.766 C 86.641 309.766,87.418 310.645,88.477 311.719 M311.118 311.816 L 309.180 313.867 311.230 311.929 C 312.358 310.863,313.281 309.940,313.281 309.878 C 313.281 309.586,312.919 309.911,311.118 311.816 M323.608 311.035 L 322.461 312.305 323.730 311.157 C 324.914 310.088,325.180 309.766,324.878 309.766 C 324.811 309.766,324.239 310.337,323.608 311.035 M325.872 312.500 C 325.872 313.252,325.952 313.560,326.051 313.184 C 326.149 312.808,326.149 312.192,326.051 311.816 C 325.952 311.440,325.872 311.748,325.872 312.500 M68.493 314.648 C 68.495 316.367,68.563 317.022,68.646 316.103 C 68.728 315.184,68.727 313.778,68.643 312.978 C 68.559 312.178,68.492 312.930,68.493 314.648 M350.561 313.379 L 349.414 314.648 350.684 313.501 C 351.382 312.870,351.953 312.299,351.953 312.232 C 351.953 311.930,351.631 312.196,350.561 313.379 M325.893 315.820 C 325.896 316.895,325.972 317.288,326.062 316.694 C 326.151 316.100,326.149 315.221,326.056 314.741 C 325.964 314.260,325.890 314.746,325.893 315.820 M93.359 316.138 C 93.359 316.205,93.931 316.776,94.629 317.407 L 95.898 318.555 94.751 317.285 C 93.682 316.102,93.359 315.836,93.359 316.138 M305.249 317.285 L 304.102 318.555 305.371 317.407 C 306.069 316.776,306.641 316.205,306.641 316.138 C 306.641 315.836,306.318 316.102,305.249 317.285 M330.859 320.508 C 329.911 321.475,329.222 322.266,329.330 322.266 C 329.437 322.266,330.301 321.475,331.250 320.508 C 332.199 319.541,332.887 318.750,332.780 318.750 C 332.672 318.750,331.808 319.541,330.859 320.508 M333.955 320.215 L 333.008 321.289 334.180 320.313 C 334.824 319.775,335.425 319.292,335.514 319.238 C 335.604 319.185,335.503 319.141,335.289 319.141 C 335.076 319.141,334.476 319.624,333.955 320.215 M325.519 322.461 C 325.521 323.965,325.591 324.532,325.676 323.722 C 325.760 322.911,325.759 321.681,325.673 320.987 C 325.586 320.294,325.517 320.957,325.519 322.461 M68.164 323.047 C 69.003 323.906,69.778 324.609,69.885 324.609 C 69.993 324.609,69.394 323.906,68.555 323.047 C 67.716 322.188,66.941 321.484,66.834 321.484 C 66.726 321.484,67.325 322.188,68.164 323.047 M72.060 324.121 C 74.759 326.928,75.391 327.378,75.391 326.497 C 75.391 326.247,75.268 326.164,75.119 326.313 C 74.969 326.463,73.607 325.394,72.092 323.937 L 69.336 321.289 72.060 324.121 M329.298 325.194 C 328.795 325.730,328.456 326.234,328.547 326.314 C 328.637 326.394,329.120 325.955,329.620 325.339 C 330.738 323.960,330.541 323.871,329.298 325.194 M306.937 328.809 C 307.176 331.321,307.329 331.525,307.377 329.395 C 307.401 328.267,307.281 327.344,307.110 327.344 C 306.938 327.344,306.860 328.003,306.937 328.809 M296.875 334.961 C 295.926 335.928,295.238 336.719,295.345 336.719 C 295.453 336.719,296.317 335.928,297.266 334.961 C 298.214 333.994,298.903 333.203,298.795 333.203 C 298.688 333.203,297.824 333.994,296.875 334.961 M88.789 336.328 C 88.789 337.510,88.862 337.993,88.952 337.402 C 89.041 336.812,89.041 335.845,88.952 335.254 C 88.862 334.663,88.789 335.146,88.789 336.328 M321.001 338.167 C 321.487 338.260,322.190 338.257,322.563 338.159 C 322.937 338.061,322.539 337.985,321.680 337.989 C 320.820 337.993,320.515 338.073,321.001 338.167 M78.032 339.339 C 78.518 339.432,79.221 339.429,79.594 339.331 C 79.968 339.233,79.570 339.157,78.711 339.161 C 77.852 339.165,77.546 339.245,78.032 339.339 M306.640 345.020 C 306.640 345.181,308.530 345.283,310.840 345.247 C 315.105 345.180,314.597 345.026,309.472 344.833 C 307.914 344.775,306.639 344.858,306.640 345.020 M322.363 345.191 C 322.739 345.289,323.354 345.289,323.730 345.191 C 324.106 345.093,323.799 345.013,323.047 345.013 C 322.295 345.013,321.987 345.093,322.363 345.191 M93.547 345.690 C 93.690 345.922,92.080 346.116,89.371 346.193 L 84.961 346.317 89.794 346.401 C 94.051 346.474,94.569 346.415,94.141 345.898 C 93.600 345.247,93.182 345.101,93.547 345.690 M78.032 346.370 C 78.518 346.463,79.221 346.460,79.594 346.362 C 79.968 346.264,79.570 346.188,78.711 346.192 C 77.852 346.197,77.546 346.277,78.032 346.370 M320.682 349.512 L 319.336 350.977 320.801 349.630 C 322.164 348.377,322.445 348.047,322.147 348.047 C 322.082 348.047,321.422 348.706,320.682 349.512 M296.973 356.519 C 297.349 356.618,297.964 356.618,298.340 356.519 C 298.716 356.421,298.408 356.341,297.656 356.341 C 296.904 356.341,296.597 356.421,296.973 356.519 M187.407 357.308 C 187.893 357.401,188.596 357.397,188.969 357.300 C 189.343 357.202,188.945 357.125,188.086 357.130 C 187.227 357.134,186.921 357.214,187.407 357.308 M211.235 357.308 C 211.721 357.401,212.424 357.397,212.798 357.300 C 213.171 357.202,212.773 357.125,211.914 357.130 C 211.055 357.134,210.749 357.214,211.235 357.308 M196.387 357.713 C 198.374 357.784,201.626 357.784,203.613 357.713 C 205.601 357.642,203.975 357.584,200.000 357.584 C 196.025 357.584,194.399 357.642,196.387 357.713 M286.626 361.214 C 287.112 361.307,287.815 361.304,288.188 361.206 C 288.562 361.108,288.164 361.032,287.305 361.036 C 286.445 361.040,286.140 361.120,286.626 361.214 M113.770 362.379 C 114.146 362.477,114.761 362.477,115.137 362.379 C 115.513 362.280,115.205 362.200,114.453 362.200 C 113.701 362.200,113.394 362.280,113.770 362.379 M186.816 367.457 C 187.192 367.555,187.808 367.555,188.184 367.457 C 188.560 367.359,188.252 367.278,187.500 367.278 C 186.748 367.278,186.440 367.359,186.816 367.457 M195.815 375.195 C 195.818 376.270,195.894 376.663,195.983 376.069 C 196.073 375.475,196.071 374.596,195.978 374.116 C 195.885 373.635,195.812 374.121,195.815 375.195 M202.863 377.539 C 202.864 379.043,202.935 379.610,203.019 378.800 C 203.104 377.989,203.103 376.759,203.016 376.066 C 202.930 375.372,202.861 376.035,202.863 377.539 M211.809 377.734 C 211.809 378.486,211.890 378.794,211.988 378.418 C 212.086 378.042,212.086 377.427,211.988 377.051 C 211.890 376.675,211.809 376.982,211.809 377.734 M215.753 379.492 C 215.755 380.996,215.826 381.563,215.910 380.753 C 215.995 379.943,215.993 378.712,215.907 378.019 C 215.821 377.325,215.751 377.988,215.753 379.492 M184.869 381.530 C 185.462 381.620,186.341 381.618,186.822 381.525 C 187.302 381.432,186.816 381.359,185.742 381.362 C 184.668 381.365,184.275 381.441,184.869 381.530 M182.129 389.722 C 182.505 389.821,183.120 389.821,183.496 389.722 C 183.872 389.624,183.564 389.544,182.813 389.544 C 182.061 389.544,181.753 389.624,182.129 389.722 \" stroke=\"none\" fill=\"#c99393\" fill-rule=\"evenodd\"></path></g></svg>\r\n\r\n<style>\r\n  svg {\r\n    display: none;\r\n  }\r\n\r\n  @media print {\r\n    svg {\r\n      display: block;\r\n      position: fixed;\r\n      right: 0;\r\n      top: 0;\r\n      width: 95px;\r\n      height: 95px;\r\n      filter: none;\r\n    }\r\n  }\r\n</style>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  \r\n  import { viewComponentValue, settingsData } from \"../stores/ui\";\r\n  import { onDestroy, onMount } from 'svelte';\r\n\r\n  let hours = \"99\", minutes = \"99\", seconds = \"99\";\r\n  let postfixTime = \"AM\";\r\n  let messageIndex = 0;\r\n  let greetings = [\r\n    \"Give me a moment while I figure out the time.\",\r\n    \"Let's start the day with a cup of hot coffee! Or do you prefer tea?\",\r\n    \"Go grab some food for now. Don't worry, I'll still be here.\",\r\n    \"Please enjoy the rest of the day! Don't forget about your health!!\",\r\n    \"Time to pack your stuff and head back home. We can continue tomorrow.\",\r\n    \"A well-rested worker is an efficient worker.\"\r\n  ];\r\n\r\n  let dashboardData = {\r\n\t\t\tcoursesNumber: 0,\r\n\t\t\tprofessorsNumber: 0,\r\n\t\t\troomsNumber: 0,\r\n\t\t\tprogramsNumber: 0,\r\n      subjectsNumber: 0,\r\n      schedulesNumber: 0,\r\n\t\t};\r\n\r\n  let viewComponentValueChange = (i) => {\r\n    viewComponentValue.set(i);\r\n  };\r\n\r\n  let timeTick = setInterval(() => {\r\n    const date = new Date();\r\n    if (date.getHours() >= 13) {\r\n      if (date.getHours() % 12 < 10) hours = \"0\" + date.getHours() % 12;\r\n      else hours = date.getHours() % 12;\r\n      postfixTime = \"PM\";\r\n    }\r\n    else if (date.getHours() % 12 == 0) {\r\n      hours = 12;\r\n      if (date.getHours() == 12) {\r\n        postfixTime = \"PM\";\r\n      } else postfixTime = \"AM\";\r\n    }\r\n    else {\r\n      if (date.getHours() % 12 < 10) hours = \"0\" + date.getHours() % 12;\r\n      else hours = date.getHours() % 12;\r\n      postfixTime = \"AM\";\r\n    }\r\n\r\n    if (date.getHours() >= 6 && date.getHours() <= 7) messageIndex = 1;\r\n    else if (date.getHours() >= 12 && date.getHours() < 13) messageIndex = 2;\r\n    else if (date.getHours() >= 18 && date.getHours() <= 20) messageIndex = 4;\r\n    else if (date.getHours() >= 21) messageIndex = 5;\r\n    else messageIndex = 3;\r\n\r\n    if (date.getMinutes() < 10) minutes = \"0\" + date.getMinutes(); \r\n    else minutes = date.getMinutes();\r\n\r\n    if (date.getSeconds() < 10) seconds = \"0\" + date.getSeconds();\r\n    else seconds = date.getSeconds();\r\n  }, 1000);\r\n\r\n  onMount(() => {\r\n    ipcRenderer.send(\"retrieve-dashboard-course\");\r\n    ipcRenderer.send(\"retrieve-dashboard-professor\");\r\n    ipcRenderer.send(\"retrieve-dashboard-room\");\r\n    ipcRenderer.send(\"retrieve-dashboard-program\");\r\n    ipcRenderer.send(\"retrieve-dashboard-subject\");\r\n    ipcRenderer.send(\"retrieve-dashboard-schedule\");\r\n    ipcRenderer.send(\"retrieve-settings-data\");\r\n  });\r\n\r\n  ipcRenderer.on(\"retrieve-dashboard-course\", (event, res) => {\r\n    dashboardData.coursesNumber = res;\r\n    ipcRenderer.removeAllListeners(\"retrieve-dashboard-course\");\r\n  });\r\n  ipcRenderer.on(\"retrieve-dashboard-professor\", (event, res) => {\r\n    dashboardData.professorsNumber = res;\r\n    ipcRenderer.removeAllListeners(\"retrieve-dashboard-professor\");\r\n  });\r\n  ipcRenderer.on(\"retrieve-dashboard-room\", (event, res) => {\r\n    dashboardData.roomsNumber = res;\r\n    ipcRenderer.removeAllListeners(\"retrieve-dashboard-room\");\r\n  });\r\n  ipcRenderer.on(\"retrieve-dashboard-program\", (event, res) => {\r\n    dashboardData.programsNumber = res;\r\n    ipcRenderer.removeAllListeners(\"retrieve-dashboard-program\");\r\n  });\r\n  ipcRenderer.on(\"retrieve-dashboard-subject\", (event, res) => {\r\n    console.log(res);\r\n    dashboardData.subjectsNumber = res;\r\n    ipcRenderer.removeAllListeners(\"retrieve-dashboard-subject\");\r\n  });\r\n  ipcRenderer.on(\"retrieve-dashboard-schedule\", (event, res) => {\r\n    dashboardData.schedulesNumber = res;\r\n    ipcRenderer.removeAllListeners(\"retrieve-dashboard-schedule\");\r\n  });    \r\n  \r\n\r\n  ipcRenderer.on(\"retrieve-settings-data\", (event, res) => {\r\n    console.log(res)\r\n    $settingsData.uid = res[0].uid;\r\n    $settingsData.schoolYear = res[0].schoolYear;\r\n    $settingsData.schoolSemester = res[0].schoolSemester;\r\n    $settingsData.systemPassword = res[0].systemPassword;\r\n    ipcRenderer.removeAllListeners(\"retrieve-settings-data\");\r\n  });\r\n\r\n  onDestroy(async () => {\r\n   clearInterval(timeTick);\r\n  });\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>.dotSystems - Dashboard</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col\">\r\n  <div class=\"h-auto w-full bg-gray-200 rounded-md drop-shadow-md flex flex-col justify-end items-end\">\r\n    <div class=\"h-52 w-full p-4 flex flex-col justify-end\">\r\n      <h1 class=\"text-4xl font-light mb-1\">Welcome, it is currently {hours}:{minutes}:{seconds} {postfixTime}.</h1>\r\n      <h2 class=\"mb-2 text-gray-700\">A.Y. {$settingsData.schoolYear} - {parseInt($settingsData.schoolYear) + 1} {$settingsData.schoolSemester == 0 ? \"1st Sem\" : $settingsData.schoolSemester == 1 ? \"2nd Sem\" : \"Summer\"} · \"{greetings[messageIndex]}\"</h2>\r\n    </div>\r\n    <nav class=\"grid grid-flow-col w-full self-center bg-gray-300\">\r\n      <button on:click={() => viewComponentValueChange(1)} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Courses</button>\r\n      <button on:click={() => viewComponentValueChange(2)} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Rooms</button>\r\n      <button on:click={() => viewComponentValueChange(3)} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Professors</button>\r\n      <button on:click={() => viewComponentValueChange(4)} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Programs</button>\r\n      <button on:click={() => viewComponentValueChange(6)} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Schedules</button>\r\n      <button on:click={() => viewComponentValueChange(7)} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Professor Overview</button>\r\n    </nav>\r\n  </div>\r\n\r\n  <section class=\"flex flex-row justify-center flex-wrap\">\r\n\r\n    <div class=\"w-64 h-auto bg-gray-200 m-6 flex flex-col rounded-md drop-shadow-md\">\r\n      <h1 class=\"w-full py-4 bg-gray-300 text-3xl font-light text-center rounded-t-md drop-shadow-md\">Courses</h1>\r\n      <h2 class=\"text-center py-14 text-7xl font-thin\">{ dashboardData.coursesNumber }</h2>\r\n      <h3 class=\"w-full text-center text-2xl font-light py-2\">Registered</h3>\r\n    </div>\r\n\r\n    <div class=\"w-64 h-auto bg-gray-200 m-6 flex flex-col rounded-md drop-shadow-md\">\r\n      <h1 class=\"w-full py-4 bg-gray-300 text-3xl font-light text-center rounded-t-md drop-shadow-md\">Professors</h1>\r\n      <h2 class=\"text-center py-14 text-7xl font-thin\">{ dashboardData.professorsNumber }</h2>\r\n      <h3 class=\"w-full text-center text-2xl font-light py-2\">Registered</h3>\r\n    </div>\r\n\r\n    <div class=\"w-64 h-auto bg-gray-200 m-6 flex flex-col rounded-md drop-shadow-md\">\r\n      <h1 class=\"w-full py-4 bg-gray-300 text-3xl font-light text-center rounded-t-md drop-shadow-md\">Rooms</h1>\r\n      <h2 class=\"text-center py-14 text-7xl font-thin\">{ dashboardData.roomsNumber }</h2>\r\n      <h3 class=\"w-full text-center text-2xl font-light py-2\">Registered</h3>\r\n    </div>\r\n\r\n    <div class=\"w-64 h-auto bg-gray-200 m-6 flex flex-col rounded-md drop-shadow-md\">\r\n      <h1 class=\"w-full py-4 bg-gray-300 text-3xl font-light text-center rounded-t-md drop-shadow-md\">Programs</h1>\r\n      <h2 class=\"text-center py-14 text-7xl font-thin\">{ dashboardData.programsNumber }</h2>\r\n      <h3 class=\"w-full text-center text-2xl font-light py-2\">Registered</h3>\r\n    </div>\r\n\r\n    <div class=\"w-64 h-auto bg-gray-200 m-6 flex flex-col rounded-md drop-shadow-md\">\r\n      <h1 class=\"w-full py-4 bg-gray-300 text-3xl font-light text-center rounded-t-md drop-shadow-md\">Schedules</h1>\r\n      <h2 class=\"text-center py-14 text-7xl font-thin\">{ dashboardData.schedulesNumber }</h2>\r\n      <h3 class=\"w-full text-center text-2xl font-light py-2\">Registered</h3>\r\n    </div>\r\n\r\n  </section>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { selectedData, editWindowStatus } from '../stores/ui';\r\n  import { onMount, onDestroy } from 'svelte';\r\n\r\n  let courseData = [];\r\n  onMount(() => {\r\n    ipcRenderer.send(\"retrieve-course-data\");\r\n  });\r\n\r\n  ipcRenderer.on(\"retrieve-course-data\", (event, res) => {\r\n    courseData = res;\r\n    console.log(courseData);\r\n  });\r\n\r\n  let search = \"\";\r\n\r\n  let searchData = (search) => {\r\n    console.log('Search Data');\r\n    console.log('search ' + search);    \r\n    ipcRenderer.send(\"retrieve-course-data\" , search);\r\n  };\r\n\r\n  let selectData = (data) => {\r\n    $selectedData = data;\r\n    editWindowStatus.set(true);\r\n  }\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"retrieve-course-data\");\r\n  })\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>.dotSystems - Courses</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n  <div class=\"w-full flex\">\r\n    <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search\" id=\"search\" placeholder=\"Search Course\" />\r\n    <button on:click={searchData(search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n  </div>\r\n  {#if courseData.length != 0}\r\n    {#each courseData as course (course._id)}\r\n      <button on:click={() => selectData(course)} class=\"card h-14 w-full border-b flex flex-row justify-between items-center hover:bg-gray-100 active:bg-gray-200\">\r\n        <div class=\"w-full h-full grid items-center\" style=\"grid-template-columns: 50% auto auto\">\r\n          <h1 class=\"text-xl font-light mx-6 text-left whitespace-nowrap overflow-hidden text-ellipsis\" title=\"{course.name} [{course.code}]\">{course.name} [{course.code}]</h1>\r\n          <h1 class=\"text-xl font-light text-left\">Units: {course.units}</h1>\r\n          <h1 class=\"text-xl font-light text-left\">Hours: {course.hours}</h1>\r\n        </div>\r\n      </button>\r\n    {/each}\r\n  {:else}\r\n    <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n  {/if}\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { selectedData } from '../stores/ui';\r\n  import { onMount, onDestroy } from 'svelte';\r\n\r\n  let roomData = [];\r\n  onMount(() => {\r\n    ipcRenderer.send(\"retrieve-room-data\");\r\n  });\r\n\r\n  let search = \"\";\r\n\r\n  let searchData = (search) => {\r\n    console.log('Search Data');\r\n    console.log('search ' + search);    \r\n    ipcRenderer.send(\"retrieve-room-data\" , search);\r\n  };\r\n\r\n  ipcRenderer.on(\"retrieve-room-data\", (event, res) => {\r\n    roomData = res;\r\n    console.log(roomData);\r\n  });\r\n\r\n  let selectData = (data) => {\r\n    $selectedData = data;\r\n  }\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"retrieve-room-data\");\r\n  })\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>.dotSystems - Rooms</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n  <div class=\"w-full flex\">\r\n    <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search\" id=\"search\" placeholder=\"Search Room\" />\r\n    <button on:click={searchData(search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n  </div>  \r\n  {#if roomData.length != 0}\r\n    {#each roomData as room (room._id)}\r\n      <button on:click={() => selectData(room)} class=\"card h-14 w-full border-b flex flex-row justify-between items-center hover:bg-gray-100 active:bg-gray-200\">\r\n        <h1 class=\"text-xl font-light m-6\">{room.name}</h1>\r\n        <h2 class=\"p-6 text-3xl font-light -mt-1\">></h2>\r\n      </button>\r\n    {/each}\r\n  {:else}\r\n    <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n  {/if}\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { selectedData } from '../stores/ui';\r\n  import { onMount, onDestroy } from 'svelte';\r\n\r\n  let professorData = [];\r\n  onMount(() => {\r\n    ipcRenderer.send(\"retrieve-professor-data\");\r\n  });\r\n\r\n  let search = \"\";\r\n\r\n  let searchData = (search) => {\r\n    console.log('Search Data');\r\n    console.log('search ' + search);    \r\n    ipcRenderer.send(\"retrieve-professor-data\" , search);\r\n  };\r\n\r\n  ipcRenderer.on(\"retrieve-professor-data\", (event, res) => {\r\n    console.log(res);\r\n    console.log(\"search\" + search);\r\n    professorData = res;\r\n    console.log(professorData);\r\n  });\r\n\r\n  let selectData = (data) => {\r\n    $selectedData = data;\r\n  }\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"retrieve-professor-data\");\r\n  })\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>.dotSystems - Professor</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n  <div class=\"w-full flex\">\r\n    <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search professor\" id=\"search\" placeholder=\"Search Professor By Name\" />\r\n    <button on:click={searchData(search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n  </div>\r\n  {#if professorData.length != 0}\r\n  <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n    <table class=\"w-full max-w-screen-xl drop-shadow-md\">\r\n      <tr>\r\n        <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Professor</th>\r\n      </tr>\r\n    {#each professorData as professor (professor._id)}\r\n    <tr>\r\n      <td on:click={() => selectData(professor)}\r\n        class=\"card h-14 w-full border-b flex flex-row justify-between items-center hover:bg-gray-100 active:bg-gray-200\"\r\n        >[{professor.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {professor.name.last} - {professor.name.first}] {professor.employment.status}</td>\r\n    </tr>\r\n    {/each}\r\n  </table>\r\n</div>\r\n{:else}\r\n<h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n{/if}\r\n      <!-- <button on:click={() => selectData(professor)} class=\"card h-14 w-full border-b flex flex-row justify-between items-center hover:bg-gray-100 active:bg-gray-200\">\r\n        <h1 class=\"text-xl font-light m-6\">{professor.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {professor.name.last}, {professor.name.first} - [\r\n          {\r\n            professor.status == \"REGULAR\" ? \"Regular\" :\r\n            professor.status == \"PART TIME\" ? \"Part Time\" :\r\n            professor.status == \"TEMPORARY\" ? \"Temporary\" :\r\n            \"\"\r\n          } - {professor.employment.status}]</h1>\r\n        <h2 class=\"p-6 text-3xl font-light -mt-1\">></h2>\r\n      </button>\r\n    {/each} -->\r\n  <!-- {:else}\r\n    <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n  {/if} -->\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { selectedData } from '../stores/ui';\r\n  import { onMount, onDestroy } from 'svelte';\r\n\r\n  let programData = [];\r\n\r\n  onMount(() => {\r\n    ipcRenderer.send(\"retrieve-program-data\");\r\n  });\r\n\r\n  let search = \"\";\r\n\r\n  let searchData = (search) => {  \r\n    ipcRenderer.send(\"retrieve-program-data\" , search);\r\n  };\r\n\r\n  ipcRenderer.on(\"retrieve-program-data\", (event, res) => {\r\n    programData = res;\r\n  });\r\n\r\n  let selectData = (data) => {\r\n    $selectedData = data;\r\n  }\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"retrieve-program-data\");\r\n  })\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>.dotSystems - Programs</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n  <div class=\"w-full flex\">\r\n    <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search\" id=\"search\" placeholder=\"Search Program\" />\r\n    <button on:click={searchData(search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n  </div>  \r\n\r\n  {#if programData.length != 0}\r\n    <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n      <table class=\"w-full max-w-screen-xl drop-shadow-md\">\r\n        <tr>\r\n          <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Programs</th>\r\n        </tr>\r\n        {#each programData as program (program._id)}\r\n        <tr>\r\n          <td on:click={() => selectData(program)}\r\n            class=\"card h-14 w-full border-b flex flex-row justify-between items-center hover:bg-gray-100 active:bg-gray-200\"\r\n            >[{program.acronym} {program.year} - {program.section}] {program.name} {program.year} - {program.section}</td>\r\n        </tr>\r\n        {/each}\r\n      </table>\r\n    </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n  {/if}\r\n  \r\n</div>","<script>\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import { selectedData , editWindowStatus, deleteWindowScheduleStatus, deleteWindowStatus, tbdData , } from '../stores/ui';\r\n    import { onMount, onDestroy } from 'svelte';\r\n    let scheduleData , search = \"\";\r\n  \r\n    let courseOrder = 0;\r\n\r\n    let filterSubjectsData = (search = '') => {\r\n\r\n        ipcRenderer.send(\"retrieve-subject-data\" , search);\r\n    };\r\n\r\n    let editSelected = () => {\r\n        console.log($selectedData);\r\n        editWindowStatus.set(true);\r\n    }\r\n\r\n    let tbdSelected = (tbd) => {\r\n        tbdData.set(tbd);\r\n        deleteWindowScheduleStatus.set(true);\r\n    }\r\n\r\n    let exportExcel = () => {\r\n        ipcRenderer.send(\"export-to-excel\", $selectedData);\r\n    }\r\n\r\n    onMount(() => {\r\n        ipcRenderer.send(\"retrieve-subject-data\");\r\n    });\r\n\r\n    ipcRenderer.on(\"retrieve-subject-data\", (event, res) => {\r\n      scheduleData = res;\r\n      console.log(scheduleData);\r\n    });\r\n  \r\n    let selectData = (data) => {\r\n      $selectedData = data;\r\n    }\r\n  \r\n    onDestroy(() => {\r\n      ipcRenderer.removeAllListeners(\"retrieve-subject-data\");\r\n    })\r\n  </script>\r\n  \r\n  <svelte:head>\r\n    <title>.dotSystems - Subjects</title>\r\n  </svelte:head>\r\n  \r\n<div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n    <div class=\"w-full flex\">\r\n        <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search\" id=\"search\" placeholder=\"Search Subject\" />\r\n        <button on:click={filterSubjectsData(search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n    </div>\r\n    {#if scheduleData}\r\n    {#if scheduleData.length != 0}\r\n      <div class=\"w-full p-2 flex justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen drop-shadow-md\">\r\n          <tr>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Subject</th>\r\n          </tr>\r\n          {#each scheduleData as schedule (schedule._id)}\r\n            <tr on:click={() => tbdSelected(schedule)}>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.name}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n  {/if}\r\n</div>","<script>\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import { selectedData , editWindowStatus, deleteWindowScheduleStatus, deleteWindowStatus, tbdData , } from '../stores/ui';\r\n    import { onMount, onDestroy } from 'svelte';\r\n    let scheduleData , search = \"\";\r\n  \r\n    let courseOrder = 0;\r\n\r\n    let filterSubjectsData = (course_filter = 0 , search = '') => {\r\n        if(course_filter == courseOrder) course_filter = 0;\r\n        courseOrder = course_filter;\r\n        ipcRenderer.send(\"retrieve-schedule-data\", courseOrder , search);\r\n    };\r\n\r\n    let editSelected = () => {\r\n        editWindowStatus.set(true);\r\n    }\r\n\r\n    let tbdSelected = (tbd) => {\r\n        tbdData.set(tbd);\r\n        deleteWindowScheduleStatus.set(true);\r\n    }\r\n\r\n    let exportExcel = () => {\r\n        ipcRenderer.send(\"export-to-excel\", $selectedData);\r\n    }\r\n\r\n    onMount(() => {\r\n      ipcRenderer.send(\"retrieve-schedule-data\");\r\n    });\r\n\r\n    ipcRenderer.on(\"retrieve-schedule-data\", (event, res) => {\r\n      scheduleData = res;\r\n    });\r\n  \r\n    let selectData = (data) => {\r\n      $selectedData = data;\r\n    }\r\n  \r\n    onDestroy(() => {\r\n      ipcRenderer.removeAllListeners(\"retrieve-schedule-data\");\r\n    })\r\n  </script>\r\n  \r\n  <svelte:head>\r\n    <title>.dotSystems - Schedules</title>\r\n  </svelte:head>\r\n  \r\n<div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n    <div class=\"w-full flex\">\r\n        <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search\" id=\"search\" placeholder=\"Search By Subject / Course / Professor / Program / Room\" />\r\n        <button on:click={filterSubjectsData( courseOrder , search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n    </div>\r\n    {#if scheduleData}\r\n    {#if scheduleData.length != 0}\r\n      <div class=\"w-full p-2 flex justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen drop-shadow-md\">\r\n          <tr>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Professor</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">A.Y.</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Semester</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Type</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Day</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Time</th>\r\n            <!-- <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course Code</th> -->\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">\r\n                <span style=\"float:left\">\r\n                    Course\r\n                </span>\r\n                \r\n                <button on:click={() => filterSubjectsData(-1 , search)} style=\"float:right\" class=\"border-none px-1 drop-shadow-md font-light bg-red-800 active:bg-red-900 hover:bg-red-700 active:text-white\"><span class=\"border-none material-icons\">↓</span></button>\r\n                <button on:click={() => filterSubjectsData(1 , search)} style=\"float:right\" class=\"border-none px-1 drop-shadow-md font-light bg-red-800 active:bg-red-900 hover:bg-red-700 active:text-white\"><span class=\"border-none material-icons\">↑</span></button>\r\n            </th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">\r\n              <span style=\"float:left\">\r\n                    Program\r\n                </span>\r\n                \r\n                <button on:click={() => filterSubjectsData(-1 , search)} style=\"float:right\" class=\"border-none px-1 drop-shadow-md font-light bg-red-800 active:bg-red-900 hover:bg-red-700 active:text-white\"><span class=\"border-none material-icons\">↓</span></button>\r\n                <button on:click={() => filterSubjectsData(1 , search)} style=\"float:right\" class=\"border-none px-1 drop-shadow-md font-light bg-red-800 active:bg-red-900 hover:bg-red-700 active:text-white\"><span class=\"border-none material-icons\">↑</span></button>\r\n              </th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Room</th>\r\n          </tr>\r\n          {#each scheduleData as schedule (schedule._id)}\r\n            <tr on:click={() => tbdSelected(schedule)}>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.professorData.name.last} {schedule.professorData.name.first}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.year} - {parseInt(schedule.school.year) + 1}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.semester == 0 ? \"1st Sem\" : schedule.school.semester == 1 ? \"2nd Sem\" : \"Summer\"}</td>              \r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.type == \"REGULAR\" ? \"Regular\" :\r\n                  schedule.type == \"SUBSTITUTE\" ? \"Substitute\" :\r\n                  schedule.type == \"TEMPORARY SUBSTITUTE\" ? \"Temporary Substitute\" :\r\n                  \"\"\r\n                }\r\n              </td>              \r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.day == 0 ? \"Monday\" :\r\n                  schedule.day == 1 ? \"Tuesday\" :\r\n                  schedule.day == 2 ? \"Wednesday\" :\r\n                  schedule.day == 3 ? \"Thursday\" :\r\n                  schedule.day == 4 ? \"Friday\" :\r\n                  schedule.day == 5 ? \"Saturday\" :\r\n                  \"Sunday\"\r\n                }\r\n              </td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.start.hours}:{schedule.time.start.minutes} - {schedule.time.end.hours}:{schedule.time.end.minutes}</td>\r\n              <!-- <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.name}</td> -->\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.courseData.name}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.programData.acronym} {schedule.programData.year} - {schedule.programData.section}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.roomData.name}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n  {/if}\r\n</div>\r\n","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { settingsWindowStatus, settingsData } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  export let headerDisabled;\r\n\r\n  let currentSettingsData = {\r\n    uid: $settingsData.uid,\r\n    schoolYear: $settingsData.schoolYear,\r\n    schoolSemester: $settingsData.schoolSemester,\r\n  };\r\n\r\n  let settingsWindowStatusChange = () => settingsWindowStatus.set(!$settingsWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    headerDisabled = true;\r\n    ipcRenderer.send(\"edit-data-settings\", currentSettingsData);\r\n  };\r\n\r\n  ipcRenderer.on(\"edit-data-settings\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        $settingsData.schoolYear = currentSettingsData.schoolYear;\r\n        $settingsData.schoolSemester = currentSettingsData.schoolSemester;\r\n      }\r\n      message = status.message;\r\n      windowDisabled = false;\r\n      headerDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"edit-data-settings\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <p class=\"px-2 mx-2 mt-2 rounded-md font-light\">Current School Year:</p>\r\n  <div class=\"w-full flex -my-2\">\r\n    <input bind:value={currentSettingsData.schoolYear} disabled={windowDisabled} type=\"text\" class=\"p-2 w-full drop-shadow-md ml-2 my-2 rounded-md font-light\" name=\"Year\" id=\"settings.year\" placeholder=\"20XX\" oninput=\"this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\..*/g, '$1');\" />\r\n    <p class=\"p-2 w-full drop-shadow-md my-2 mr-2 rounded-md font-light\">- {parseInt(currentSettingsData.schoolYear) + 1 || \"0\"}</p>\r\n  </div>\r\n  <p class=\"px-2 mx-2 mt-2 rounded-md font-light\">Current School Semester:</p>\r\n  <select bind:value={currentSettingsData.schoolSemester} disabled={windowDisabled} class=\"px-4 py-1 mx-2 mb-2 drop-shadow-md rounded-md font-light\" name=\"Semester\" id=\"settings.semester\">\r\n    <option value=\"0\" class=\"font-light\">1st Semester</option>\r\n    <option value=\"1\" class=\"font-light\">2nd Semester</option>\r\n    <option value=\"2\" class=\"font-light\">Summer Semester</option>\r\n  </select>\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={settingsWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { onDestroy } from \"svelte\";\r\n  import { settingsWindowStatus, settingsData } from \"../../stores/ui\";\r\n  let message = \"\", windowDisabled = false, fieldDisabled = false;\r\n  export let headerDisabled;\r\n\r\n  let currentSettingsData = {\r\n    uid: $settingsData.uid,\r\n    systemPassword: $settingsData.systemPassword,\r\n    oldSystemPassword: \"\",\r\n    newSystemPassword: \"\",\r\n    confirmNewSystemPassword: \"\"\r\n  };\r\n\r\n  let settingsWindowStatusChange = () => settingsWindowStatus.set(!$settingsWindowStatus);\r\n  let saveData = () => {\r\n    windowDisabled = true;\r\n    headerDisabled = true;\r\n    ipcRenderer.send(\"edit-data-password\", currentSettingsData);\r\n  };\r\n\r\n  ipcRenderer.on(\"edit-data-password\", (event, status) => {\r\n    setTimeout(() => {\r\n      if (status.success == true) {\r\n        $settingsData.systemPassword = currentSettingsData.newSystemPassword;\r\n      }\r\n      message = status.message;\r\n      windowDisabled = false;\r\n      headerDisabled = false;\r\n    }, 2000);\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"edit-data-settings\");\r\n  })\r\n</script>\r\n\r\n<div class=\"w-full h-full flex flex-col\">\r\n  <p class=\"px-2 mx-2 mt-2 rounded-md font-light\">Enter Old Password:</p>\r\n  <div class=\"w-full flex -my-2\">\r\n    <input bind:value={currentSettingsData.oldSystemPassword} disabled={windowDisabled} type=\"password\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Password\" id=\"settings.password\" placeholder=\"******\" />\r\n  </div>\r\n  <p class=\"px-2 mx-2 mt-2 rounded-md font-light\">New System Password:</p>\r\n  <div class=\"w-full flex -my-2\">\r\n    <input bind:value={currentSettingsData.newSystemPassword} disabled={windowDisabled} type=\"password\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Password\" id=\"settings.password\" placeholder=\"******\" />\r\n  </div>\r\n  <p class=\"px-2 mx-2 mt-2 rounded-md font-light\">Confirm New System Password:</p>\r\n  <div class=\"w-full flex -my-2\">\r\n    <input bind:value={currentSettingsData.confirmNewSystemPassword} disabled={windowDisabled} type=\"password\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Password\" id=\"settings.password\" placeholder=\"******\" />\r\n  </div>\r\n  <p class=\"w-full text-center font-light m-2\">{message}</p>\r\n</div>\r\n\r\n<div class=\"flex flex-row justify-end\">\r\n  <button on:click={settingsWindowStatusChange} disabled={windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Close</button>\r\n  <button on:click={saveData} disabled={fieldDisabled || windowDisabled} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Save</button>\r\n</div>","<script>\r\n  import SettingsSchool from \"./SettingsWindowViews/SettingsSchool.svelte\";\r\n  import SettingsPassword from \"./SettingsWindowViews/SettingsPassword.svelte\";\r\n  import { settingsWindowStatus } from \"../stores/ui\";\r\n  import { fly, fade } from \"svelte/transition\";\r\n\r\n  let headerOptions = 0;\r\n  let headerDisabled = false;\r\n</script>\r\n\r\n{#if $settingsWindowStatus}\r\n  <div transition:fade={{duration: 100}} class=\"bg-black fixed z-10 w-screen h-screen bg-opacity-20 flex justify-start px-6 pb-4 items-end backdrop-filter backdrop-blur-sm\" >\r\n\r\n    <div transition:fly={{y: 200, duration: 250}} class=\"z-20 drop-shadow-md bg-white fixed flex flex-col rounded-md\" style=\"width: 28rem; height: 32rem;\">\r\n      <div class=\"grid bg-red-800 rounded-t-md drop-shadow-md\" style=\"grid-template-columns: 1fr auto 1fr\">\r\n        <div />\r\n        <h1 class=\"w-full p-2 text-2xl font-light text-center text-white\">System Settings</h1>\r\n        <div />\r\n      </div>\r\n      <nav class=\"grid grid-flow-col w-full self-center bg-gray-300 drop-shadow-md\">\r\n        <button disabled={headerDisabled} class:border-gray-400={headerOptions == 0} on:click={() => {headerOptions = 0}} class=\"p-1 border-b-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">School</button>\r\n        <button disabled={headerDisabled} class:border-gray-400={headerOptions == 1} on:click={() => {headerOptions = 1}} class=\"p-1 border-b-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Password</button>\r\n      </nav>\r\n\r\n\r\n      {#if headerOptions == 0}\r\n        <SettingsSchool bind:headerDisabled />\r\n      {:else if headerOptions == 1}\r\n        <SettingsPassword />\r\n      {/if}\r\n    </div>\r\n\r\n  </div>\r\n{/if}","<div class=\"w-screen h-screen bg-red-800 fixed z-50 flex flex-col justify-center items-center\">\r\n  <svg id=\"svg\" class=\"h-72 w-72 m-4 drop-shadow-md\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0, 0, 400,400\"><g id=\"svgg\"><path id=\"path0\" d=\"M183.789 0.423 C 134.727 4.908,92.694 24.420,58.557 58.557 C -38.913 156.026,-11.096 320.157,113.086 380.303 C 156.602 401.380,207.496 405.861,254.252 392.734 C 329.911 371.491,386.697 306.989,398.029 229.418 C 414.396 117.391,335.823 14.786,223.220 1.141 C 215.335 0.186,191.193 -0.254,183.789 0.423 M201.563 12.648 C 201.563 12.944,201.167 13.449,200.684 13.770 C 199.807 14.352,199.805 14.378,199.941 23.465 C 200.084 32.996,200.234 34.055,201.544 34.756 C 203.132 35.606,202.315 35.938,198.633 35.938 C 194.840 35.938,194.268 35.686,195.779 34.683 C 196.624 34.121,196.634 33.996,196.531 25.277 C 196.416 15.575,196.263 14.441,194.998 13.872 C 193.167 13.049,194.063 12.533,197.559 12.400 C 199.438 12.329,201.108 12.234,201.270 12.190 C 201.431 12.146,201.563 12.352,201.563 12.648 M215.962 13.079 C 224.378 13.726,223.600 13.311,223.256 16.975 C 222.906 20.714,221.641 21.073,220.732 17.690 C 220.206 15.732,219.091 14.844,217.157 14.844 L 215.738 14.844 215.512 17.285 C 214.181 31.635,214.258 35.547,215.868 35.547 C 216.164 35.547,216.406 35.831,216.406 36.179 C 216.406 36.738,215.961 36.779,212.598 36.534 C 208.288 36.220,207.583 35.887,209.324 34.987 C 209.991 34.643,210.623 33.968,210.730 33.489 C 210.972 32.406,212.109 17.885,212.109 15.880 L 212.109 14.412 210.059 14.530 C 208.048 14.646,207.989 14.685,207.031 16.503 C 205.543 19.330,204.085 19.220,204.434 16.309 C 204.570 15.181,204.682 13.773,204.684 13.180 C 204.687 12.114,204.709 12.105,206.738 12.315 C 207.866 12.431,212.017 12.775,215.962 13.079 M191.207 12.961 C 191.907 13.713,191.507 17.787,190.723 17.898 C 190.089 17.988,189.745 17.759,189.483 17.071 C 187.963 13.073,181.690 13.829,181.653 18.014 C 181.635 20.056,182.891 21.387,186.302 22.938 C 191.520 25.311,192.969 26.924,192.969 30.358 C 192.969 34.931,190.300 36.781,183.485 36.933 C 181.074 36.987,178.368 37.203,177.471 37.413 C 175.602 37.850,175.497 37.766,171.354 32.528 C 168.706 29.180,168.120 28.810,166.000 29.149 C 164.616 29.371,164.423 29.519,164.597 30.230 C 164.708 30.684,165.006 32.285,165.260 33.789 C 165.814 37.064,166.197 37.891,167.159 37.891 C 168.257 37.891,168.512 39.015,167.467 39.243 C 165.870 39.592,161.971 40.234,161.452 40.234 C 160.705 40.234,160.821 39.570,161.725 38.666 C 162.221 38.169,162.442 37.557,162.322 37.006 C 162.217 36.526,161.508 32.529,160.746 28.125 C 159.210 19.252,158.946 18.359,157.863 18.359 C 156.749 18.359,156.478 17.239,157.533 16.998 C 161.701 16.046,167.988 15.207,169.383 15.416 C 174.719 16.217,176.105 23.197,171.635 26.761 L 170.548 27.628 171.599 28.179 C 172.177 28.482,173.926 30.207,175.485 32.012 C 179.003 36.085,179.297 36.209,179.297 33.626 C 179.297 31.769,179.360 31.641,180.273 31.641 C 180.902 31.641,181.250 31.860,181.250 32.257 C 181.250 34.866,186.682 36.148,188.793 34.037 C 191.426 31.404,189.623 28.224,183.905 25.413 C 174.525 20.803,177.491 12.046,188.221 12.669 C 189.800 12.761,191.144 12.892,191.207 12.961 M229.269 14.590 C 231.839 15.080,232.687 15.755,231.291 16.198 C 229.955 16.622,229.997 17.745,231.529 22.466 L 233.011 27.032 235.792 23.575 C 239.012 19.573,239.428 18.629,238.449 17.548 C 237.412 16.401,237.960 16.261,241.391 16.795 C 244.772 17.320,245.373 17.916,243.364 18.748 C 242.686 19.029,240.415 21.324,237.943 24.227 L 233.689 29.222 233.033 32.789 C 232.323 36.655,232.439 37.719,233.614 38.092 C 234.431 38.352,234.677 39.453,233.917 39.453 C 232.762 39.453,226.718 38.175,226.392 37.861 C 226.170 37.648,226.494 37.347,227.217 37.095 C 228.693 36.580,229.117 35.674,229.718 31.752 L 230.191 28.661 228.162 22.381 C 226.980 18.722,225.816 15.814,225.372 15.412 C 223.767 13.960,224.813 13.740,229.269 14.590 M164.258 17.453 C 162.442 17.740,162.410 17.933,163.335 22.990 L 164.204 27.743 165.598 27.494 C 169.665 26.767,170.883 25.401,170.626 21.855 C 170.359 18.167,168.382 16.800,164.258 17.453 M153.606 20.775 C 153.962 22.104,154.165 23.335,154.057 23.510 C 153.653 24.163,152.412 23.795,151.782 22.834 C 150.654 21.112,145.194 21.214,143.277 22.993 C 143.018 23.233,145.005 30.682,145.445 31.122 C 146.081 31.758,150.000 30.012,150.223 28.994 C 150.629 27.139,150.741 26.953,151.455 26.953 C 152.157 26.953,154.106 32.563,153.657 33.290 C 153.291 33.882,151.974 33.582,151.563 32.813 C 151.085 31.921,150.292 31.848,147.829 32.468 C 145.761 32.989,145.764 32.963,147.130 37.875 C 148.437 42.578,148.219 42.404,151.617 41.449 C 155.018 40.492,155.859 39.667,155.859 37.288 C 155.859 33.589,157.845 34.511,158.610 38.565 C 159.176 41.563,160.169 40.900,151.480 43.332 C 143.917 45.449,142.634 45.549,144.185 43.898 L 145.069 42.957 142.615 34.272 C 140.012 25.058,139.500 23.828,138.272 23.828 C 136.664 23.828,137.511 22.675,139.551 22.086 C 140.679 21.760,143.975 20.808,146.875 19.971 C 149.775 19.133,152.331 18.427,152.554 18.403 C 152.777 18.379,153.250 19.447,153.606 20.775 M265.805 24.147 C 275.236 29.236,268.256 48.433,257.693 46.460 C 251.276 45.261,248.560 40.153,250.630 33.176 C 253.288 24.216,259.301 20.638,265.805 24.147 M134.586 24.243 C 134.727 24.472,134.561 24.969,134.218 25.348 C 133.434 26.215,133.428 28.195,134.180 38.672 C 134.976 49.765,134.975 49.779,133.783 50.322 C 132.652 50.838,133.617 51.777,124.218 41.016 C 118.302 34.241,117.240 33.244,115.918 33.217 C 114.430 33.187,115.392 32.342,118.609 30.856 C 122.375 29.116,122.656 29.049,122.656 29.883 C 122.656 30.205,122.492 30.469,122.292 30.469 C 121.655 30.469,121.424 31.969,121.918 32.895 C 122.583 34.142,132.101 45.373,132.313 45.161 C 132.511 44.962,131.321 31.163,130.979 29.688 C 130.639 28.227,130.104 27.734,128.858 27.734 C 126.877 27.734,127.632 26.775,130.762 25.315 C 134.244 23.691,134.244 23.691,134.586 24.243 M259.940 24.984 C 255.862 26.635,252.085 37.955,254.200 42.188 C 256.323 46.437,261.235 45.481,264.007 40.279 C 268.833 31.225,266.470 22.339,259.940 24.984 M284.668 32.526 C 288.374 34.405,291.406 36.122,291.406 36.343 C 291.406 37.030,289.459 40.625,289.088 40.625 C 287.914 40.625,287.490 40.098,287.712 38.915 C 288.113 36.777,287.446 35.860,284.429 34.401 C 282.903 33.663,281.589 33.135,281.508 33.229 C 281.427 33.322,280.478 35.124,279.398 37.234 L 277.435 41.069 279.531 42.097 L 281.628 43.125 282.820 42.244 C 285.336 40.383,285.746 41.416,283.931 45.043 C 282.012 48.879,282.247 48.597,281.377 48.110 C 280.881 47.832,280.664 47.256,280.664 46.221 C 280.664 44.827,280.535 44.663,278.626 43.637 L 276.588 42.542 274.818 46.068 C 272.907 49.873,272.703 50.926,273.671 51.995 C 275.090 53.564,273.700 53.459,270.277 51.740 C 266.883 50.035,266.204 49.219,268.182 49.219 C 269.392 49.219,270.032 48.206,274.627 39.027 C 277.972 32.346,278.188 31.771,277.781 30.645 C 277.270 29.232,277.231 28.789,277.637 28.976 C 277.798 29.050,280.962 30.648,284.668 32.526 M113.413 33.856 C 113.557 34.000,113.412 34.518,113.092 35.007 C 112.344 36.148,112.288 36.016,117.142 44.531 C 121.652 52.442,122.519 53.580,123.785 53.249 C 125.753 52.735,124.420 54.321,121.488 55.982 C 118.721 57.550,116.997 57.847,118.315 56.528 C 119.242 55.602,118.608 53.973,114.584 46.935 C 109.975 38.874,109.255 37.891,107.963 37.891 C 106.192 37.891,106.705 37.151,109.669 35.429 C 112.995 33.496,113.036 33.479,113.413 33.856 M104.688 39.235 C 104.688 39.544,104.512 39.906,104.297 40.039 C 103.455 40.559,104.104 41.828,109.645 50.495 C 115.058 58.961,115.342 59.502,114.649 60.009 C 113.500 60.849,113.429 60.822,103.415 55.767 C 98.207 53.138,93.808 50.924,93.641 50.848 C 93.219 50.655,102.343 64.577,102.883 64.951 C 103.124 65.117,103.710 65.186,104.186 65.105 C 105.887 64.815,105.304 65.848,102.826 67.517 C 100.459 69.111,98.442 69.370,99.922 67.891 C 100.798 67.014,100.393 66.118,96.058 59.326 C 90.293 50.296,90.059 50.000,88.652 50.000 C 86.946 50.000,87.238 49.410,89.735 47.813 L 91.970 46.383 101.071 50.929 L 110.171 55.474 105.861 49.026 C 101.894 43.092,101.458 42.578,100.385 42.578 C 98.681 42.578,98.942 42.021,101.465 40.270 C 103.871 38.601,104.688 38.338,104.688 39.235 M308.542 46.973 C 312.548 49.819,315.907 52.306,316.005 52.500 C 316.184 52.850,313.282 57.395,312.868 57.412 C 311.931 57.453,311.309 56.350,311.696 55.334 C 312.623 52.894,311.215 49.609,309.241 49.609 C 309.139 49.609,306.579 53.109,303.551 57.385 C 298.149 65.017,297.446 66.430,298.516 67.500 C 300.114 69.098,297.839 68.390,295.117 66.442 C 292.261 64.398,291.463 63.331,292.969 63.569 C 294.601 63.827,295.384 63.011,300.773 55.426 L 306.367 47.553 305.430 46.822 C 303.570 45.373,302.103 45.505,299.519 47.354 C 297.633 48.704,297.485 46.727,299.282 44.200 C 301.345 41.300,299.985 40.893,308.542 46.973 M217.188 43.158 C 343.392 57.779,402.076 206.752,319.516 302.926 C 242.326 392.845,96.048 367.740,52.973 257.180 C 10.206 147.414,100.567 29.647,217.188 43.158 M84.194 53.822 C 83.949 55.269,84.048 55.421,88.685 60.756 C 96.002 69.175,96.792 71.925,93.046 75.931 C 88.027 81.299,84.607 80.571,77.776 72.680 C 71.344 65.249,71.648 65.527,70.304 65.822 C 68.409 66.238,68.891 65.254,71.740 62.891 C 74.647 60.479,74.855 60.435,74.683 62.260 C 74.547 63.709,74.502 63.645,80.552 70.572 C 86.795 77.718,88.643 78.445,91.610 74.919 C 93.876 72.226,93.226 70.616,86.993 63.477 C 81.716 57.432,81.495 57.237,80.039 57.348 C 78.417 57.472,78.589 57.109,81.339 54.603 C 84.243 51.956,84.522 51.880,84.194 53.822 M323.774 58.721 C 325.143 60.146,325.177 61.269,323.830 60.548 C 322.746 59.968,322.800 59.936,319.685 62.957 C 316.146 66.388,316.122 65.975,320.072 69.611 L 323.340 72.620 326.166 69.706 C 328.839 66.950,328.978 66.718,328.736 65.427 C 328.371 63.480,328.960 63.674,331.860 66.459 C 334.496 68.990,334.711 69.657,332.764 69.268 C 330.741 68.863,317.549 82.860,318.420 84.488 C 319.518 86.540,317.918 86.060,315.426 83.590 C 312.576 80.766,312.354 80.264,314.110 80.615 C 315.233 80.840,315.591 80.605,318.615 77.652 C 322.483 73.877,322.490 74.383,318.519 70.602 L 315.358 67.593 312.127 70.903 C 309.040 74.066,308.908 74.274,309.153 75.583 C 309.533 77.609,308.768 77.349,305.935 74.490 C 303.347 71.879,303.227 71.425,305.211 71.743 C 307.120 72.049,319.729 58.790,319.408 56.814 C 319.048 54.598,320.370 55.175,323.774 58.721 M342.581 78.060 L 347.756 84.049 345.851 85.757 C 343.664 87.717,343.528 87.764,342.987 86.754 C 342.697 86.211,342.746 85.705,343.167 84.898 C 344.118 83.074,343.861 82.207,341.569 79.504 L 339.387 76.933 337.032 78.994 C 335.737 80.127,334.218 81.430,333.658 81.888 L 332.639 82.721 333.995 84.297 C 335.603 86.166,336.277 86.477,337.613 85.969 C 340.092 85.026,339.829 86.659,337.106 89.125 C 334.591 91.403,332.932 91.575,333.831 89.464 C 334.532 87.816,334.394 87.232,332.909 85.558 L 331.384 83.839 327.899 86.886 C 323.786 90.481,323.895 90.011,326.488 92.957 C 328.762 95.540,329.662 95.823,332.208 94.759 C 333.403 94.260,333.593 94.274,334.160 94.900 C 334.764 95.568,331.907 98.380,329.982 99.013 C 329.477 99.178,319.827 88.253,319.598 87.257 C 319.498 86.821,319.794 86.749,320.966 86.925 C 323.268 87.272,336.877 75.512,336.702 73.327 C 336.521 71.070,336.589 71.125,342.581 78.060 M61.961 76.660 C 64.618 78.660,64.136 79.556,60.511 79.354 C 52.030 78.882,56.303 90.745,66.080 94.812 C 71.464 97.052,75.822 93.543,73.445 88.883 C 72.026 86.099,73.480 85.544,76.149 87.851 L 77.884 89.351 76.274 92.062 C 71.312 100.414,65.152 100.784,57.553 93.187 C 52.228 87.864,52.232 83.012,57.567 77.504 C 59.979 75.014,59.816 75.045,61.961 76.660 M48.828 91.361 C 48.828 92.732,49.150 93.014,57.326 98.797 C 64.024 103.534,64.623 103.835,66.309 103.308 C 67.597 102.906,67.412 103.465,65.224 106.579 C 63.025 109.711,62.500 109.989,62.500 108.025 C 62.500 105.628,46.154 94.417,45.113 96.100 C 44.753 96.683,44.050 96.113,44.306 95.446 C 44.788 94.188,48.141 89.856,48.473 90.061 C 48.668 90.182,48.828 90.767,48.828 91.361 M358.078 98.928 C 362.847 106.395,363.014 109.163,358.860 111.857 C 354.868 114.445,351.060 113.290,348.033 108.572 C 347.336 107.487,346.553 106.681,346.292 106.781 C 345.021 107.269,340.228 110.602,340.179 111.033 C 340.149 111.303,340.105 111.875,340.081 112.305 C 339.995 113.902,339.259 113.396,337.398 110.462 C 335.728 107.829,335.143 105.690,336.450 106.997 C 337.429 107.976,339.053 107.255,346.186 102.675 C 354.423 97.386,354.757 97.121,354.666 95.947 C 354.484 93.622,354.951 94.030,358.078 98.928 M42.433 100.135 C 42.103 101.451,42.783 101.948,52.625 107.589 C 64.721 114.521,64.311 114.825,42.809 114.850 L 37.305 114.857 40.430 116.537 C 42.148 117.462,45.464 119.321,47.798 120.670 C 51.948 123.068,52.568 123.237,54.395 122.469 C 55.430 122.034,55.244 122.793,53.625 125.607 C 52.121 128.223,51.380 128.619,51.349 126.824 C 51.325 125.436,51.661 125.681,42.713 120.539 C 34.618 115.888,34.116 115.683,32.825 116.489 C 31.532 117.296,31.538 116.576,32.843 114.263 C 34.398 111.508,33.239 111.788,44.571 111.433 L 54.182 111.133 47.594 107.477 C 41.201 103.929,40.979 103.840,40.055 104.446 C 38.515 105.455,38.514 104.511,40.052 101.761 C 41.464 99.235,42.906 98.250,42.433 100.135 M352.252 102.794 L 348.058 105.539 349.231 107.244 C 353.529 113.492,361.879 108.233,357.821 101.834 C 357.181 100.825,356.610 100.011,356.552 100.024 C 356.493 100.038,354.558 101.284,352.252 102.794 M193.555 111.582 C 192.910 111.657,190.713 111.910,188.672 112.143 C 147.868 116.817,115.006 152.796,113.420 194.531 C 111.195 253.085,165.232 296.594,222.080 282.022 C 287.229 265.322,308.750 182.202,259.982 135.640 C 242.256 118.716,215.495 109.024,193.555 111.582 M367.588 115.123 C 369.527 119.399,369.567 120.085,367.812 118.935 C 366.791 118.265,366.480 118.343,362.012 120.391 C 360.562 121.056,359.375 121.737,359.375 121.904 C 359.375 122.272,362.683 129.610,362.984 129.912 C 363.620 130.547,370.646 126.619,370.771 125.559 C 371.002 123.593,371.715 124.156,373.145 127.432 C 374.573 130.705,374.564 132.037,373.123 130.733 C 372.087 129.795,372.318 129.723,363.206 133.828 C 353.918 138.013,353.906 138.019,353.906 139.283 C 353.906 141.157,353.115 140.552,351.775 137.653 C 351.014 136.004,350.391 134.417,350.391 134.125 C 350.391 133.506,351.016 133.416,351.367 133.984 C 351.859 134.781,353.952 134.328,357.594 132.638 L 361.337 130.901 360.314 128.634 C 359.751 127.387,358.930 125.520,358.488 124.485 C 357.537 122.253,357.563 122.252,352.465 124.709 C 349.479 126.148,348.998 126.518,348.828 127.507 C 348.488 129.490,347.866 129.012,346.320 125.578 C 344.568 121.689,344.690 121.105,346.918 122.715 C 347.431 123.085,349.181 122.428,356.361 119.170 C 364.919 115.287,365.625 114.836,365.625 113.249 C 365.625 111.783,366.416 112.538,367.588 115.123 M208.259 114.475 C 278.136 121.596,309.286 206.139,260.551 256.395 C 227.624 290.350,174.990 291.161,141.267 258.233 C 99.592 217.539,110.718 148.373,163.086 122.594 C 167.972 120.189,177.241 116.793,180.302 116.286 C 180.931 116.181,182.939 115.815,184.766 115.471 C 191.951 114.119,201.001 113.735,208.259 114.475 M30.469 122.493 C 30.835 124.630,48.750 131.389,50.014 129.866 C 51.265 128.359,51.266 130.123,50.018 133.353 C 48.755 136.618,47.656 137.551,47.656 135.358 C 47.656 134.186,47.361 133.994,42.701 132.135 L 38.722 130.548 37.135 134.645 C 36.261 136.898,35.547 138.884,35.547 139.057 C 35.547 139.230,37.418 140.097,39.705 140.983 C 43.543 142.471,45.313 142.719,45.313 141.771 C 45.313 141.570,45.576 141.406,45.898 141.406 C 46.700 141.406,46.659 141.665,45.271 145.298 C 44.027 148.557,43.323 149.089,42.966 147.042 C 42.602 144.960,24.945 138.284,23.430 139.655 C 22.158 140.806,22.141 139.564,23.384 136.328 C 24.538 133.324,25.781 132.170,25.781 134.103 C 25.781 135.360,26.132 135.609,30.194 137.243 L 33.631 138.626 33.959 137.770 C 34.139 137.299,34.920 135.345,35.695 133.428 C 36.469 131.510,37.061 129.905,37.009 129.860 C 35.502 128.560,28.125 126.830,28.125 127.776 C 28.125 127.968,27.861 128.125,27.539 128.125 C 26.737 128.125,26.779 127.867,28.166 124.233 C 29.411 120.974,30.117 120.440,30.469 122.493 M194.727 127.003 C 140.689 130.548,110.577 192.343,140.707 237.859 C 172.246 285.501,245.644 277.621,266.333 224.371 C 285.433 175.209,247.439 123.545,194.727 127.003 M205.664 129.709 C 254.298 133.904,283.422 186.036,261.300 229.297 C 235.751 279.259,164.227 279.259,138.698 229.297 C 116.614 186.077,145.999 133.482,194.336 129.713 C 200.053 129.267,200.534 129.267,205.664 129.709 M377.085 137.793 C 378.289 141.269,378.349 141.797,377.539 141.797 C 377.217 141.797,376.953 141.633,376.953 141.433 C 376.953 140.324,374.861 140.735,367.077 143.376 C 357.959 146.469,357.147 146.848,356.962 148.104 C 356.686 149.985,355.906 149.149,354.766 145.750 C 353.560 142.154,353.742 140.895,355.218 142.619 C 356.020 143.556,355.838 143.597,366.016 140.129 C 374.807 137.133,375.000 137.037,375.000 135.694 C 375.000 133.772,376.063 134.842,377.085 137.793 M191.746 142.761 C 146.247 150.222,128.056 205.255,160.377 237.660 C 195.631 273.007,255.658 248.173,255.658 198.242 C 255.658 163.798,225.120 137.288,191.746 142.761 M24.089 144.372 C 25.685 144.836,26.171 145.141,26.005 145.576 C 25.882 145.896,25.781 146.319,25.781 146.516 C 25.781 146.714,25.333 146.875,24.785 146.875 C 22.079 146.875,20.029 149.461,20.547 152.223 C 21.681 158.264,37.391 162.151,40.032 157.044 C 41.085 155.008,40.811 153.068,39.258 151.563 C 36.812 149.192,37.435 148.198,40.783 149.130 L 43.063 149.764 42.855 152.323 C 42.064 162.064,36.115 165.442,26.420 161.656 C 18.897 158.717,16.515 151.362,20.913 144.650 C 21.614 143.580,21.422 143.596,24.089 144.372 M380.087 147.363 C 380.540 148.921,380.998 150.503,381.106 150.879 C 381.351 151.731,380.370 151.799,379.688 150.977 C 378.972 150.115,378.712 150.163,368.940 152.961 C 358.334 155.998,359.622 155.163,360.549 158.405 C 361.535 161.853,361.973 162.260,364.955 162.500 C 369.608 162.874,366.346 165.671,361.304 165.630 C 360.685 165.625,356.315 151.367,356.788 150.894 C 357.019 150.663,357.661 150.918,358.669 151.642 C 359.211 152.031,360.898 151.672,368.044 149.646 C 377.745 146.896,378.125 146.749,378.125 145.754 C 378.125 145.007,378.448 144.531,378.955 144.531 C 379.125 144.531,379.634 145.806,380.087 147.363 M210.742 145.889 C 252.529 155.228,267.567 205.835,237.500 235.936 C 201.212 272.264,138.980 240.094,147.452 189.387 C 152.374 159.931,182.115 139.490,210.742 145.889 M193.945 158.216 C 164.927 162.685,150.136 196.388,166.522 220.703 C 188.679 253.582,239.970 237.908,240.023 198.242 C 240.056 173.343,218.320 154.462,193.945 158.216 M209.375 161.690 C 237.699 168.975,247.168 205.210,226.002 225.316 C 201.774 248.330,162.637 231.466,162.718 198.047 C 162.778 173.245,185.490 155.547,209.375 161.690 M384.311 164.746 C 385.392 169.877,385.235 171.679,383.894 169.531 C 383.223 168.458,382.428 168.512,372.461 170.314 C 363.818 171.877,362.891 172.209,362.891 173.740 C 362.891 175.615,361.825 173.430,361.352 170.585 C 360.739 166.900,360.914 166.205,362.129 167.509 C 363.127 168.580,362.352 168.633,372.602 166.789 C 381.954 165.107,382.813 164.844,382.813 163.658 C 382.813 162.086,383.919 162.889,384.311 164.746 M20.042 164.715 C 21.293 165.062,20.666 166.430,18.994 167.002 C 18.161 167.287,17.293 167.707,17.063 167.937 C 16.614 168.386,15.605 174.995,15.983 175.007 C 16.108 175.011,18.042 175.275,20.280 175.593 C 25.058 176.272,24.486 176.527,24.821 173.567 C 25.093 171.164,25.092 171.161,23.875 170.532 C 21.154 169.125,22.580 168.140,26.651 168.614 C 29.939 168.997,31.098 170.441,28.529 170.954 C 27.091 171.242,26.751 171.803,26.416 174.438 L 26.164 176.415 31.006 176.985 L 35.847 177.554 36.194 174.578 C 36.665 170.537,36.467 169.945,34.264 168.811 C 31.050 167.157,31.859 165.882,35.666 166.600 C 39.119 167.250,38.923 166.503,37.897 175.094 C 37.077 181.969,36.540 184.243,36.053 182.915 C 35.379 181.077,34.856 180.921,25.197 179.675 L 15.824 178.465 14.917 179.519 C 14.412 180.106,13.869 180.420,13.692 180.228 C 13.417 179.930,14.983 165.946,15.450 164.526 C 15.612 164.037,17.943 164.132,20.042 164.715 M193.053 171.882 C 172.827 177.182,166.003 202.459,180.814 217.223 C 200.488 236.836,233.132 218.177,226.321 191.211 C 222.736 177.015,207.422 168.118,193.053 171.882 M207.596 174.843 C 220.310 178.940,227.618 193.429,223.272 205.926 C 214.981 229.766,180.959 227.440,175.944 202.691 C 172.311 184.760,190.020 169.180,207.596 174.843 M386.463 177.441 C 387.332 188.600,386.006 191.335,379.913 190.947 C 375.687 190.678,373.665 188.300,373.172 183.020 L 372.934 180.473 369.573 180.720 C 365.749 181.000,364.955 181.298,364.444 182.641 C 363.939 183.970,363.352 183.829,363.124 182.324 C 362.301 176.888,362.659 174.460,363.972 176.563 C 364.583 177.542,366.519 177.574,376.409 176.770 C 384.182 176.138,384.630 176.044,384.972 174.964 C 385.547 173.154,386.216 174.266,386.463 177.441 M378.041 180.058 C 374.353 180.367,374.396 180.325,374.941 183.096 C 376.194 189.472,385.183 188.976,385.151 182.532 C 385.136 179.468,385.125 179.464,378.041 180.058 M17.871 183.449 C 19.337 183.842,19.046 185.404,17.451 185.704 C 15.438 186.081,14.453 187.234,14.453 189.212 L 14.453 190.894 20.375 191.150 C 32.795 191.688,34.256 191.567,35.117 189.930 C 36.175 187.923,36.699 190.933,36.080 195.453 C 35.807 197.442,35.329 197.771,34.786 196.342 C 34.279 195.010,34.194 194.998,23.664 194.692 L 14.063 194.413 14.063 195.865 C 14.063 197.913,14.655 198.789,16.635 199.664 C 17.998 200.267,18.359 200.628,18.359 201.385 C 18.359 202.456,18.227 202.481,14.608 202.103 L 12.305 201.863 12.402 194.974 C 12.455 191.186,12.601 186.987,12.726 185.645 L 12.953 183.203 14.972 183.208 C 16.083 183.211,17.388 183.320,17.871 183.449 M365.542 194.309 C 366.090 195.513,366.942 195.624,377.311 195.837 L 385.285 196.000 386.215 195.070 C 387.872 193.413,387.989 193.762,387.707 199.512 C 387.273 208.350,385.966 210.562,381.191 210.538 C 376.421 210.514,373.438 206.619,373.888 201.004 L 374.023 199.321 370.780 199.092 C 367.211 198.840,365.655 199.213,365.346 200.395 C 364.740 202.715,364.063 201.064,364.063 197.266 C 364.063 193.197,364.572 192.180,365.542 194.309 M375.781 201.387 C 375.781 205.293,377.151 206.752,380.854 206.788 C 384.419 206.824,385.929 205.139,385.935 201.120 C 385.938 199.343,385.588 199.231,379.980 199.224 L 375.781 199.219 375.781 201.387 M20.664 207.806 L 26.289 210.611 29.992 210.333 C 33.788 210.049,35.156 209.433,35.156 208.008 C 35.156 207.400,35.766 207.202,36.059 207.715 C 36.569 208.606,36.737 215.625,36.249 215.625 C 35.965 215.625,35.559 215.229,35.347 214.746 C 34.979 213.909,34.764 213.870,30.853 213.922 L 26.745 213.977 21.674 217.179 C 18.884 218.941,16.056 220.981,15.388 221.714 C 13.638 223.637,13.597 223.563,13.158 217.676 C 13.007 215.643,13.738 214.715,14.312 216.211 C 14.735 217.313,16.410 216.796,20.324 214.355 L 24.239 211.914 20.453 210.059 C 16.284 208.015,14.354 207.709,13.672 208.984 C 12.925 210.379,12.606 209.823,12.329 206.646 C 11.990 202.760,12.223 202.319,13.814 203.834 C 14.488 204.476,17.570 206.264,20.664 207.806 M364.844 211.866 C 364.844 213.000,366.136 213.306,373.286 213.868 C 383.658 214.683,385.430 214.655,385.742 213.672 C 386.398 211.604,387.226 212.851,386.973 215.527 C 386.836 216.978,386.723 218.647,386.722 219.238 C 386.718 220.493,385.744 220.718,385.435 219.536 C 385.121 218.335,384.037 218.123,374.586 217.420 C 365.368 216.734,364.636 216.777,364.240 218.026 C 363.391 220.701,362.804 216.089,363.524 212.402 C 363.736 211.318,364.844 210.868,364.844 211.866 M37.812 224.532 C 39.223 232.466,39.219 233.072,37.766 231.707 C 36.618 230.628,36.906 230.613,27.817 232.224 C 17.808 233.997,17.332 234.136,17.019 235.383 C 16.557 237.224,15.826 236.107,15.258 232.695 C 14.673 229.176,14.901 228.089,15.911 229.590 C 16.680 230.735,16.718 230.732,26.953 228.906 C 31.769 228.047,35.869 227.344,36.063 227.344 C 36.435 227.344,36.149 224.641,35.519 222.214 C 35.117 220.666,34.279 220.164,31.348 219.716 C 30.298 219.556,29.688 219.260,29.688 218.911 C 29.688 218.608,29.644 218.228,29.590 218.066 C 29.494 217.778,34.818 216.826,35.911 216.936 C 36.323 216.978,36.824 218.981,37.812 224.532 M364.063 221.080 C 364.063 222.265,364.921 222.529,374.273 224.211 C 384.466 226.045,383.809 225.995,384.661 225.000 C 385.495 224.026,386.455 223.964,386.181 224.902 C 386.072 225.278,385.868 226.392,385.730 227.377 C 385.591 228.362,385.361 229.341,385.219 229.552 C 385.026 229.840,372.429 234.721,366.406 236.841 C 366.084 236.955,366.348 237.070,366.992 237.097 C 367.637 237.124,371.064 237.652,374.609 238.271 C 381.014 239.388,381.061 239.390,382.113 238.643 C 383.823 237.428,383.875 237.578,383.163 241.667 C 382.755 244.008,381.641 245.282,381.641 243.407 C 381.641 242.106,380.773 241.846,370.187 239.967 C 360.551 238.258,359.766 238.058,359.772 237.321 C 359.782 235.932,360.142 235.750,370.898 231.711 C 376.699 229.533,381.229 227.747,380.964 227.742 C 380.700 227.738,376.850 227.113,372.410 226.354 L 364.337 224.973 363.446 225.810 C 362.044 227.127,361.822 226.596,362.413 223.340 C 362.927 220.505,364.063 218.950,364.063 221.080 M37.411 237.562 C 44.217 240.944,44.158 249.974,37.305 253.766 C 26.606 259.686,15.182 253.354,18.917 243.575 C 20.998 238.127,31.606 234.677,37.411 237.562 M29.937 240.463 C 22.560 242.249,18.790 246.313,20.838 250.273 C 23.516 255.452,39.309 251.620,40.454 245.513 C 41.291 241.053,36.669 238.834,29.937 240.463 M360.156 242.760 C 360.156 244.029,360.439 244.162,369.890 247.320 C 378.576 250.223,379.075 250.322,380.147 249.351 C 381.588 248.047,381.368 249.405,378.963 256.653 C 376.125 265.208,376.551 264.662,373.511 263.635 C 370.592 262.650,370.512 261.305,373.350 260.916 C 374.220 260.796,375.199 260.477,375.525 260.206 C 376.033 259.785,378.290 253.903,378.024 253.695 C 377.774 253.501,370.452 251.172,370.090 251.172 C 369.861 251.172,369.363 252.157,368.984 253.362 L 368.293 255.552 369.236 256.585 C 370.166 257.604,370.280 259.199,369.399 258.875 C 369.150 258.783,367.715 258.307,366.211 257.817 C 362.925 256.746,363.119 256.892,363.654 255.893 C 363.948 255.343,364.474 255.078,365.268 255.078 C 366.256 255.078,366.543 254.846,367.045 253.644 C 368.321 250.591,368.249 250.493,363.485 248.806 C 358.645 247.092,358.978 246.999,357.864 250.369 C 356.707 253.868,356.777 254.409,358.594 255.964 C 361.894 258.789,358.015 259.532,354.009 256.843 C 353.920 256.783,358.213 243.880,358.787 242.480 C 359.210 241.451,360.156 241.644,360.156 242.760 M34.124 259.522 C 35.755 260.203,37.625 262.460,38.492 264.792 C 39.468 267.416,39.484 267.420,42.912 266.039 C 46.251 264.692,47.391 263.787,47.194 262.636 C 46.857 260.670,48.269 262.282,49.452 265.214 C 50.689 268.282,50.772 270.791,49.566 268.652 C 48.929 267.525,47.672 267.827,39.181 271.146 C 30.677 274.471,29.807 274.940,29.612 276.310 C 29.220 279.055,24.877 268.929,24.832 265.167 C 24.777 260.638,29.675 257.663,34.124 259.522 M356.493 259.816 C 358.867 260.853,358.741 260.713,358.203 261.720 C 357.859 262.362,357.519 262.511,356.807 262.332 C 352.281 261.196,349.803 268.167,353.993 270.250 C 356.334 271.413,357.412 271.105,361.299 268.160 C 370.255 261.374,376.668 268.562,370.448 278.414 L 369.156 280.460 367.097 279.558 C 364.315 278.339,364.243 277.272,366.917 276.889 C 371.647 276.213,372.825 270.370,368.474 269.168 C 366.715 268.683,364.959 269.401,361.546 272.003 C 354.086 277.691,346.835 271.918,350.998 263.605 C 353.331 258.946,353.784 258.633,356.493 259.816 M30.795 262.734 C 27.352 263.776,26.319 266.015,27.614 269.629 C 28.419 271.873,28.156 271.862,33.203 269.864 C 38.292 267.850,38.109 268.034,37.116 265.922 C 35.584 262.662,33.877 261.801,30.795 262.734 M359.255 286.035 C 358.788 292.416,357.000 295.816,353.178 297.593 C 351.169 298.527,350.669 299.026,348.271 302.500 L 345.602 306.368 346.922 306.104 C 347.648 305.959,349.912 305.011,351.953 303.997 C 353.994 302.983,355.820 302.086,356.010 302.003 C 356.535 301.775,355.907 304.587,354.852 307.183 C 352.210 313.683,347.716 316.863,338.532 318.732 L 334.961 319.458 331.929 322.680 C 330.261 324.452,328.969 325.975,329.059 326.064 C 329.148 326.153,331.831 325.791,335.021 325.259 C 346.144 323.403,345.680 323.315,343.397 326.847 C 338.597 334.274,332.310 337.414,320.592 338.236 L 314.936 338.633 311.010 341.680 L 307.084 344.727 315.651 344.832 C 320.363 344.890,324.219 345.093,324.219 345.284 C 324.219 345.994,320.726 349.887,318.699 351.436 C 312.414 356.239,306.120 357.464,294.141 356.214 L 290.039 355.786 285.816 358.012 C 283.493 359.236,281.659 360.305,281.741 360.387 C 281.824 360.469,284.779 360.793,288.309 361.106 C 294.946 361.694,298.828 362.344,298.828 362.865 C 298.828 363.282,294.709 366.456,292.578 367.681 C 287.093 370.834,280.595 371.148,272.230 368.664 C 268.830 367.655,267.467 367.409,266.761 367.678 C 265.176 368.281,252.380 371.484,251.556 371.484 C 249.854 371.484,250.898 370.360,253.493 369.398 C 254.984 368.845,258.386 367.410,261.051 366.209 L 265.898 364.026 267.364 360.322 C 270.494 352.413,274.409 348.082,282.459 343.616 C 286.938 341.133,287.053 342.563,283.060 351.111 C 279.437 358.868,279.391 358.625,284.035 356.166 C 287.075 354.556,287.970 353.893,288.136 353.127 C 290.713 341.222,294.125 336.170,304.459 328.957 C 305.730 328.070,306.917 327.344,307.096 327.344 C 307.797 327.344,307.359 331.005,306.055 336.051 C 303.993 344.026,303.924 343.893,308.402 340.577 C 311.913 337.976,312.096 337.627,312.105 333.480 C 312.122 326.186,315.224 319.539,321.622 313.086 L 325.494 309.180 325.831 310.547 C 326.016 311.299,326.056 314.946,325.919 318.652 C 325.756 323.061,325.805 325.391,326.061 325.391 C 326.695 325.391,332.890 318.410,332.630 317.989 C 331.367 315.946,332.813 306.833,335.075 302.587 C 336.477 299.953,342.632 292.910,343.117 293.383 C 343.490 293.746,343.516 296.810,343.188 301.758 L 342.877 306.445 345.834 302.317 C 348.519 298.567,348.829 297.940,349.213 295.481 C 349.966 290.665,352.141 287.454,356.867 284.185 C 359.503 282.362,359.523 282.377,359.255 286.035 M44.120 285.410 C 48.770 288.542,50.869 291.629,51.734 296.610 C 52.178 299.167,52.526 299.901,54.889 303.258 C 57.952 307.609,58.417 307.862,58.052 304.980 C 56.893 295.841,57.294 293.506,59.638 295.757 C 66.062 301.926,69.135 309.058,68.606 316.574 L 68.356 320.131 71.630 323.388 C 75.548 327.285,75.569 327.269,75.136 320.777 C 74.794 315.654,74.877 311.889,75.351 311.029 C 75.743 310.318,82.005 316.651,84.254 320.033 C 87.183 324.440,89.025 331.107,89.077 337.490 L 89.091 339.258 92.690 341.916 C 96.930 345.048,96.914 345.067,95.298 338.848 C 92.402 327.701,92.580 327.288,98.438 331.555 C 106.292 337.276,109.773 342.280,112.083 351.172 L 113.148 355.273 116.828 357.314 C 121.226 359.752,121.275 359.689,118.934 354.587 C 113.432 342.596,113.463 342.079,119.475 345.410 C 126.351 349.219,130.752 354.241,133.504 361.418 L 134.961 365.219 140.234 367.543 C 143.135 368.822,146.536 370.275,147.793 370.774 C 150.166 371.716,150.762 372.380,149.408 372.574 C 148.728 372.671,139.883 370.543,134.863 369.074 C 133.558 368.692,132.848 368.689,131.543 369.059 C 119.703 372.415,115.742 372.482,109.486 369.432 C 107.017 368.228,102.722 365.033,102.450 364.197 C 102.240 363.553,105.564 362.910,111.523 362.441 C 114.316 362.222,117.213 361.918,117.960 361.767 L 119.318 361.492 115.083 359.231 L 110.848 356.969 106.971 357.391 C 93.383 358.869,86.768 357.141,79.922 350.324 C 78.009 348.420,76.573 346.734,76.730 346.576 C 76.888 346.418,80.805 346.201,85.435 346.094 L 93.854 345.898 89.924 342.872 L 85.993 339.846 80.321 339.443 C 68.775 338.623,62.611 335.608,57.824 328.439 C 55.266 324.610,55.185 324.632,65.463 326.398 C 73.094 327.710,72.876 327.838,69.306 324.121 C 65.977 320.654,66.319 320.824,59.570 319.295 C 52.135 317.609,47.603 313.402,45.351 306.093 C 44.322 302.754,44.321 302.754,47.334 304.418 C 48.693 305.169,51.090 306.239,52.660 306.798 L 55.516 307.813 52.771 303.849 C 50.535 300.622,49.714 299.747,48.352 299.140 C 44.092 297.239,42.270 293.875,41.570 286.621 C 41.274 283.555,41.327 283.530,44.120 285.410 M172.118 364.604 C 171.605 366.661,168.359 385.235,168.359 386.110 C 168.359 387.235,169.516 388.141,171.441 388.526 C 172.751 388.788,173.425 389.630,172.806 390.231 C 172.527 390.501,160.836 388.676,159.112 388.093 C 157.629 387.592,159.117 386.470,161.063 386.622 C 164.278 386.874,164.267 386.895,166.026 377.145 C 166.879 372.420,167.577 368.335,167.577 368.066 C 167.579 367.381,165.770 367.458,163.749 368.230 C 162.288 368.788,161.991 368.802,161.691 368.328 C 161.073 367.350,161.483 367.079,166.406 365.204 C 171.421 363.293,172.472 363.183,172.118 364.604 M230.616 364.746 C 230.732 365.337,231.203 368.896,231.663 372.656 C 232.123 376.416,232.573 379.569,232.664 379.663 C 233.105 380.121,234.973 379.005,235.086 378.215 C 235.375 376.199,237.109 377.120,237.109 379.289 C 237.109 381.390,237.014 381.470,234.180 381.729 C 232.269 381.904,232.982 387.554,234.979 388.055 C 236.444 388.423,236.146 389.321,234.473 389.578 C 228.506 390.492,226.225 390.107,228.956 388.645 C 229.713 388.240,229.769 387.959,229.593 385.493 C 229.347 382.053,229.762 382.245,224.133 382.971 C 221.476 383.313,219.178 383.594,219.026 383.594 C 217.971 383.594,226.386 364.914,227.866 363.973 C 228.993 363.256,230.403 363.652,230.616 364.746 M191.833 366.534 C 197.475 369.513,197.269 381.989,191.478 388.022 C 188.281 391.353,181.993 392.966,181.712 390.527 C 181.595 389.510,181.673 389.453,183.193 389.453 C 186.451 389.453,189.155 387.239,190.595 383.390 C 191.823 380.108,191.770 380.009,189.268 380.889 C 181.943 383.463,176.416 377.623,179.451 370.513 C 181.360 366.040,187.289 364.135,191.833 366.534 M210.742 366.498 C 217.187 369.733,217.866 387.189,211.706 391.266 C 207.670 393.937,203.093 392.610,200.781 388.098 L 199.414 385.430 199.414 379.141 C 199.414 368.366,204.083 363.156,210.742 366.498 M184.388 368.677 C 180.836 372.229,182.542 379.297,186.951 379.297 C 191.461 379.297,193.229 376.228,191.763 370.946 C 190.803 367.490,186.805 366.260,184.388 368.677 M205.859 368.066 C 202.244 369.898,202.156 387.014,205.746 389.839 C 209.943 393.140,212.718 387.210,211.752 377.004 C 211.035 369.428,209.066 366.441,205.859 368.066 M225.975 372.356 C 225.159 374.132,223.924 376.822,223.232 378.333 L 221.972 381.080 225.215 380.677 C 226.999 380.455,228.569 380.161,228.704 380.024 C 228.941 379.783,227.893 369.560,227.602 369.269 C 227.524 369.190,226.791 370.579,225.975 372.356 \" stroke=\"none\" fill=\"#fbfafa\" fill-rule=\"evenodd\"></path><path id=\"path1\" d=\"M191.080 84.412 C 186.066 100.110,182.023 113.010,182.095 113.079 C 182.167 113.148,183.457 112.973,184.961 112.690 C 188.305 112.061,195.488 111.328,198.310 111.328 L 200.391 111.328 200.391 83.594 C 200.391 68.340,200.347 55.862,200.293 55.865 C 200.239 55.868,196.093 68.715,191.080 84.412 M191.211 114.526 C 189.277 114.721,186.201 115.180,184.375 115.546 L 181.055 116.211 179.995 119.240 C 179.412 120.906,178.340 124.170,177.612 126.493 L 176.289 130.717 179.876 129.651 C 184.346 128.322,192.276 126.953,195.508 126.953 C 196.851 126.953,198.499 126.843,199.170 126.709 L 200.391 126.465 200.391 120.264 L 200.391 114.063 197.559 114.116 C 196.001 114.146,193.145 114.330,191.211 114.526 M194.336 129.713 C 189.576 130.084,183.528 131.289,178.758 132.817 L 175.195 133.959 172.696 141.882 C 171.321 146.239,170.113 150.030,170.012 150.306 C 169.911 150.582,171.651 149.850,173.879 148.679 C 180.990 144.941,188.658 142.784,196.547 142.304 L 200.391 142.069 200.391 135.683 L 200.391 129.297 199.316 129.352 C 198.726 129.383,196.484 129.545,194.336 129.713 M191.992 145.498 C 184.171 146.745,174.578 150.513,170.067 154.110 L 168.982 154.975 172.445 159.812 C 174.350 162.472,176.035 164.795,176.190 164.975 C 176.346 165.154,177.161 164.866,178.003 164.335 C 184.184 160.433,192.562 157.813,198.856 157.813 L 200.391 157.813 200.391 151.367 L 200.391 144.922 197.754 144.961 C 196.304 144.982,193.711 145.223,191.992 145.498 M65.706 154.508 C 65.814 154.616,76.607 162.509,89.690 172.048 L 113.477 189.391 114.300 184.442 C 114.753 181.719,115.607 177.680,116.198 175.466 C 116.789 173.251,117.209 171.380,117.132 171.308 C 117.055 171.236,106.709 167.810,94.141 163.695 C 81.572 159.579,69.989 155.784,68.399 155.262 C 66.810 154.739,65.598 154.400,65.706 154.508 M239.386 158.496 C 245.194 164.335,250.020 171.748,252.546 178.711 C 252.935 179.785,253.385 180.816,253.546 181.001 C 253.772 181.262,264.056 178.181,265.311 177.477 C 266.471 176.825,259.568 163.124,254.983 156.977 L 252.984 154.297 244.096 154.297 L 235.208 154.297 239.386 158.496 M256.641 154.501 C 256.641 154.622,257.340 155.648,258.196 156.780 C 260.832 160.272,264.215 166.497,266.222 171.546 C 267.276 174.198,268.156 176.409,268.178 176.459 C 268.474 177.139,280.068 172.452,279.854 171.739 C 279.019 168.950,276.236 162.480,274.284 158.789 L 272.012 154.492 264.326 154.386 C 260.099 154.328,256.641 154.380,256.641 154.501 M277.730 159.561 C 279.169 162.457,280.855 166.324,281.476 168.155 C 282.231 170.378,282.803 171.483,283.198 171.479 C 283.523 171.476,295.303 167.624,309.375 162.919 L 334.961 154.363 305.037 154.330 L 275.114 154.297 277.730 159.561 M227.832 160.515 L 224.236 165.561 228.254 169.597 C 232.679 174.043,235.332 177.931,237.377 182.970 C 238.129 184.824,238.878 186.115,239.186 186.090 C 240.376 185.992,250.781 182.330,250.781 182.009 C 250.781 180.358,247.166 172.945,244.192 168.499 C 240.947 163.648,233.111 155.469,231.709 155.469 C 231.554 155.469,229.809 157.739,227.832 160.515 M193.324 161.154 C 188.312 162.061,181.891 164.677,179.221 166.898 L 178.169 167.773 180.708 171.289 C 184.347 176.329,183.780 176.070,187.177 174.238 C 190.528 172.430,195.258 171.094,198.305 171.094 L 200.391 171.094 200.391 165.820 L 200.391 160.547 198.340 160.582 C 197.212 160.601,194.955 160.859,193.324 161.154 M219.507 172.173 L 216.556 176.295 219.129 178.870 C 221.810 181.552,224.061 184.887,225.220 187.891 C 226.204 190.438,226.039 190.413,231.219 188.813 C 236.747 187.105,236.540 187.601,233.994 182.159 C 231.686 177.226,227.057 171.348,223.436 168.753 L 222.458 168.052 219.507 172.173 M119.171 174.902 C 117.609 180.156,115.774 190.907,116.346 191.458 C 116.486 191.593,119.256 193.637,122.501 196.000 L 128.399 200.297 128.639 195.363 C 128.898 190.022,129.987 183.020,131.216 178.788 C 131.786 176.824,131.866 176.085,131.521 175.957 C 129.819 175.321,120.485 172.266,120.248 172.266 C 120.087 172.266,119.602 173.452,119.171 174.902 M193.750 174.456 C 191.157 175.153,188.034 176.560,186.765 177.605 L 185.835 178.372 192.917 188.189 C 196.813 193.588,200.000 198.091,200.000 198.196 C 200.000 198.300,198.198 197.777,195.996 197.033 C 193.794 196.289,188.523 194.562,184.284 193.197 L 176.575 190.713 176.181 192.134 C 175.191 195.701,175.556 204.983,176.731 206.158 C 176.790 206.217,181.978 204.579,188.261 202.519 C 194.544 200.459,199.749 198.838,199.827 198.916 C 199.905 198.994,196.900 203.314,193.148 208.515 C 189.397 213.717,186.328 218.146,186.328 218.356 C 186.328 219.565,195.217 222.656,198.695 222.656 L 200.391 222.656 200.391 198.242 L 200.391 173.828 198.145 173.854 C 196.909 173.868,194.932 174.139,193.750 174.456 M133.472 181.135 C 131.930 187.435,131.527 190.626,131.484 196.853 L 131.445 202.495 138.477 207.642 C 142.344 210.473,145.567 212.738,145.640 212.675 C 145.713 212.612,145.471 211.185,145.101 209.503 C 143.624 202.772,143.913 191.513,145.752 184.222 C 146.689 180.506,147.073 180.905,140.625 178.887 C 137.725 177.979,135.161 177.165,134.927 177.078 C 134.674 176.983,134.088 178.614,133.472 181.135 M207.678 188.710 C 203.845 194.091,200.780 198.566,200.868 198.654 C 201.229 199.015,223.438 191.318,223.438 190.832 C 223.438 188.617,216.567 178.877,215.032 178.916 C 214.821 178.921,211.512 183.329,207.678 188.710 M148.666 183.732 C 146.179 192.287,146.622 211.975,149.373 215.118 C 149.445 215.201,161.431 211.356,161.586 211.200 C 161.635 211.151,161.313 209.798,160.871 208.192 C 159.608 203.607,159.449 195.128,160.527 189.893 C 160.987 187.665,161.311 185.800,161.248 185.749 C 161.184 185.698,158.460 184.768,155.193 183.684 L 149.254 181.711 148.666 183.732 M163.690 188.184 C 161.868 194.698,162.522 210.156,164.619 210.156 C 164.982 210.156,171.422 208.095,173.701 207.249 C 174.047 207.120,174.025 206.564,173.612 205.004 C 172.729 201.663,172.520 197.732,173.056 194.530 C 173.915 189.404,174.243 189.934,169.154 188.224 C 163.733 186.402,164.187 186.406,163.690 188.184 M201.172 199.394 C 201.172 199.576,212.223 215.160,214.308 217.918 C 214.940 218.755,220.565 212.130,222.171 208.657 C 223.395 206.012,224.151 206.467,212.305 202.719 C 206.719 200.952,201.929 199.423,201.660 199.321 C 201.392 199.219,201.172 199.252,201.172 199.394 M224.300 210.254 C 222.555 213.751,220.277 216.718,217.693 218.860 L 216.051 220.221 218.994 224.369 C 220.613 226.649,222.085 228.516,222.265 228.516 C 224.733 228.516,236.236 212.810,235.464 210.494 C 235.374 210.224,226.892 207.143,225.943 207.035 C 225.924 207.033,225.185 208.481,224.300 210.254 M236.907 214.350 C 234.194 220.374,229.607 226.430,225.438 229.492 C 223.510 230.908,223.373 230.492,227.744 236.515 L 231.307 241.426 232.939 240.161 C 240.313 234.442,250.391 220.074,250.391 215.278 C 250.391 215.052,247.798 214.047,244.629 213.046 C 241.460 212.045,238.768 211.170,238.646 211.103 C 238.524 211.035,237.741 212.496,236.907 214.350 M250.819 221.672 C 247.533 228.861,242.282 235.783,236.318 240.787 L 232.893 243.660 236.604 248.797 L 240.314 253.935 242.130 252.471 C 248.099 247.657,252.492 243.038,256.306 237.564 L 258.119 234.961 255.329 226.436 L 252.539 217.911 250.819 221.672 M183.906 221.397 C 180.718 225.152,178.416 229.039,179.088 229.531 C 182.590 232.091,190.146 234.876,195.369 235.531 C 200.938 236.229,200.391 236.753,200.391 230.721 L 200.391 225.505 197.540 225.264 C 193.957 224.961,189.955 223.755,186.868 222.046 C 184.631 220.807,184.442 220.766,183.906 221.397 M172.954 236.510 L 169.179 241.751 171.607 243.284 C 178.987 247.945,187.600 250.725,196.777 251.406 L 200.391 251.675 200.391 245.219 L 200.391 238.764 197.363 238.488 C 190.078 237.825,183.225 235.511,177.525 231.789 C 176.778 231.301,176.497 231.590,172.954 236.510 M258.425 239.284 C 255.926 243.143,248.422 251.057,244.087 254.407 L 241.885 256.109 245.586 261.254 L 249.287 266.400 251.694 264.564 C 255.066 261.992,263.673 253.513,263.668 252.767 C 263.666 252.427,262.653 248.996,261.416 245.144 L 259.168 238.139 258.425 239.284 M163.793 249.207 L 160.204 254.252 163.367 256.281 C 169.297 260.085,181.549 265.179,183.747 264.755 C 184.200 264.667,187.667 262.322,191.451 259.544 L 198.332 254.492 196.529 254.221 C 195.538 254.071,192.909 253.678,190.688 253.346 C 184.036 252.353,174.821 248.817,169.696 245.292 C 167.467 243.758,167.850 243.504,163.793 249.207 M261.514 259.407 C 259.801 261.144,256.711 263.931,254.648 265.600 L 250.897 268.636 267.123 291.146 C 276.047 303.527,283.398 313.607,283.458 313.547 C 283.630 313.376,265.063 256.254,264.835 256.252 C 264.722 256.251,263.228 257.671,261.514 259.407 M156.250 259.670 C 155.068 261.325,153.444 263.591,152.639 264.705 L 151.177 266.730 154.006 268.603 C 157.004 270.587,164.317 274.498,167.078 275.593 L 168.726 276.247 174.782 271.815 C 178.112 269.377,180.837 267.295,180.837 267.188 C 180.838 267.080,179.002 266.402,176.757 265.681 C 172.270 264.240,165.240 260.857,161.398 258.290 C 158.328 256.239,158.786 256.116,156.250 259.670 M135.156 288.944 C 118.180 312.508,116.853 314.389,117.594 313.821 C 117.907 313.580,128.887 305.514,141.992 295.895 C 155.098 286.276,165.866 278.370,165.922 278.326 C 165.978 278.283,163.869 277.170,161.235 275.853 C 158.600 274.537,154.967 272.488,153.161 271.300 C 151.354 270.112,149.772 269.143,149.645 269.147 C 149.518 269.150,142.998 278.059,135.156 288.944 \" stroke=\"none\" fill=\"#fada06\" fill-rule=\"evenodd\"></path><path id=\"path2\" d=\"M200.298 83.340 L 200.401 111.211 205.121 111.478 C 207.718 111.625,211.874 112.092,214.357 112.517 C 216.841 112.942,218.924 113.237,218.987 113.174 C 219.172 112.989,200.661 55.469,200.417 55.469 C 200.295 55.469,200.242 68.011,200.298 83.340 M200.391 120.313 C 200.391 126.004,200.452 126.563,201.074 126.563 C 205.975 126.565,215.991 128.270,221.488 130.038 L 224.881 131.129 222.791 124.647 C 221.641 121.081,220.598 117.785,220.473 117.321 C 220.144 116.101,208.387 114.087,201.465 114.066 L 200.391 114.063 200.391 120.313 M200.391 135.879 L 200.391 142.188 202.696 142.188 C 210.390 142.188,222.239 145.884,229.756 150.629 C 230.578 151.148,231.249 151.438,231.249 151.274 C 231.247 150.886,226.203 135.133,225.949 134.720 C 225.112 133.366,211.135 130.112,204.785 129.793 L 200.391 129.571 200.391 135.879 M200.391 151.256 L 200.391 157.697 203.613 157.948 C 209.404 158.400,216.349 160.701,221.169 163.765 C 222.309 164.490,223.451 165.209,223.706 165.362 C 224.006 165.543,225.481 163.809,227.873 160.463 L 231.576 155.285 229.753 153.977 C 223.370 149.398,212.957 145.831,203.809 145.091 L 200.391 144.814 200.391 151.256 M65.234 154.151 C 65.234 154.355,65.542 154.547,65.918 154.579 C 66.294 154.612,77.882 158.340,91.670 162.866 C 105.457 167.391,116.883 171.092,117.060 171.090 C 117.238 171.088,117.985 169.462,118.721 167.477 C 119.457 165.491,121.145 161.714,122.473 159.082 L 124.888 154.297 105.901 154.296 C 95.458 154.296,82.036 154.180,76.074 154.038 C 69.323 153.878,65.234 153.920,65.234 154.151 M126.183 158.025 C 123.426 163.002,119.765 172.016,120.414 172.231 C 120.680 172.319,123.381 173.222,126.415 174.237 L 131.931 176.083 133.193 172.709 C 134.787 168.448,138.046 162.208,140.713 158.311 C 141.846 156.655,142.914 155.075,143.086 154.799 C 143.336 154.397,141.894 154.297,135.823 154.297 L 128.248 154.297 126.183 158.025 M144.922 157.216 C 140.675 162.979,135.420 173.083,135.065 176.171 C 134.975 176.951,141.703 179.653,146.716 180.851 C 146.735 180.856,146.972 180.112,147.242 179.199 C 149.072 173.005,154.375 164.727,160.380 158.691 L 164.752 154.297 155.911 154.299 L 147.070 154.300 144.922 157.216 M308.984 163.011 C 294.697 167.767,282.981 171.663,282.949 171.669 C 282.917 171.675,283.482 174.025,284.204 176.891 C 284.926 179.758,285.744 183.925,286.021 186.153 L 286.525 190.203 309.395 173.519 C 337.389 153.098,335.778 154.290,335.331 154.331 C 335.127 154.349,323.271 158.256,308.984 163.011 M165.966 157.242 C 158.991 163.029,152.076 172.864,149.975 179.983 C 149.376 182.014,148.703 181.556,155.714 183.884 L 161.622 185.846 162.106 184.232 C 163.532 179.465,167.537 173.518,172.544 168.731 C 176.223 165.214,176.236 165.195,175.602 164.228 C 175.252 163.694,173.599 161.357,171.929 159.035 L 168.892 154.814 165.966 157.242 M200.391 165.562 L 200.391 170.668 201.855 170.896 C 208.261 171.894,210.410 172.588,214.191 174.884 C 215.444 175.644,216.608 176.113,216.778 175.926 C 217.571 175.055,222.266 168.331,222.266 168.066 C 222.266 166.116,210.021 161.444,203.027 160.726 L 200.391 160.456 200.391 165.562 M174.496 170.693 C 170.065 174.887,166.854 179.569,164.923 184.652 L 164.187 186.590 168.714 188.076 C 171.205 188.893,173.420 189.628,173.637 189.708 C 173.854 189.789,174.341 188.982,174.720 187.915 C 175.731 185.070,178.990 180.422,181.682 177.985 L 184.035 175.856 181.054 171.717 C 177.510 166.797,178.456 166.945,174.496 170.693 M274.148 174.544 C 267.630 176.768,268.156 176.100,269.295 180.707 C 270.672 186.277,271.160 189.698,271.436 195.727 L 271.680 201.056 277.734 196.617 L 283.789 192.177 283.670 190.327 C 283.352 185.377,280.678 173.016,279.883 172.818 C 279.668 172.765,277.087 173.542,274.148 174.544 M200.391 198.242 L 200.391 222.656 201.465 222.649 C 204.884 222.628,213.385 219.561,213.925 218.155 C 214.045 217.843,211.350 213.753,207.616 208.581 C 204.032 203.615,201.167 199.485,201.249 199.402 C 201.332 199.319,206.282 200.808,212.249 202.710 L 223.098 206.168 223.434 205.282 C 224.641 202.108,224.693 192.896,223.511 191.714 C 223.345 191.548,218.219 193.078,212.119 195.114 C 206.020 197.150,200.956 198.743,200.867 198.653 C 200.778 198.564,203.801 194.162,207.586 188.872 C 211.371 183.582,214.508 179.062,214.558 178.828 C 214.836 177.518,205.405 173.828,201.778 173.828 L 200.391 173.828 200.391 198.242 M259.466 179.449 C 254.718 181.027,253.551 181.552,253.745 182.024 C 256.352 188.366,256.643 206.134,254.243 212.447 C 253.604 214.128,254.151 213.831,261.255 208.647 C 267.227 204.289,268.294 203.356,268.504 202.306 C 269.336 198.142,267.920 185.321,265.937 179.065 L 265.430 177.466 259.466 179.449 M183.304 180.370 C 180.031 183.471,176.067 189.995,176.988 190.764 C 177.302 191.026,200.000 198.332,200.000 198.170 C 200.000 198.055,186.655 179.370,185.752 178.222 C 185.710 178.167,184.608 179.134,183.304 180.370 M244.575 184.395 C 237.895 186.666,238.620 186.079,239.294 188.672 C 240.729 194.199,240.651 202.769,239.115 208.310 C 238.712 209.764,238.491 211.015,238.624 211.090 C 239.215 211.421,250.485 214.879,250.600 214.764 C 250.898 214.466,252.363 208.182,252.721 205.664 C 253.767 198.304,252.348 183.024,250.577 182.581 C 250.367 182.528,247.666 183.345,244.575 184.395 M230.664 188.936 C 228.301 189.693,226.342 190.339,226.311 190.371 C 226.280 190.403,226.517 191.660,226.838 193.164 C 227.515 196.345,227.312 202.251,226.424 205.168 L 225.862 207.016 230.595 208.556 C 233.197 209.404,235.445 210.024,235.589 209.935 C 237.859 208.532,237.797 187.905,235.521 187.628 C 235.213 187.591,233.027 188.179,230.664 188.936 M188.103 202.528 C 182.097 204.519,177.135 206.303,177.076 206.492 C 176.585 208.081,185.244 219.360,186.126 218.279 C 186.432 217.906,199.541 199.646,199.769 199.277 C 200.220 198.547,199.536 198.738,188.103 202.528 M169.239 208.747 C 163.748 210.561,163.990 210.018,166.455 215.001 C 168.944 220.029,174.681 226.880,177.806 228.554 C 178.380 228.861,184.850 220.891,184.304 220.548 C 181.204 218.603,177.533 214.246,175.445 210.034 L 174.023 207.167 169.239 208.747 M155.469 213.231 C 148.792 215.424,149.032 214.897,151.934 220.971 C 155.375 228.174,160.982 235.301,166.734 239.782 C 169.417 241.871,168.922 242.120,172.813 236.727 C 176.981 230.952,176.874 231.294,174.955 229.883 C 170.548 226.641,165.449 220.054,163.015 214.457 C 161.462 210.885,162.232 211.010,155.469 213.231 M145.322 226.172 C 143.975 230.361,142.730 234.168,142.554 234.631 C 141.772 236.694,157.478 253.906,160.143 253.906 C 160.443 253.906,167.089 244.868,167.293 244.182 C 167.342 244.016,166.025 242.786,164.366 241.448 C 157.775 236.134,150.080 225.671,147.960 219.141 C 147.855 218.818,146.668 221.982,145.322 226.172 M215.039 220.958 C 212.490 222.982,205.475 225.373,202.051 225.385 L 200.391 225.391 200.391 230.619 L 200.391 235.848 203.027 235.647 C 208.645 235.221,217.437 232.147,221.059 229.342 L 222.001 228.613 219.106 224.477 C 215.905 219.906,216.125 220.096,215.039 220.958 M222.266 231.914 C 217.976 234.998,209.637 237.905,203.418 238.482 L 200.391 238.764 200.391 245.187 L 200.391 251.610 203.223 251.361 C 212.892 250.513,221.472 247.703,228.845 242.970 L 231.323 241.380 230.374 240.124 C 229.852 239.433,228.231 237.197,226.772 235.156 C 225.313 233.115,224.010 231.329,223.876 231.188 C 223.742 231.046,223.018 231.373,222.266 231.914 M138.937 245.837 C 137.717 249.564,136.719 252.875,136.719 253.196 C 136.719 254.470,150.212 266.669,151.232 266.318 C 151.402 266.259,153.116 264.038,155.040 261.383 L 158.538 256.555 155.538 254.181 C 151.633 251.089,146.846 246.243,143.751 242.250 C 142.392 240.497,141.252 239.063,141.217 239.063 C 141.183 239.063,140.157 242.111,138.937 245.837 M230.664 245.149 C 224.129 249.686,215.078 252.814,204.501 254.189 L 202.167 254.492 209.189 259.668 C 217.134 265.524,215.983 265.208,222.070 263.200 C 226.439 261.760,233.206 258.493,237.228 255.884 L 240.277 253.906 238.791 251.835 C 237.973 250.697,236.338 248.414,235.156 246.764 C 233.975 245.113,232.920 243.770,232.813 243.778 C 232.705 243.786,231.738 244.403,230.664 245.149 M239.063 258.048 C 235.631 260.413,227.139 264.550,222.952 265.895 C 221.074 266.498,219.546 267.080,219.557 267.188 C 219.568 267.295,222.307 269.372,225.644 271.803 L 231.709 276.223 236.851 273.676 C 239.679 272.276,243.630 270.066,245.631 268.766 L 249.269 266.402 248.373 265.135 C 241.293 255.126,242.248 255.853,239.063 258.048 M135.427 256.915 C 134.905 257.774,116.784 314.180,116.971 314.366 C 117.090 314.486,117.188 314.378,117.188 314.128 C 117.188 313.877,117.407 313.716,117.676 313.770 C 117.944 313.823,118.116 313.636,118.058 313.353 C 117.999 313.071,124.943 303.152,133.488 291.311 C 142.032 279.471,149.144 269.587,149.291 269.346 C 149.451 269.086,148.500 268.125,146.948 266.977 C 145.511 265.915,142.374 263.146,139.976 260.824 C 137.578 258.502,135.531 256.743,135.427 256.915 M247.070 271.148 C 245.137 272.429,241.487 274.518,238.959 275.789 L 234.364 278.102 237.983 280.806 C 252.802 291.879,283.758 314.419,283.922 314.256 C 284.032 314.145,283.846 313.837,283.508 313.570 C 283.170 313.304,275.745 303.154,267.009 291.016 C 258.272 278.877,251.003 268.917,250.855 268.883 C 250.707 268.848,249.004 269.868,247.070 271.148 \" stroke=\"none\" fill=\"#daa126\" fill-rule=\"evenodd\"></path><path id=\"path3\" d=\"M194.531 12.748 C 194.531 12.885,194.950 13.385,195.462 13.859 C 196.374 14.705,196.399 14.906,196.680 23.901 C 196.983 33.607,196.895 34.583,195.683 34.967 C 193.949 35.518,195.140 35.938,198.438 35.938 C 202.253 35.938,202.404 35.859,201.041 34.596 C 200.187 33.805,200.112 33.366,199.869 27.751 C 199.340 15.536,199.548 13.281,201.200 13.281 C 201.399 13.281,201.563 13.105,201.563 12.891 C 201.563 12.659,200.130 12.500,198.047 12.500 C 196.113 12.500,194.531 12.612,194.531 12.748 M204.944 13.067 C 204.320 14.693,204.654 18.359,205.426 18.359 C 205.883 18.359,206.256 17.997,206.403 17.413 C 207.057 14.807,210.780 12.993,212.318 14.531 C 212.558 14.771,211.057 33.250,210.730 34.085 C 210.582 34.463,210.041 34.878,209.527 35.007 C 207.259 35.576,208.755 36.116,213.574 36.467 C 216.205 36.658,216.957 36.314,215.428 35.617 C 214.021 34.976,213.981 34.260,214.794 24.099 C 215.651 13.387,215.312 14.459,217.728 14.832 C 219.756 15.145,220.191 15.570,220.932 17.966 C 221.682 20.390,223.046 20.096,223.052 17.508 C 223.055 16.365,223.156 15.063,223.276 14.615 C 223.488 13.828,223.286 13.785,217.314 13.336 C 213.914 13.081,209.798 12.765,208.167 12.635 C 205.593 12.429,205.167 12.486,204.944 13.067 M183.080 13.288 C 176.293 15.325,177.133 22.144,184.598 25.609 C 188.836 27.576,189.844 28.653,189.844 31.216 C 189.844 36.062,182.974 37.151,181.236 32.580 C 180.448 30.508,179.158 31.377,179.442 33.789 C 179.581 34.971,179.593 35.938,179.470 35.937 C 178.744 35.937,177.526 34.819,175.233 32.048 C 173.810 30.328,172.100 28.638,171.432 28.293 L 170.218 27.665 171.681 26.460 C 177.102 21.991,174.010 15.211,166.797 15.748 C 160.449 16.220,155.610 17.527,157.993 18.126 C 159.197 18.428,159.371 19.030,161.136 28.989 C 162.745 38.069,162.742 38.025,161.650 39.043 C 160.405 40.203,160.805 40.277,164.571 39.586 C 167.464 39.054,169.166 38.281,167.443 38.281 C 166.370 38.281,165.657 36.810,165.007 33.258 C 164.261 29.180,164.359 28.923,166.667 28.912 C 168.643 28.903,168.966 29.162,172.316 33.439 C 175.618 37.657,175.750 37.737,178.320 37.085 C 179.180 36.868,181.420 36.703,183.299 36.720 C 189.372 36.773,192.228 35.215,192.778 31.549 C 193.342 27.789,191.644 25.591,186.267 23.122 C 182.483 21.384,181.534 20.346,181.534 17.948 C 181.534 14.071,186.839 12.789,189.030 16.136 C 190.423 18.263,191.406 18.084,191.406 15.703 C 191.406 14.672,191.195 13.617,190.938 13.359 C 190.398 12.820,184.808 12.769,183.080 13.288 M225.000 14.204 C 225.000 14.317,225.358 15.015,225.795 15.756 C 226.232 16.497,227.465 19.715,228.534 22.907 L 230.479 28.711 229.862 32.031 C 229.170 35.753,228.487 37.109,227.302 37.109 C 225.198 37.109,227.195 38.122,230.399 38.680 C 233.996 39.306,234.945 39.069,233.203 37.981 C 231.607 36.984,232.670 30.306,234.846 27.659 C 238.839 22.802,241.785 19.627,243.082 18.782 C 244.855 17.627,244.851 17.623,241.378 16.961 C 238.586 16.429,237.193 16.571,238.426 17.261 C 239.961 18.120,239.145 19.913,235.028 24.728 C 232.742 27.402,232.854 27.474,231.274 22.328 C 229.890 17.823,229.870 16.779,231.152 16.216 C 232.514 15.618,232.227 15.373,229.590 14.880 C 228.247 14.629,226.665 14.328,226.074 14.212 C 225.483 14.096,225.000 14.092,225.000 14.204 M168.926 17.797 C 170.799 19.024,171.630 22.830,170.501 25.013 C 169.340 27.258,164.297 28.703,163.894 26.906 C 163.677 25.939,162.508 19.365,162.379 18.385 C 162.224 17.216,167.338 16.756,168.926 17.797 M144.435 20.843 C 137.369 22.890,136.765 23.168,138.465 23.595 C 139.779 23.925,139.852 24.102,142.549 33.493 C 145.132 42.486,145.238 43.144,144.273 44.210 C 143.184 45.413,143.704 45.335,151.332 43.148 C 160.068 40.644,159.059 41.383,158.323 38.031 C 157.561 34.559,156.502 34.339,156.119 37.574 C 155.991 38.653,155.683 39.781,155.435 40.080 C 154.870 40.761,148.756 42.670,148.393 42.279 C 148.009 41.866,145.605 33.171,145.816 32.960 C 145.914 32.862,147.008 32.494,148.249 32.141 L 150.505 31.499 151.437 32.583 C 152.625 33.965,153.722 33.701,153.337 32.125 C 152.300 27.882,151.922 27.034,151.156 27.235 C 150.629 27.373,150.391 27.771,150.391 28.513 C 150.391 29.939,145.803 32.410,145.173 31.324 C 144.873 30.805,142.969 23.870,142.969 23.294 C 142.969 22.697,146.108 21.581,148.849 21.203 C 150.066 21.035,150.390 21.185,151.469 22.414 C 153.611 24.854,154.507 23.363,153.109 19.685 C 152.648 18.472,152.597 18.479,144.435 20.843 M256.836 24.179 C 250.471 27.846,247.959 39.492,252.602 43.803 C 259.165 49.896,267.518 45.485,269.758 34.742 C 271.516 26.309,263.919 20.099,256.836 24.179 M130.469 25.667 C 128.857 26.429,127.715 27.102,127.930 27.164 C 128.145 27.225,128.774 27.374,129.328 27.496 C 129.918 27.624,130.537 28.159,130.822 28.785 C 131.241 29.703,132.951 45.695,132.662 45.984 C 132.535 46.111,123.121 35.016,122.171 33.619 C 121.334 32.389,121.292 31.115,122.066 30.472 C 123.514 29.270,121.959 29.499,118.765 30.958 C 115.116 32.625,114.844 32.949,116.775 33.335 C 117.685 33.517,119.531 35.390,125.200 41.882 C 135.438 53.607,135.048 53.773,133.967 38.142 C 133.265 27.985,133.247 26.751,133.781 25.679 C 134.736 23.765,134.497 23.764,130.469 25.667 M264.484 25.276 C 269.893 28.471,264.885 44.922,258.504 44.922 C 253.722 44.922,252.118 40.222,254.437 33.008 C 256.703 25.959,260.584 22.972,264.484 25.276 M277.344 29.506 C 277.344 29.621,277.618 30.134,277.954 30.646 C 278.958 32.178,270.340 48.964,268.457 49.146 C 266.507 49.334,266.909 49.851,270.353 51.583 C 273.553 53.192,274.490 53.331,273.305 52.022 C 272.374 50.994,272.453 50.616,274.481 46.387 C 276.538 42.096,276.313 42.241,278.897 43.550 C 280.693 44.460,280.822 44.626,280.934 46.183 C 281.129 48.874,282.017 48.519,283.724 45.070 C 284.883 42.727,285.095 41.999,284.694 41.744 C 283.955 41.276,283.795 41.317,283.008 42.188 C 282.044 43.252,279.188 42.749,277.417 41.204 C 277.314 41.114,281.132 33.239,281.451 32.885 C 281.623 32.693,286.442 35.172,287.207 35.847 C 287.677 36.261,287.891 37.027,287.891 38.300 C 287.891 39.892,288.694 41.198,289.267 40.537 C 289.580 40.175,291.436 36.231,291.335 36.144 C 290.342 35.290,277.344 29.123,277.344 29.506 M109.766 35.585 C 106.863 37.330,106.468 37.891,108.144 37.891 C 109.585 37.891,109.573 37.875,114.978 47.298 C 119.375 54.966,119.409 55.049,118.667 56.238 C 117.827 57.583,118.565 57.465,121.610 55.766 C 124.856 53.955,125.217 53.516,123.464 53.516 C 122.068 53.516,122.087 53.542,116.669 44.109 C 112.703 37.204,112.003 35.509,112.891 34.961 C 113.443 34.620,113.376 33.977,112.793 34.022 C 112.524 34.042,111.162 34.746,109.766 35.585 M101.897 40.192 C 99.471 41.743,99.096 42.373,100.583 42.401 C 101.120 42.411,101.713 42.587,101.901 42.792 C 102.590 43.543,110.553 55.925,110.262 55.792 C 110.096 55.716,105.901 53.604,100.939 51.098 L 91.916 46.541 89.673 48.030 C 87.913 49.199,86.975 50.854,88.664 49.810 C 89.534 49.272,90.724 50.707,95.198 57.694 C 101.199 67.066,100.980 66.630,100.243 67.755 C 99.273 69.236,99.915 69.166,102.570 67.501 C 105.410 65.720,105.614 65.336,103.809 65.161 C 102.728 65.057,92.502 51.105,93.088 50.534 C 93.130 50.493,97.749 52.760,103.352 55.571 C 117.393 62.616,117.278 62.707,109.566 50.666 C 104.153 42.214,103.364 40.543,104.331 39.575 C 105.369 38.537,103.905 38.908,101.897 40.192 M299.332 44.460 C 297.828 46.594,297.774 46.761,298.456 47.187 C 298.925 47.480,299.268 47.503,299.422 47.252 C 300.535 45.451,303.387 45.144,305.375 46.611 L 306.595 47.510 301.903 54.126 C 295.134 63.671,295.133 63.672,293.536 63.672 C 291.639 63.672,291.831 63.983,295.177 66.331 C 298.222 68.468,298.930 68.643,298.075 67.046 C 297.415 65.812,297.811 65.104,304.074 56.336 L 309.124 49.265 310.242 50.061 C 312.236 51.481,312.657 52.481,312.134 54.556 C 311.323 57.778,312.366 58.008,314.432 55.063 C 315.357 53.744,315.957 52.529,315.770 52.352 C 314.974 51.604,301.510 42.188,301.236 42.188 C 301.071 42.188,300.214 43.210,299.332 44.460 M184.527 43.176 C 57.096 55.818,-2.811 208.311,81.945 304.297 C 162.082 395.052,311.177 364.678,349.424 249.805 C 385.392 141.776,297.743 31.944,184.527 43.176 M81.496 54.676 C 79.013 56.849,78.827 57.280,80.446 57.109 C 82.377 56.906,92.964 69.490,92.967 71.992 C 92.972 75.469,89.011 77.957,85.972 76.385 C 83.271 74.988,74.060 63.464,74.439 61.955 C 74.799 60.518,74.484 60.653,71.664 63.144 C 69.009 65.489,68.810 65.986,70.634 65.719 C 71.680 65.565,72.197 66.038,77.109 71.641 C 84.717 80.320,86.516 80.984,91.719 77.029 C 97.441 72.679,96.405 69.643,84.677 56.398 C 83.883 55.502,83.712 54.498,84.169 53.418 C 84.663 52.252,83.805 52.656,81.496 54.676 M209.740 83.887 C 220.433 117.276,218.699 113.231,222.778 114.314 C 242.601 119.576,260.243 132.302,272.247 150.000 L 275.029 154.102 305.260 154.297 L 335.492 154.492 311.109 172.266 L 286.726 190.039 286.715 197.656 C 286.683 218.800,280.416 236.870,267.612 252.734 C 266.312 254.346,265.247 255.840,265.247 256.055 C 265.246 256.270,269.462 269.439,274.614 285.320 C 279.766 301.202,283.923 314.254,283.851 314.326 C 283.779 314.398,272.603 306.280,259.015 296.287 L 234.309 278.117 230.686 279.474 C 211.519 286.653,190.648 286.911,171.377 280.207 C 168.609 279.244,166.138 278.539,165.887 278.639 C 165.635 278.740,154.532 286.841,141.212 296.641 C 127.892 306.441,116.955 314.326,116.907 314.163 C 116.859 314.000,121.019 300.959,126.152 285.183 L 135.483 256.499 133.213 253.738 C 119.899 237.550,113.877 220.981,113.329 199.037 L 113.086 189.286 89.177 171.889 C 76.027 162.321,65.261 154.379,65.251 154.240 C 65.242 154.101,78.642 154.084,95.029 154.201 L 124.824 154.415 126.963 151.150 C 139.022 132.744,156.779 119.819,177.787 114.156 L 181.754 113.086 190.971 84.277 C 196.040 68.433,200.289 55.469,200.414 55.469 C 200.538 55.469,204.735 68.257,209.740 83.887 M319.723 56.626 C 320.170 58.657,306.942 72.364,304.910 71.976 C 303.456 71.698,303.649 72.034,306.479 74.706 C 308.771 76.870,309.787 77.281,308.943 75.704 C 308.437 74.758,308.800 74.191,312.371 70.350 C 315.534 66.947,315.233 66.912,319.412 71.164 L 322.223 74.023 318.945 77.494 C 315.957 80.658,315.565 80.945,314.520 80.736 C 312.701 80.372,312.833 80.739,315.415 83.218 C 318.169 85.863,318.524 86.014,318.167 84.390 C 317.716 82.334,330.940 68.664,333.027 69.031 C 334.108 69.221,334.024 69.074,331.671 66.667 C 329.312 64.254,328.024 63.586,328.905 65.232 C 329.464 66.276,329.556 66.107,326.541 69.529 C 323.175 73.349,323.528 73.354,319.630 69.434 L 316.426 66.211 319.308 63.127 C 321.975 60.273,322.280 60.062,323.400 60.285 C 325.083 60.622,324.936 60.260,322.352 57.703 C 319.787 55.164,319.364 54.991,319.723 56.626 M336.842 73.085 C 336.960 73.535,336.957 74.162,336.835 74.478 C 336.414 75.577,322.189 87.572,321.530 87.384 C 321.183 87.285,320.723 87.139,320.508 87.059 C 319.252 86.592,320.430 88.334,324.828 93.446 L 329.775 99.197 332.109 97.401 C 334.980 95.192,334.753 94.019,331.666 95.108 C 329.181 95.985,329.002 95.921,326.517 93.262 C 323.625 90.168,323.569 90.446,327.832 86.756 L 331.445 83.628 332.894 85.271 C 334.364 86.939,334.683 88.148,333.993 89.438 C 332.998 91.296,334.625 91.070,337.060 89.011 C 339.749 86.736,339.780 85.863,337.161 86.215 C 335.799 86.397,335.565 86.279,334.246 84.738 C 332.416 82.599,332.296 82.949,335.974 79.703 C 339.601 76.502,339.180 76.540,341.521 79.193 C 344.203 82.232,344.305 82.523,343.407 84.553 C 342.239 87.193,343.134 87.708,345.507 85.763 C 347.752 83.924,348.036 84.616,342.326 77.994 C 337.503 72.401,336.406 71.419,336.842 73.085 M57.724 77.655 C 52.467 83.037,52.508 88.150,57.849 93.412 C 63.675 99.150,70.149 99.970,73.734 95.425 C 77.696 90.403,77.940 89.335,75.542 87.528 C 73.370 85.890,72.085 86.782,73.645 88.844 C 75.011 90.650,73.765 94.368,71.476 95.316 C 66.431 97.406,55.855 89.582,55.861 83.763 C 55.864 80.519,58.432 78.389,61.390 79.179 C 64.485 80.005,63.792 77.734,60.321 75.677 C 60.089 75.540,58.921 76.430,57.724 77.655 M47.016 91.699 C 46.427 92.505,45.521 93.747,45.003 94.459 C 43.959 95.896,44.053 96.377,45.253 95.735 C 46.475 95.081,46.365 95.023,53.759 100.233 C 62.043 106.069,63.006 106.908,62.722 108.041 C 62.285 109.781,63.089 109.265,65.062 106.540 C 67.285 103.468,67.389 102.969,65.670 103.618 C 64.623 104.013,64.260 103.841,60.301 101.058 C 48.761 92.950,48.628 92.839,48.690 91.484 C 48.766 89.850,48.326 89.906,47.016 91.699 M354.688 96.074 C 354.688 97.463,354.544 97.575,345.291 103.455 C 338.417 107.823,337.638 108.185,336.831 107.378 C 335.377 105.924,335.755 107.641,337.467 110.262 C 339.645 113.599,340.048 113.877,340.043 112.035 C 340.039 110.720,341.829 109.036,345.313 107.078 L 346.805 106.239 347.682 107.710 C 350.541 112.497,354.326 114.087,358.182 112.120 C 362.799 109.765,362.748 106.543,357.976 99.073 C 355.160 94.667,354.688 94.236,354.688 96.074 M40.114 101.956 C 39.010 103.983,38.777 104.688,39.212 104.688 C 39.534 104.688,39.906 104.512,40.039 104.297 C 40.527 103.508,41.691 103.984,48.409 107.715 L 55.267 111.523 44.799 111.719 L 34.332 111.914 33.098 114.142 C 31.786 116.511,31.830 117.256,33.225 116.278 C 34.333 115.502,34.323 115.498,42.969 120.499 C 51.111 125.209,51.563 125.541,51.563 126.818 C 51.563 128.281,52.074 127.903,53.601 125.314 C 55.136 122.711,55.183 121.923,53.746 122.865 C 52.653 123.581,52.410 123.496,47.656 120.748 C 45.615 119.568,42.363 117.760,40.430 116.731 C 38.496 115.701,37.090 114.828,37.305 114.790 C 38.054 114.658,40.496 114.609,50.230 114.532 L 60.031 114.453 60.471 113.486 C 60.967 112.398,61.865 113.019,50.000 106.248 C 42.422 101.923,42.188 101.747,42.188 100.364 C 42.188 98.624,41.742 98.966,40.114 101.956 M358.192 102.051 C 361.895 108.508,353.727 113.532,349.216 107.571 C 347.638 105.486,347.580 105.587,352.058 102.671 C 356.918 99.508,356.743 99.525,358.192 102.051 M365.625 113.787 C 365.625 115.144,365.409 115.274,356.367 119.363 C 348.022 123.137,346.929 123.467,346.097 122.465 C 344.946 121.079,345.098 122.509,346.408 125.393 C 347.966 128.822,348.230 129.065,348.567 127.380 C 348.755 126.438,349.246 126.030,351.448 124.986 C 355.107 123.249,357.513 122.226,357.634 122.353 C 357.880 122.616,361.328 130.509,361.328 130.812 C 361.328 131.207,353.507 134.766,352.638 134.766 C 352.314 134.766,351.824 134.495,351.549 134.163 C 350.359 132.730,350.479 134.457,351.762 137.234 C 353.165 140.270,353.906 140.990,353.906 139.318 C 353.906 137.943,354.601 137.518,363.172 133.646 C 371.028 130.097,372.470 129.658,373.353 130.540 C 374.395 131.583,374.247 130.320,373.002 127.552 C 371.691 124.636,371.094 123.940,371.094 125.330 C 371.094 126.390,370.115 127.111,366.284 128.873 L 362.845 130.454 362.317 129.192 C 362.026 128.498,361.156 126.540,360.382 124.842 C 359.607 123.144,359.063 121.666,359.172 121.557 C 359.595 121.134,366.140 118.359,366.714 118.359 C 367.048 118.359,367.625 118.634,367.997 118.971 C 369.203 120.063,369.119 118.967,367.767 116.002 C 366.377 112.953,365.625 112.175,365.625 113.787 M176.089 117.598 C 157.465 123.233,140.891 135.441,130.141 151.443 C 129.247 152.774,128.516 153.961,128.516 154.080 C 128.516 154.199,131.899 154.296,136.035 154.294 L 143.555 154.291 145.508 151.909 C 151.867 144.154,162.139 136.586,171.875 132.484 C 174.131 131.534,176.009 130.732,176.049 130.703 C 176.189 130.600,180.469 117.090,180.469 116.750 C 180.469 116.281,180.397 116.295,176.089 117.598 M220.321 116.895 C 220.326 116.948,221.344 120.144,222.585 123.997 L 224.840 131.002 228.924 132.818 C 238.622 137.130,248.297 144.353,254.492 151.909 L 256.445 154.291 263.965 154.294 C 268.101 154.296,271.484 154.199,271.484 154.080 C 271.484 152.735,263.639 143.033,258.536 138.069 C 251.319 131.047,245.353 126.876,236.133 122.403 C 230.397 119.621,220.250 116.086,220.321 116.895 M28.175 124.663 C 26.877 127.978,26.848 128.694,28.056 127.602 C 28.450 127.245,29.065 126.953,29.423 126.953 C 30.208 126.953,37.109 129.678,37.109 129.989 C 37.109 130.527,33.839 138.672,33.623 138.672 C 33.111 138.672,27.105 136.252,26.270 135.709 C 25.748 135.371,25.391 134.744,25.391 134.171 C 25.391 132.460,24.835 133.132,23.543 136.403 C 22.117 140.014,22.122 140.109,23.678 139.234 C 25.658 138.119,43.359 145.397,43.359 147.326 C 43.359 148.820,44.060 147.946,45.208 145.020 C 46.446 141.864,46.487 140.929,45.341 141.967 C 44.969 142.303,44.358 142.578,43.983 142.578 C 43.265 142.578,35.156 139.508,35.156 139.236 C 35.156 138.855,38.371 131.023,38.643 130.742 C 38.809 130.571,40.334 130.980,42.031 131.653 C 47.196 133.699,47.677 133.989,47.921 135.211 C 48.257 136.891,48.517 136.616,49.895 133.128 C 51.321 129.516,51.316 129.417,49.759 130.310 C 48.647 130.949,48.521 130.914,40.624 127.820 C 30.102 123.696,30.459 123.876,30.200 122.582 C 29.860 120.881,29.517 121.233,28.175 124.663 M170.077 136.465 C 162.467 140.201,156.953 144.166,151.005 150.181 L 147.126 154.102 156.023 154.207 L 164.919 154.312 167.327 152.594 C 169.335 151.161,169.814 150.592,170.212 149.168 C 170.475 148.229,171.641 144.517,172.805 140.918 C 173.968 137.319,174.788 134.375,174.627 134.375 C 174.466 134.375,172.419 135.315,170.077 136.465 M226.378 135.645 C 226.500 136.128,227.702 139.948,229.049 144.133 L 231.499 151.743 233.287 153.027 L 235.075 154.312 243.974 154.207 L 252.874 154.102 248.995 150.181 C 243.210 144.331,237.788 140.392,230.466 136.718 C 225.974 134.463,226.088 134.493,226.378 135.645 M375.216 135.845 C 374.899 137.287,374.779 137.343,364.854 140.674 C 356.040 143.634,356.031 143.636,355.009 142.711 C 353.788 141.606,353.765 142.422,354.925 145.687 C 356.117 149.041,356.415 149.388,356.798 147.863 C 357.122 146.573,357.495 146.403,366.765 143.305 C 375.451 140.402,375.950 140.303,377.022 141.274 C 378.169 142.312,378.184 141.744,377.094 138.448 C 375.874 134.756,375.552 134.311,375.216 135.845 M20.448 145.995 C 16.799 154.246,19.800 159.908,29.086 162.293 C 36.801 164.274,40.918 161.836,42.395 154.412 C 43.218 150.275,43.143 150.000,41.016 149.365 C 37.759 148.392,37.061 149.229,39.366 151.342 C 42.860 154.544,39.988 159.763,34.730 159.765 C 32.391 159.766,27.536 158.511,25.100 157.277 C 19.260 154.318,18.636 148.191,24.036 146.831 C 26.584 146.189,26.405 145.224,23.593 144.441 L 21.405 143.832 20.448 145.995 M378.516 145.252 C 378.516 146.606,377.122 147.230,368.935 149.543 C 358.286 152.550,359.156 152.396,357.992 151.480 C 357.441 151.047,356.937 150.756,356.871 150.834 C 356.713 151.023,360.686 165.113,360.980 165.407 C 361.276 165.703,367.414 164.260,367.285 163.925 C 367.231 163.786,367.188 163.423,367.188 163.118 C 367.188 162.707,366.651 162.569,365.108 162.583 C 362.022 162.611,361.489 162.168,360.420 158.683 C 359.307 155.056,358.350 155.726,368.864 152.778 C 377.987 150.220,379.430 149.999,380.029 151.071 C 380.892 152.612,380.917 150.975,380.080 147.859 C 379.251 144.775,378.516 143.549,378.516 145.252 M382.981 163.834 C 382.659 165.119,381.863 165.364,372.788 166.968 C 363.461 168.616,362.749 168.651,361.945 167.504 C 360.830 165.912,360.824 167.935,361.930 172.949 C 362.139 173.894,362.891 174.171,362.891 173.303 C 362.891 172.041,364.499 171.530,373.556 169.918 L 382.855 168.263 383.738 169.092 C 385.050 170.325,385.077 170.222,384.425 166.406 C 383.816 162.845,383.411 162.122,382.981 163.834 M15.492 165.476 C 14.910 168.487,13.623 179.769,13.837 179.983 C 13.971 180.117,14.350 179.841,14.680 179.371 C 15.459 178.258,16.178 178.275,26.465 179.652 C 34.488 180.726,35.938 181.128,35.938 182.274 C 35.938 182.570,36.113 182.813,36.328 182.813 C 36.543 182.813,36.719 182.769,36.720 182.715 C 36.721 182.661,37.160 179.189,37.695 175.000 C 38.231 170.811,38.669 167.361,38.670 167.335 C 38.671 167.309,37.925 167.172,37.012 167.032 C 36.099 166.891,34.780 166.673,34.082 166.548 C 32.981 166.350,32.813 166.428,32.813 167.139 C 32.813 167.693,33.224 168.132,34.082 168.496 C 36.589 169.557,36.893 170.271,36.435 174.042 C 35.921 178.287,36.601 178.082,27.586 176.708 L 26.071 176.477 26.293 174.331 C 26.528 172.054,27.378 170.703,28.576 170.703 C 30.120 170.703,29.397 169.224,27.734 168.980 C 26.875 168.853,25.469 168.647,24.609 168.520 C 22.695 168.239,22.379 169.394,24.068 170.501 C 25.058 171.150,25.383 175.138,24.517 176.004 C 24.021 176.500,15.625 175.282,15.625 174.714 C 15.625 170.429,16.864 167.484,18.958 166.793 C 20.076 166.424,20.997 165.398,20.583 164.984 C 20.507 164.908,19.379 164.734,18.077 164.598 L 15.710 164.351 15.492 165.476 M385.156 174.796 C 385.156 176.119,383.482 176.475,374.046 177.158 L 364.694 177.835 363.755 176.710 L 362.816 175.586 363.069 179.285 C 363.308 182.781,363.582 183.945,363.935 182.966 C 364.567 181.209,366.475 180.519,370.783 180.486 C 373.284 180.467,373.031 180.081,373.635 184.835 C 374.475 191.443,383.437 193.439,386.023 187.593 C 386.810 185.814,386.834 179.865,386.072 175.488 C 385.851 174.224,385.156 173.698,385.156 174.796 M385.080 181.805 C 385.290 185.881,383.761 187.583,379.839 187.640 C 376.415 187.689,374.685 185.741,374.631 181.776 L 374.609 180.153 378.809 179.892 C 381.118 179.749,383.184 179.568,383.398 179.491 C 384.606 179.055,384.963 179.546,385.080 181.805 M12.889 186.035 C 12.889 187.378,12.773 191.509,12.633 195.215 L 12.377 201.953 15.368 201.953 C 19.064 201.953,19.626 200.980,16.597 199.824 C 14.527 199.033,14.063 198.326,14.063 195.964 L 14.063 194.220 21.387 194.384 C 33.887 194.662,35.156 194.880,35.156 196.740 C 35.156 197.029,35.332 197.266,35.547 197.266 C 35.781 197.266,35.938 195.703,35.938 193.359 C 35.938 191.016,35.781 189.453,35.547 189.453 C 35.332 189.453,35.156 189.695,35.156 189.991 C 35.156 191.456,34.169 191.596,24.653 191.478 C 13.700 191.342,14.063 191.411,14.063 189.479 C 14.063 187.558,15.143 186.206,17.161 185.601 C 20.119 184.715,19.370 183.594,15.820 183.594 L 12.891 183.594 12.889 186.035 M116.016 197.476 C 116.016 217.612,123.194 237.876,135.224 251.704 L 136.536 253.213 138.852 246.108 C 140.939 239.702,141.113 238.921,140.618 238.154 C 133.692 227.426,129.691 215.858,128.684 203.647 L 128.421 200.459 122.456 196.128 C 119.176 193.746,116.385 191.797,116.254 191.797 C 116.123 191.797,116.016 194.353,116.016 197.476 M277.734 196.616 L 271.680 201.052 271.395 203.358 C 270.194 213.085,268.977 218.258,266.328 224.909 C 265.418 227.193,263.479 231.148,262.018 233.698 L 259.363 238.333 261.615 245.332 C 262.854 249.181,263.987 252.333,264.133 252.337 C 264.420 252.344,269.130 246.098,270.755 243.555 C 279.587 229.728,284.298 213.118,283.910 197.164 L 283.789 192.180 277.734 196.616 M364.256 197.288 C 364.004 200.473,364.251 202.239,364.751 200.830 C 365.338 199.175,366.301 198.828,370.313 198.828 L 374.219 198.828 374.219 201.870 C 374.219 208.004,377.768 211.352,383.008 210.162 C 386.392 209.393,387.500 206.593,387.500 198.809 C 387.500 194.196,387.270 193.307,386.518 195.020 L 386.133 195.898 376.422 195.791 C 366.806 195.685,365.234 195.479,365.234 194.322 C 365.234 192.141,364.483 194.418,364.256 197.288 M381.782 199.213 L 386.026 199.219 385.871 201.957 C 385.650 205.860,384.655 206.836,380.892 206.836 C 377.075 206.836,375.391 205.065,375.391 201.054 C 375.391 199.088,375.647 198.700,376.748 198.995 C 377.183 199.112,379.449 199.210,381.782 199.213 M12.420 205.761 C 12.579 209.379,12.760 209.803,13.645 208.630 C 14.574 207.398,15.787 207.636,20.805 210.035 L 24.618 211.858 21.977 213.536 C 20.524 214.459,18.402 215.702,17.261 216.299 L 15.186 217.383 14.464 216.504 C 13.304 215.092,13.173 215.429,13.470 219.043 C 13.807 223.141,13.738 223.041,15.206 221.572 C 15.855 220.924,18.719 218.908,21.572 217.091 L 26.758 213.789 30.078 213.543 C 34.074 213.247,34.922 213.433,35.514 214.732 C 36.141 216.108,36.500 215.555,36.400 213.366 C 36.179 208.532,35.567 206.515,35.002 208.763 C 34.709 209.932,33.955 210.184,29.706 210.533 L 26.367 210.808 20.218 207.747 C 16.835 206.063,13.849 204.334,13.581 203.905 C 12.673 202.452,12.301 203.047,12.420 205.761 M131.799 205.762 C 132.708 214.774,137.870 229.727,141.655 234.314 L 142.411 235.230 145.053 226.981 L 147.695 218.732 146.808 215.977 L 145.921 213.222 138.978 208.174 C 130.826 202.246,131.466 202.461,131.799 205.762 M261.058 208.733 C 254.311 213.608,253.919 213.962,253.304 215.744 L 252.657 217.621 255.270 225.705 C 256.708 230.151,258.021 233.934,258.190 234.112 C 258.550 234.490,262.280 227.342,264.055 222.871 C 266.092 217.742,269.057 204.440,268.318 203.744 C 268.233 203.664,264.966 205.909,261.058 208.733 M363.485 214.676 C 363.183 218.309,363.362 218.975,364.289 217.652 C 365.033 216.591,366.436 216.560,376.555 217.382 C 384.926 218.063,385.071 218.096,385.609 219.467 C 386.196 220.961,386.617 219.720,386.724 216.183 C 386.834 212.528,386.839 212.541,385.811 213.825 L 384.908 214.954 375.755 214.261 C 365.879 213.513,365.043 213.352,364.656 212.132 C 364.150 210.539,363.759 211.389,363.485 214.676 M32.617 217.451 C 28.770 217.931,28.331 219.282,31.901 219.650 C 34.804 219.950,35.422 220.623,36.109 224.228 C 36.787 227.786,38.057 227.112,26.887 229.118 L 17.383 230.825 16.278 230.026 C 14.784 228.947,14.753 229.060,15.472 232.939 C 16.002 235.795,16.797 237.234,16.797 235.338 C 16.797 234.241,18.685 233.658,26.758 232.260 C 31.270 231.478,35.354 230.753,35.834 230.648 C 36.391 230.526,37.000 230.750,37.518 231.268 C 39.126 232.876,39.076 232.232,36.528 218.457 C 36.278 217.106,35.984 217.031,32.617 217.451 M363.119 220.725 C 362.696 221.942,362.073 226.266,362.289 226.482 C 362.415 226.608,362.788 226.326,363.117 225.855 C 363.898 224.740,364.303 224.760,373.633 226.370 C 377.930 227.111,381.533 227.729,381.641 227.744 C 381.748 227.759,377.008 229.589,371.108 231.809 C 361.351 235.481,360.355 235.940,360.106 236.870 C 359.781 238.084,358.658 237.763,370.508 239.846 C 380.555 241.611,381.544 241.899,381.716 243.105 C 381.958 244.798,382.587 243.872,383.101 241.066 C 383.693 237.841,383.565 237.358,382.476 238.702 L 381.729 239.624 373.979 238.343 C 369.717 237.639,366.183 237.016,366.126 236.960 C 366.070 236.903,370.138 235.308,375.166 233.414 C 386.187 229.262,385.082 229.942,385.599 227.003 C 386.072 224.320,385.846 223.618,384.930 224.926 C 384.127 226.073,383.378 226.037,374.274 224.413 C 364.295 222.632,364.932 222.820,364.067 221.398 C 363.541 220.532,363.256 220.330,363.119 220.725 M27.539 237.457 C 18.793 240.004,15.696 247.167,20.818 253.000 C 26.622 259.611,42.188 254.631,42.188 246.163 C 42.188 238.691,35.977 234.999,27.539 237.457 M36.667 239.838 C 38.346 239.848,40.625 242.583,40.622 244.583 C 40.610 252.582,21.552 256.416,20.106 248.710 C 19.302 244.423,28.983 238.541,34.961 239.684 C 35.391 239.766,36.158 239.835,36.667 239.838 M356.675 249.222 C 355.297 253.304,354.243 256.703,354.331 256.775 C 354.420 256.847,355.635 257.356,357.031 257.907 C 360.324 259.206,361.003 258.437,358.501 256.240 C 357.452 255.318,356.934 254.538,356.934 253.880 C 356.934 252.448,358.676 247.266,359.158 247.266 C 359.519 247.266,368.012 249.987,368.261 250.182 C 369.112 250.851,366.274 255.385,364.904 255.544 C 362.289 255.848,366.392 258.594,369.461 258.594 C 370.214 258.594,369.984 257.258,369.141 256.731 C 368.052 256.051,368.735 250.781,369.912 250.781 C 370.281 250.781,377.854 253.505,378.061 253.712 C 378.315 253.966,376.146 260.082,375.661 260.479 C 375.405 260.688,374.406 261.014,373.441 261.203 C 370.860 261.709,370.946 262.578,373.663 263.435 C 376.379 264.291,376.020 264.756,378.621 257.031 C 379.815 253.486,380.914 250.278,381.063 249.902 C 381.253 249.423,381.146 249.219,380.706 249.219 C 380.361 249.219,380.078 249.383,380.078 249.583 C 380.078 250.661,378.050 250.297,371.377 248.022 C 359.826 244.084,360.154 244.230,359.895 242.934 C 359.517 241.043,359.276 241.514,356.675 249.222 M191.487 259.643 C 187.558 262.557,184.395 264.994,184.461 265.060 C 186.473 267.072,213.627 266.945,215.705 264.914 C 215.856 264.766,212.818 262.317,208.954 259.471 C 199.700 252.657,200.926 252.645,191.487 259.643 M29.297 259.602 C 24.392 261.168,23.785 264.270,26.865 272.038 C 28.668 276.585,29.688 278.037,29.688 276.057 C 29.688 274.719,29.719 274.702,38.672 271.187 C 48.721 267.241,48.323 267.353,49.249 268.192 C 50.526 269.347,50.512 268.561,49.191 265.085 C 47.975 261.883,47.266 261.137,47.266 263.061 C 47.266 264.239,46.787 264.602,43.393 266.002 C 39.376 267.658,39.518 267.682,38.493 265.183 C 36.405 260.089,33.429 258.282,29.297 259.602 M352.848 260.841 C 346.031 270.927,353.146 278.738,362.344 271.266 C 364.760 269.304,366.471 268.602,368.097 268.907 C 373.045 269.835,371.957 276.953,366.868 276.953 C 364.347 276.953,364.386 278.221,366.940 279.283 L 368.945 280.118 369.832 279.024 C 376.236 271.124,370.718 261.672,362.942 267.221 C 357.225 271.302,356.205 271.701,354.174 270.654 C 349.606 268.302,351.273 262.465,356.637 262.026 C 358.756 261.852,358.623 260.819,356.367 259.923 C 355.338 259.514,354.407 259.136,354.299 259.083 C 354.190 259.030,353.537 259.821,352.848 260.841 M35.537 263.077 C 36.342 263.805,37.891 266.854,37.891 267.710 C 37.891 268.148,35.002 269.416,28.658 271.760 C 27.405 272.224,26.498 266.057,27.591 264.498 C 29.120 262.315,33.775 261.483,35.537 263.077 M175.121 271.604 C 171.858 274.009,169.177 276.087,169.164 276.222 C 169.127 276.609,177.444 279.268,181.370 280.125 C 192.974 282.658,205.270 282.757,217.188 280.414 C 221.242 279.616,230.340 276.848,230.968 276.220 C 231.484 275.703,219.511 267.096,218.565 267.304 C 218.130 267.400,215.928 267.891,213.672 268.396 C 209.977 269.223,208.622 269.314,200.000 269.314 C 190.100 269.314,190.684 269.375,181.836 267.406 C 181.293 267.285,179.241 268.569,175.121 271.604 M356.507 284.639 C 352.126 287.594,349.254 292.306,349.205 296.623 C 349.186 298.211,343.504 306.551,342.871 305.918 C 342.587 305.634,342.600 304.309,342.911 301.569 C 343.907 292.813,343.622 292.297,339.976 296.257 C 334.405 302.309,332.670 306.496,332.639 313.956 L 332.617 319.123 329.310 322.448 C 325.320 326.458,325.176 326.373,325.574 320.229 C 325.933 314.691,325.887 310.497,325.464 310.073 C 324.934 309.543,318.918 315.734,316.780 319.009 C 313.949 323.346,312.440 328.829,312.014 336.323 C 311.916 338.034,311.832 338.138,308.451 340.717 C 303.601 344.417,303.568 344.354,305.899 335.967 C 307.008 331.981,307.415 327.539,306.649 327.799 C 305.291 328.261,298.800 333.358,296.544 335.733 C 292.489 340.002,290.629 343.618,288.905 350.586 L 288.036 354.102 284.350 356.151 C 279.086 359.078,279.095 359.105,282.812 351.172 C 285.498 345.440,286.518 342.188,285.628 342.188 C 284.943 342.188,278.183 346.294,276.172 347.931 C 272.103 351.245,268.300 357.089,266.769 362.383 C 266.270 364.107,262.360 366.245,253.906 369.417 C 246.311 372.266,255.752 371.015,265.130 367.929 L 267.565 367.128 272.721 368.573 C 283.052 371.467,289.255 370.533,296.205 365.036 C 299.452 362.467,298.646 362.065,288.755 361.321 C 280.241 360.680,280.284 360.721,285.364 358.045 L 289.648 355.787 294.141 356.116 C 308.998 357.204,315.074 355.484,321.717 348.311 L 324.312 345.508 322.801 345.222 C 321.969 345.065,317.993 345.046,313.965 345.178 C 309.774 345.317,306.651 345.272,306.664 345.073 C 306.677 344.883,308.532 343.320,310.787 341.602 L 314.887 338.477 320.852 338.017 C 332.419 337.125,337.705 334.598,342.607 327.618 C 345.386 323.660,345.302 323.619,337.258 325.036 C 331.379 326.071,328.516 326.476,328.516 326.271 C 328.516 326.183,329.964 324.553,331.733 322.649 L 334.951 319.188 338.365 318.560 C 348.319 316.731,352.958 313.028,355.431 304.939 C 355.882 303.466,356.250 302.195,356.250 302.115 C 356.250 302.034,355.151 302.571,353.809 303.309 C 351.173 304.757,346.197 306.743,345.666 306.559 C 344.822 306.266,350.974 298.272,352.344 297.881 C 354.598 297.238,357.233 294.265,358.123 291.358 C 358.786 289.194,359.677 282.791,359.311 282.825 C 359.239 282.831,357.977 283.648,356.507 284.639 M41.909 287.615 C 42.325 293.501,44.418 297.269,48.141 298.831 C 50.110 299.658,56.025 306.995,55.304 307.717 C 54.976 308.045,50.433 306.301,47.724 304.807 C 44.699 303.139,44.631 303.198,45.660 306.586 C 47.909 313.991,52.551 317.709,61.914 319.602 C 66.225 320.474,66.138 320.419,70.006 324.705 C 72.541 327.514,72.656 327.718,71.622 327.546 C 60.928 325.778,58.032 325.360,57.194 325.463 L 56.195 325.586 57.820 328.095 C 62.587 335.453,68.254 338.289,80.082 339.232 L 86.140 339.715 90.043 342.750 C 92.189 344.418,94.121 345.964,94.336 346.183 C 94.602 346.456,92.606 346.512,88.064 346.359 C 81.183 346.127,76.953 346.344,76.953 346.930 C 76.953 347.114,78.316 348.628,79.982 350.293 C 86.590 356.899,92.642 358.462,107.031 357.280 L 111.133 356.943 115.393 359.202 C 120.473 361.895,120.457 361.914,112.571 362.503 C 107.026 362.918,102.845 363.568,102.538 364.064 C 102.267 364.503,106.597 367.760,109.236 369.101 C 114.942 372.000,120.139 372.172,128.460 369.737 L 133.288 368.324 135.687 369.113 C 140.363 370.651,149.360 372.671,149.759 372.272 C 150.257 371.775,150.299 371.800,146.875 370.554 C 145.264 369.968,141.926 368.565,139.458 367.437 L 134.971 365.385 133.387 361.481 C 130.029 353.201,125.718 348.631,117.230 344.352 L 115.125 343.291 115.323 345.045 C 115.432 346.011,116.517 348.921,117.734 351.514 C 120.385 357.156,121.211 359.375,120.660 359.375 C 119.333 359.375,112.872 355.328,112.653 354.360 C 109.884 342.101,106.797 337.542,96.329 330.251 L 93.635 328.375 93.845 331.082 C 93.960 332.571,94.601 335.709,95.269 338.056 C 97.336 345.315,97.235 345.459,92.537 341.962 C 88.709 339.111,88.874 339.450,88.510 333.700 C 88.000 325.630,84.666 319.096,77.916 312.941 L 75.615 310.843 75.296 311.965 C 75.121 312.581,75.095 316.206,75.238 320.020 C 75.546 328.214,75.711 328.059,71.483 323.535 L 68.288 320.117 68.218 314.844 C 68.116 307.199,66.599 303.592,60.944 297.548 L 58.022 294.425 57.740 295.747 C 57.585 296.475,57.624 298.564,57.827 300.391 C 58.273 304.399,58.309 307.423,57.910 307.418 C 56.836 307.406,51.970 299.230,51.578 296.779 C 50.793 291.863,48.672 288.638,44.329 285.755 C 41.587 283.935,41.647 283.889,41.909 287.615 M166.406 365.290 C 161.898 367.008,161.509 367.249,161.841 368.116 C 162.039 368.630,162.354 368.605,164.289 367.925 C 168.156 366.566,168.105 366.320,166.180 377.119 C 164.483 386.636,164.442 386.719,161.290 386.719 C 159.268 386.719,158.946 386.815,159.056 387.389 C 159.243 388.361,172.153 390.658,172.676 389.812 C 172.941 389.384,172.559 389.101,170.997 388.570 C 167.602 387.415,167.641 388.150,170.234 373.926 C 172.418 361.947,172.818 362.847,166.406 365.290 M228.600 363.949 C 227.720 364.118,218.750 381.094,218.750 382.591 C 218.750 383.502,219.085 383.516,224.312 382.825 C 229.965 382.077,229.444 381.817,229.873 385.595 C 230.118 387.761,229.599 389.063,228.488 389.063 C 228.288 389.063,228.125 389.332,228.125 389.662 C 228.125 390.282,228.292 390.278,233.952 389.496 C 235.907 389.226,236.460 388.497,234.989 388.128 C 233.716 387.808,233.319 387.011,232.991 384.113 L 232.723 381.742 234.916 381.468 L 237.109 381.194 237.109 379.269 C 237.109 376.962,236.161 376.612,235.077 378.518 C 234.543 379.456,232.422 380.313,232.422 379.590 C 232.422 379.536,231.982 376.170,231.445 372.109 C 230.908 368.048,230.469 364.489,230.469 364.199 C 230.469 363.668,230.232 363.636,228.600 363.949 M184.673 366.014 C 179.815 367.477,177.399 373.457,179.785 378.111 C 181.370 381.201,186.143 382.292,190.140 380.478 L 191.803 379.723 191.550 380.779 C 190.204 386.394,186.780 389.831,182.520 389.842 C 181.596 389.844,181.406 390.430,182.015 391.394 C 182.449 392.079,185.699 391.535,188.175 390.363 C 197.015 386.175,198.670 368.338,190.430 366.061 C 188.638 365.566,186.227 365.546,184.673 366.014 M204.688 366.433 C 197.710 369.355,197.112 387.607,203.864 391.550 C 206.459 393.066,210.680 392.412,212.774 390.169 C 217.004 385.639,216.506 371.065,211.997 367.437 C 210.365 366.123,206.646 365.612,204.688 366.433 M190.319 368.229 C 192.213 369.916,193.026 376.491,191.504 377.819 C 187.586 381.236,182.417 379.264,182.424 374.355 C 182.432 368.720,186.941 365.221,190.319 368.229 M209.462 368.652 C 212.526 371.899,213.077 386.143,210.267 389.482 C 208.007 392.168,204.843 390.464,203.675 385.932 C 200.927 375.280,204.801 363.715,209.462 368.652 M228.496 374.609 C 228.768 377.295,229.016 379.663,229.046 379.872 C 229.098 380.229,222.313 381.428,222.002 381.117 C 221.924 381.038,223.130 378.223,224.683 374.861 C 226.237 371.496,227.617 368.967,227.753 369.237 C 227.889 369.506,228.223 371.924,228.496 374.609 \" stroke=\"none\" fill=\"#840404\" fill-rule=\"evenodd\"></path><path id=\"path4\" d=\"M204.693 12.793 C 204.697 13.215,204.809 13.312,204.986 13.047 C 205.144 12.811,205.537 12.517,205.859 12.394 C 206.251 12.245,206.154 12.161,205.566 12.140 C 204.976 12.119,204.689 12.334,204.693 12.793 M186.237 12.783 C 186.940 12.870,187.994 12.868,188.581 12.779 C 189.168 12.690,188.594 12.619,187.305 12.621 C 186.016 12.623,185.535 12.696,186.237 12.783 M209.473 12.769 C 209.849 12.868,210.464 12.868,210.840 12.769 C 211.216 12.671,210.908 12.591,210.156 12.591 C 209.404 12.591,209.097 12.671,209.473 12.769 M214.551 13.160 C 214.927 13.258,215.542 13.258,215.918 13.160 C 216.294 13.062,215.986 12.981,215.234 12.981 C 214.482 12.981,214.175 13.062,214.551 13.160 M219.629 13.551 C 220.005 13.649,220.620 13.649,220.996 13.551 C 221.372 13.452,221.064 13.372,220.313 13.372 C 219.561 13.372,219.253 13.452,219.629 13.551 M209.282 14.339 C 209.768 14.432,210.471 14.429,210.844 14.331 C 211.218 14.233,210.820 14.157,209.961 14.161 C 209.102 14.165,208.796 14.245,209.282 14.339 M212.200 15.625 C 212.200 16.377,212.280 16.685,212.379 16.309 C 212.477 15.933,212.477 15.317,212.379 14.941 C 212.280 14.565,212.200 14.873,212.200 15.625 M223.138 16.016 C 223.138 16.768,223.218 17.075,223.316 16.699 C 223.414 16.323,223.414 15.708,223.316 15.332 C 223.218 14.956,223.138 15.264,223.138 16.016 M167.090 15.510 C 167.573 15.603,168.364 15.603,168.848 15.510 C 169.331 15.417,168.936 15.341,167.969 15.341 C 167.002 15.341,166.606 15.417,167.090 15.510 M204.395 16.992 C 204.400 17.852,204.480 18.157,204.573 17.671 C 204.667 17.185,204.663 16.482,204.565 16.109 C 204.467 15.735,204.391 16.133,204.395 16.992 M215.325 17.188 C 215.325 17.939,215.405 18.247,215.504 17.871 C 215.602 17.495,215.602 16.880,215.504 16.504 C 215.405 16.128,215.325 16.436,215.325 17.188 M191.406 16.973 C 191.406 17.503,191.176 17.625,190.442 17.485 C 189.911 17.383,189.570 17.451,189.683 17.635 C 190.030 18.195,191.416 18.007,191.662 17.366 C 191.789 17.034,191.784 16.654,191.650 16.520 C 191.516 16.386,191.406 16.590,191.406 16.973 M199.752 22.070 C 199.753 24.219,199.819 25.048,199.898 23.913 C 199.977 22.778,199.976 21.020,199.896 20.006 C 199.816 18.993,199.751 19.922,199.752 22.070 M211.809 20.703 C 211.809 21.455,211.890 21.763,211.988 21.387 C 212.086 21.011,212.086 20.396,211.988 20.020 C 211.890 19.644,211.809 19.951,211.809 20.703 M170.810 22.656 C 170.810 23.623,170.886 24.019,170.979 23.535 C 171.072 23.052,171.072 22.261,170.979 21.777 C 170.886 21.294,170.810 21.689,170.810 22.656 M214.934 22.266 C 214.934 23.018,215.015 23.325,215.113 22.949 C 215.211 22.573,215.211 21.958,215.113 21.582 C 215.015 21.206,214.934 21.514,214.934 22.266 M260.254 22.926 C 260.630 23.024,261.245 23.024,261.621 22.926 C 261.997 22.827,261.689 22.747,260.938 22.747 C 260.186 22.747,259.878 22.827,260.254 22.926 M133.959 24.195 C 134.438 24.498,134.441 24.654,133.981 25.263 C 133.473 25.935,133.483 25.938,134.150 25.330 C 134.870 24.673,134.708 23.823,133.864 23.834 C 133.572 23.838,133.607 23.972,133.959 24.195 M196.627 27.539 C 196.628 29.688,196.694 30.517,196.773 29.381 C 196.852 28.246,196.851 26.488,196.771 25.475 C 196.691 24.462,196.626 25.391,196.627 27.539 M211.419 25.781 C 211.419 26.533,211.499 26.841,211.597 26.465 C 211.696 26.089,211.696 25.474,211.597 25.098 C 211.499 24.722,211.419 25.029,211.419 25.781 M214.552 27.539 C 214.556 28.398,214.636 28.704,214.729 28.218 C 214.823 27.732,214.819 27.029,214.722 26.656 C 214.624 26.282,214.547 26.680,214.552 27.539 M133.310 28.125 C 133.310 29.092,133.386 29.487,133.479 29.004 C 133.572 28.521,133.572 27.729,133.479 27.246 C 133.386 26.763,133.310 27.158,133.310 28.125 M211.028 30.859 C 211.028 31.611,211.109 31.919,211.207 31.543 C 211.305 31.167,211.305 30.552,211.207 30.176 C 211.109 29.800,211.028 30.107,211.028 30.859 M214.169 32.813 C 214.169 33.779,214.245 34.175,214.338 33.691 C 214.431 33.208,214.431 32.417,214.338 31.934 C 214.245 31.450,214.169 31.846,214.169 32.813 M133.692 34.180 C 133.697 35.039,133.777 35.345,133.870 34.859 C 133.963 34.373,133.960 33.670,133.862 33.296 C 133.764 32.923,133.688 33.320,133.692 34.180 M176.172 33.325 C 176.172 33.393,176.743 33.964,177.441 34.595 L 178.711 35.742 177.564 34.473 C 176.494 33.289,176.172 33.024,176.172 33.325 M131.731 36.719 C 131.731 37.471,131.812 37.778,131.910 37.402 C 132.008 37.026,132.008 36.411,131.910 36.035 C 131.812 35.659,131.731 35.967,131.731 36.719 M155.958 36.914 C 155.962 37.773,156.042 38.079,156.136 37.593 C 156.229 37.107,156.226 36.404,156.128 36.031 C 156.030 35.657,155.954 36.055,155.958 36.914 M212.988 36.597 C 213.364 36.696,213.979 36.696,214.355 36.597 C 214.731 36.499,214.424 36.419,213.672 36.419 C 212.920 36.419,212.612 36.499,212.988 36.597 M183.496 36.994 C 183.979 37.088,184.771 37.088,185.254 36.994 C 185.737 36.901,185.342 36.825,184.375 36.825 C 183.408 36.825,183.013 36.901,183.496 36.994 M134.083 40.039 C 134.087 40.898,134.167 41.204,134.261 40.718 C 134.354 40.232,134.351 39.529,134.253 39.156 C 134.155 38.782,134.079 39.180,134.083 40.039 M132.122 41.016 C 132.122 41.768,132.202 42.075,132.301 41.699 C 132.399 41.323,132.399 40.708,132.301 40.332 C 132.202 39.956,132.122 40.264,132.122 41.016 M196.387 42.479 C 198.374 42.549,201.626 42.549,203.613 42.479 C 205.601 42.408,203.975 42.350,200.000 42.350 C 196.025 42.350,194.399 42.408,196.387 42.479 M187.407 42.854 C 187.893 42.948,188.596 42.944,188.969 42.847 C 189.343 42.749,188.945 42.672,188.086 42.677 C 187.227 42.681,186.921 42.761,187.407 42.854 M211.235 42.854 C 211.721 42.948,212.424 42.944,212.798 42.847 C 213.171 42.749,212.773 42.672,211.914 42.677 C 211.055 42.681,210.749 42.761,211.235 42.854 M251.172 42.700 C 251.172 42.768,251.743 43.339,252.441 43.970 L 253.711 45.117 252.564 43.848 C 251.494 42.664,251.172 42.399,251.172 42.700 M131.799 45.222 C 132.726 46.308,132.820 46.307,132.782 45.215 C 132.765 44.731,132.660 44.563,132.548 44.841 C 132.384 45.250,132.224 45.251,131.700 44.847 C 131.252 44.502,131.282 44.616,131.799 45.222 M134.474 45.898 C 134.478 46.758,134.558 47.063,134.651 46.577 C 134.745 46.092,134.741 45.388,134.643 45.015 C 134.546 44.642,134.469 45.039,134.474 45.898 M272.702 50.636 C 272.677 51.093,272.928 51.692,273.260 51.968 C 273.592 52.243,273.757 52.748,273.627 53.090 C 273.441 53.581,273.492 53.611,273.874 53.232 C 274.257 52.852,274.230 52.610,273.742 52.060 C 273.404 51.679,273.042 51.016,272.937 50.586 C 272.757 49.844,272.745 49.847,272.702 50.636 M322.805 58.068 C 324.056 59.396,324.600 60.261,324.403 60.607 C 324.160 61.034,324.204 61.040,324.638 60.637 C 325.081 60.225,324.812 59.797,323.040 58.098 L 320.909 56.055 322.805 58.068 M80.896 57.129 C 80.988 57.183,81.764 57.842,82.621 58.594 L 84.180 59.961 82.834 58.496 C 82.093 57.690,81.317 57.031,81.108 57.031 C 80.900 57.031,80.804 57.075,80.896 57.129 M320.291 62.012 L 318.945 63.477 320.410 62.130 C 321.774 60.877,322.055 60.547,321.756 60.547 C 321.691 60.547,321.032 61.206,320.291 62.012 M313.074 64.941 L 310.742 67.383 313.184 65.051 C 314.526 63.769,315.625 62.670,315.625 62.610 C 315.625 62.321,315.239 62.674,313.074 64.941 M331.778 66.653 C 333.339 68.289,333.897 69.116,333.536 69.259 C 333.198 69.394,333.176 69.481,333.473 69.500 C 334.620 69.576,334.163 68.718,331.915 66.571 L 329.492 64.258 331.778 66.653 M313.071 69.629 L 311.133 71.680 313.184 69.741 C 315.089 67.940,315.414 67.578,315.122 67.578 C 315.060 67.578,314.137 68.501,313.071 69.629 M318.164 70.313 C 319.440 71.602,320.571 72.656,320.679 72.656 C 320.786 72.656,319.830 71.602,318.555 70.313 C 317.279 69.023,316.148 67.969,316.040 67.969 C 315.933 67.969,316.888 69.023,318.164 70.313 M320.703 70.508 C 321.870 71.689,322.913 72.656,323.020 72.656 C 323.128 72.656,322.261 71.689,321.094 70.508 C 319.927 69.326,318.884 68.359,318.777 68.359 C 318.669 68.359,319.536 69.326,320.703 70.508 M324.786 71.191 L 323.242 72.852 324.902 71.307 C 326.446 69.871,326.742 69.531,326.446 69.531 C 326.383 69.531,325.636 70.278,324.786 71.191 M95.013 71.094 C 95.013 71.846,95.093 72.153,95.191 71.777 C 95.289 71.401,95.289 70.786,95.191 70.410 C 95.093 70.034,95.013 70.342,95.013 71.094 M306.445 75.000 C 307.503 76.074,308.457 76.953,308.564 76.953 C 308.672 76.953,307.894 76.074,306.836 75.000 C 305.778 73.926,304.824 73.047,304.717 73.047 C 304.609 73.047,305.387 73.926,306.445 75.000 M83.984 74.805 C 84.713 75.557,85.397 76.172,85.505 76.172 C 85.612 76.172,85.104 75.557,84.375 74.805 C 83.646 74.053,82.962 73.438,82.855 73.438 C 82.747 73.438,83.256 74.053,83.984 74.805 M324.402 76.270 L 322.070 78.711 324.512 76.379 C 325.854 75.097,326.953 73.998,326.953 73.938 C 326.953 73.649,326.568 74.002,324.402 76.270 M57.599 77.441 L 56.055 79.102 57.715 77.557 C 58.628 76.708,59.375 75.961,59.375 75.897 C 59.375 75.602,59.035 75.897,57.599 77.441 M316.968 79.395 L 315.820 80.664 317.090 79.517 C 317.788 78.886,318.359 78.314,318.359 78.247 C 318.359 77.945,318.037 78.211,316.968 79.395 M59.473 79.176 C 59.849 79.274,60.464 79.274,60.840 79.176 C 61.216 79.077,60.908 78.997,60.156 78.997 C 59.404 78.997,59.097 79.077,59.473 79.176 M315.420 83.499 C 317.724 85.912,318.360 86.232,318.658 85.132 C 318.781 84.676,318.733 84.681,318.403 85.156 C 318.065 85.643,317.579 85.345,315.541 83.398 L 313.086 81.055 315.420 83.499 M94.311 82.910 L 93.164 84.180 94.434 83.032 C 95.617 81.963,95.883 81.641,95.581 81.641 C 95.514 81.641,94.942 82.212,94.311 82.910 M304.297 81.763 C 304.297 81.830,304.868 82.401,305.566 83.032 L 306.836 84.180 305.689 82.910 C 304.619 81.727,304.297 81.461,304.297 81.763 M346.847 83.301 C 347.272 83.866,347.272 84.102,346.847 84.668 C 346.356 85.319,346.367 85.319,347.078 84.668 C 347.812 83.995,347.812 83.974,347.078 83.301 C 346.367 82.650,346.356 82.650,346.847 83.301 M53.614 85.352 C 53.618 86.211,53.698 86.517,53.792 86.031 C 53.885 85.545,53.882 84.842,53.784 84.468 C 53.686 84.095,53.610 84.492,53.614 85.352 M344.516 86.541 C 344.241 86.873,343.736 87.039,343.394 86.909 C 342.894 86.718,342.869 86.769,343.266 87.169 C 343.664 87.570,343.925 87.499,344.622 86.801 C 345.097 86.326,345.381 85.938,345.252 85.938 C 345.123 85.938,344.792 86.209,344.516 86.541 M88.462 88.379 L 86.523 90.430 88.574 88.491 C 90.480 86.690,90.804 86.328,90.513 86.328 C 90.451 86.328,89.528 87.251,88.462 88.379 M311.133 88.281 C 312.191 89.355,313.144 90.234,313.252 90.234 C 313.359 90.234,312.582 89.355,311.523 88.281 C 310.465 87.207,309.512 86.328,309.404 86.328 C 309.297 86.328,310.075 87.207,311.133 88.281 M48.483 91.639 C 48.458 92.089,48.833 92.792,49.316 93.201 C 50.188 93.939,50.190 93.939,49.552 93.164 C 49.198 92.734,48.823 92.031,48.718 91.602 C 48.535 90.850,48.526 90.852,48.483 91.639 M82.593 94.629 L 81.445 95.898 82.715 94.751 C 83.898 93.682,84.164 93.359,83.862 93.359 C 83.795 93.359,83.224 93.931,82.593 94.629 M316.016 93.482 C 316.016 93.549,316.587 94.120,317.285 94.751 L 318.555 95.898 317.407 94.629 C 316.338 93.446,316.016 93.180,316.016 93.482 M333.686 94.751 C 334.209 95.373,334.258 95.663,333.901 96.021 C 333.646 96.276,333.539 96.484,333.663 96.484 C 334.548 96.484,334.686 95.366,333.885 94.688 C 333.010 93.947,333.010 93.947,333.686 94.751 M359.075 105.078 C 359.075 105.830,359.155 106.138,359.254 105.762 C 359.352 105.386,359.352 104.771,359.254 104.395 C 359.155 104.019,359.075 104.326,359.075 105.078 M348.828 109.888 C 348.828 109.955,349.399 110.526,350.098 111.157 L 351.367 112.305 350.220 111.035 C 349.150 109.852,348.828 109.586,348.828 109.888 M48.242 111.328 L 41.992 111.554 48.558 111.636 C 52.856 111.690,55.041 111.584,54.883 111.328 C 54.750 111.113,54.608 110.975,54.567 111.020 C 54.526 111.065,51.680 111.204,48.242 111.328 M354.204 113.167 C 354.690 113.260,355.393 113.257,355.766 113.159 C 356.140 113.061,355.742 112.985,354.883 112.989 C 354.023 112.993,353.718 113.073,354.204 113.167 M43.457 114.743 C 45.122 114.817,47.847 114.817,49.512 114.743 C 51.177 114.670,49.814 114.610,46.484 114.610 C 43.154 114.610,41.792 114.670,43.457 114.743 M29.545 121.357 C 29.788 121.534,30.084 122.031,30.203 122.461 C 30.372 123.077,30.402 123.042,30.346 122.296 C 30.306 121.776,30.010 121.279,29.688 121.192 C 29.300 121.088,29.252 121.144,29.545 121.357 M370.849 124.792 C 370.728 125.107,370.720 125.590,370.831 125.866 C 370.941 126.142,371.046 125.986,371.063 125.521 C 371.080 125.055,371.313 124.586,371.582 124.477 C 371.964 124.323,371.962 124.274,371.570 124.250 C 371.294 124.233,370.970 124.477,370.849 124.792 M201.074 126.838 C 201.558 126.931,202.349 126.931,202.832 126.838 C 203.315 126.745,202.920 126.669,201.953 126.669 C 200.986 126.669,200.591 126.745,201.074 126.838 M348.468 127.604 C 348.451 128.070,348.218 128.539,347.949 128.648 C 347.567 128.802,347.569 128.851,347.961 128.875 C 348.554 128.912,348.986 127.969,348.700 127.259 C 348.590 126.983,348.485 127.139,348.468 127.604 M200.879 129.566 C 201.255 129.664,201.870 129.664,202.246 129.566 C 202.622 129.468,202.314 129.388,201.563 129.388 C 200.811 129.388,200.503 129.468,200.879 129.566 M25.444 134.034 C 25.414 134.600,25.697 135.301,26.074 135.597 C 26.669 136.063,26.699 136.057,26.307 135.547 C 26.059 135.225,25.775 134.521,25.677 133.984 L 25.497 133.008 25.444 134.034 M138.464 136.816 L 136.133 139.258 138.574 136.926 C 140.842 134.761,141.194 134.375,140.906 134.375 C 140.845 134.375,139.747 135.474,138.464 136.816 M261.133 136.719 C 262.408 138.008,263.540 139.063,263.647 139.063 C 263.755 139.063,262.799 138.008,261.523 136.719 C 260.248 135.430,259.116 134.375,259.009 134.375 C 258.901 134.375,259.857 135.430,261.133 136.719 M140.422 138.770 L 136.914 142.383 140.527 138.875 C 143.883 135.618,144.318 135.156,144.035 135.156 C 143.977 135.156,142.351 136.782,140.422 138.770 M259.375 138.867 C 261.192 140.693,262.766 142.188,262.873 142.188 C 262.981 142.188,261.582 140.693,259.766 138.867 C 257.949 137.041,256.375 135.547,256.267 135.547 C 256.160 135.547,257.558 137.041,259.375 138.867 M149.405 147.754 L 146.289 150.977 149.512 147.861 C 151.284 146.147,152.734 144.697,152.734 144.638 C 152.734 144.353,152.299 144.761,149.405 147.754 M250.195 147.656 C 251.904 149.375,253.390 150.781,253.497 150.781 C 253.605 150.781,252.295 149.375,250.586 147.656 C 248.877 145.938,247.391 144.531,247.284 144.531 C 247.177 144.531,248.487 145.938,250.195 147.656 M43.092 147.235 C 43.132 147.755,43.428 148.252,43.750 148.339 C 44.137 148.443,44.186 148.387,43.893 148.174 C 43.649 147.997,43.353 147.500,43.235 147.070 C 43.065 146.454,43.035 146.489,43.092 147.235 M38.281 150.513 C 38.281 150.580,38.853 151.151,39.551 151.782 L 40.820 152.930 39.673 151.660 C 38.604 150.477,38.281 150.211,38.281 150.513 M33.503 159.658 C 34.205 159.745,35.260 159.743,35.847 159.654 C 36.434 159.565,35.859 159.494,34.570 159.496 C 33.281 159.498,32.801 159.571,33.503 159.658 M32.910 163.160 C 33.286 163.258,33.901 163.258,34.277 163.160 C 34.653 163.062,34.346 162.981,33.594 162.981 C 32.842 162.981,32.534 163.062,32.910 163.160 M15.369 164.665 C 15.242 164.997,15.247 165.378,15.381 165.512 C 15.515 165.646,15.625 165.474,15.625 165.131 C 15.625 164.788,16.021 164.431,16.504 164.338 L 17.383 164.169 16.492 164.116 C 16.002 164.086,15.496 164.334,15.369 164.665 M28.394 169.003 C 28.864 169.105,29.327 169.532,29.422 169.952 C 29.557 170.545,29.585 170.518,29.544 169.830 C 29.506 169.180,29.234 168.928,28.516 168.881 C 27.702 168.828,27.682 168.848,28.394 169.003 M364.013 177.051 C 364.424 177.576,365.059 177.718,366.747 177.662 L 368.945 177.590 366.809 177.443 C 365.634 177.363,364.403 177.088,364.074 176.832 C 363.551 176.425,363.543 176.452,364.013 177.051 M377.251 176.839 C 377.737 176.932,378.440 176.929,378.813 176.831 C 379.187 176.733,378.789 176.657,377.930 176.661 C 377.070 176.665,376.765 176.745,377.251 176.839 M371.973 177.222 C 372.349 177.321,372.964 177.321,373.340 177.222 C 373.716 177.124,373.408 177.044,372.656 177.044 C 371.904 177.044,371.597 177.124,371.973 177.222 M386.419 179.688 C 386.419 180.439,386.499 180.747,386.597 180.371 C 386.696 179.995,386.696 179.380,386.597 179.004 C 386.499 178.628,386.419 178.936,386.419 179.688 M384.058 179.539 C 384.421 179.647,384.806 180.032,384.914 180.395 C 385.057 180.873,385.089 180.841,385.032 180.278 C 384.985 179.823,384.630 179.468,384.175 179.421 C 383.612 179.364,383.580 179.396,384.058 179.539 M379.004 179.957 C 379.380 180.055,379.995 180.055,380.371 179.957 C 380.747 179.859,380.439 179.778,379.688 179.778 C 378.936 179.778,378.628 179.859,379.004 179.957 M362.981 181.250 C 362.981 182.002,363.062 182.310,363.160 181.934 C 363.258 181.558,363.258 180.942,363.160 180.566 C 363.062 180.190,362.981 180.498,362.981 181.250 M368.657 180.745 C 369.143 180.838,369.846 180.835,370.219 180.737 C 370.593 180.639,370.195 180.563,369.336 180.567 C 368.477 180.572,368.171 180.652,368.657 180.745 M36.750 181.901 C 36.733 182.367,36.499 182.836,36.230 182.944 C 35.848 183.099,35.851 183.148,36.243 183.172 C 36.836 183.209,37.267 182.266,36.982 181.556 C 36.871 181.280,36.767 181.436,36.750 181.901 M373.138 182.813 C 373.138 183.564,373.218 183.872,373.316 183.496 C 373.414 183.120,373.414 182.505,373.316 182.129 C 373.218 181.753,373.138 182.061,373.138 182.813 M13.965 183.486 C 14.663 183.572,15.806 183.572,16.504 183.486 C 17.202 183.399,16.631 183.328,15.234 183.328 C 13.838 183.328,13.267 183.399,13.965 183.486 M12.643 189.258 C 12.644 191.406,12.709 192.235,12.788 191.100 C 12.868 189.965,12.867 188.207,12.787 187.194 C 12.706 186.181,12.642 187.109,12.643 189.258 M42.677 188.086 C 42.681 188.945,42.761 189.251,42.854 188.765 C 42.948 188.279,42.944 187.576,42.847 187.202 C 42.749 186.829,42.672 187.227,42.677 188.086 M357.122 188.281 C 357.122 189.033,357.202 189.341,357.301 188.965 C 357.399 188.589,357.399 187.974,357.301 187.598 C 357.202 187.222,357.122 187.529,357.122 188.281 M14.169 189.453 C 14.169 190.420,14.245 190.815,14.338 190.332 C 14.431 189.849,14.431 189.058,14.338 188.574 C 14.245 188.091,14.169 188.486,14.169 189.453 M35.934 192.108 L 36.125 195.117 36.246 192.422 C 36.312 190.939,36.226 189.585,36.054 189.412 C 35.883 189.239,35.828 190.452,35.934 192.108 M113.372 191.016 C 113.372 191.768,113.452 192.075,113.551 191.699 C 113.649 191.323,113.649 190.708,113.551 190.332 C 113.452 189.956,113.372 190.264,113.372 191.016 M16.712 191.304 C 17.847 191.383,19.605 191.382,20.619 191.302 C 21.632 191.222,20.703 191.157,18.555 191.158 C 16.406 191.159,15.577 191.225,16.712 191.304 M31.157 191.683 C 31.643 191.776,32.346 191.772,32.719 191.675 C 33.093 191.577,32.695 191.500,31.836 191.505 C 30.977 191.509,30.671 191.589,31.157 191.683 M42.348 200.000 C 42.348 203.760,42.407 205.298,42.478 203.418 C 42.550 201.538,42.550 198.462,42.478 196.582 C 42.407 194.702,42.348 196.240,42.348 200.000 M357.583 200.000 C 357.583 203.760,357.641 205.298,357.713 203.418 C 357.784 201.538,357.784 198.462,357.713 196.582 C 357.641 194.702,357.583 196.240,357.583 200.000 M364.131 195.410 L 364.199 197.461 364.353 195.710 C 364.438 194.746,364.715 193.826,364.968 193.665 C 365.275 193.470,365.201 193.369,364.746 193.365 C 364.173 193.360,364.073 193.689,364.131 195.410 M14.947 194.421 C 15.541 194.511,16.419 194.508,16.900 194.416 C 17.380 194.323,16.895 194.249,15.820 194.252 C 14.746 194.255,14.353 194.331,14.947 194.421 M387.628 196.680 C 387.630 198.184,387.701 198.751,387.785 197.941 C 387.870 197.130,387.868 195.900,387.782 195.206 C 387.696 194.513,387.626 195.176,387.628 196.680 M27.051 194.818 C 28.071 194.899,29.741 194.899,30.762 194.818 C 31.782 194.738,30.947 194.672,28.906 194.672 C 26.865 194.672,26.030 194.738,27.051 194.818 M115.753 198.242 C 115.755 199.746,115.826 200.313,115.910 199.503 C 115.995 198.693,115.993 197.462,115.907 196.769 C 115.821 196.075,115.751 196.738,115.753 198.242 M284.113 198.242 C 284.114 199.746,284.185 200.313,284.269 199.503 C 284.354 198.693,284.353 197.462,284.266 196.769 C 284.180 196.075,284.111 196.738,284.113 198.242 M376.087 195.992 C 377.222 196.071,378.980 196.070,379.994 195.990 C 381.007 195.910,380.078 195.845,377.930 195.846 C 375.781 195.847,374.952 195.912,376.087 195.992 M255.980 198.242 C 255.983 199.531,256.056 200.012,256.142 199.309 C 256.229 198.607,256.228 197.553,256.138 196.966 C 256.049 196.379,255.978 196.953,255.980 198.242 M253.231 198.047 C 253.231 199.014,253.308 199.409,253.401 198.926 C 253.494 198.442,253.494 197.651,253.401 197.168 C 253.308 196.685,253.231 197.080,253.231 198.047 M370.605 199.111 C 371.304 199.197,372.446 199.197,373.145 199.111 C 373.843 199.024,373.271 198.953,371.875 198.953 C 370.479 198.953,369.907 199.024,370.605 199.111 M375.549 199.369 C 375.435 199.667,375.410 200.678,375.493 201.615 L 375.645 203.320 375.713 201.298 C 375.766 199.737,375.937 199.235,376.465 199.097 C 377.106 198.930,377.105 198.916,376.453 198.873 C 376.070 198.849,375.663 199.072,375.549 199.369 M373.949 201.758 C 373.951 203.047,374.024 203.527,374.111 202.825 C 374.198 202.123,374.196 201.068,374.107 200.481 C 374.018 199.894,373.947 200.469,373.949 201.758 M128.622 202.344 C 128.622 203.311,128.698 203.706,128.791 203.223 C 128.884 202.739,128.884 201.948,128.791 201.465 C 128.698 200.981,128.622 201.377,128.622 202.344 M271.192 202.539 C 271.197 203.398,271.277 203.704,271.370 203.218 C 271.463 202.732,271.460 202.029,271.362 201.656 C 271.264 201.282,271.188 201.680,271.192 202.539 M15.918 202.229 C 16.401 202.322,17.192 202.322,17.676 202.229 C 18.159 202.136,17.764 202.060,16.797 202.060 C 15.830 202.060,15.435 202.136,15.918 202.229 M268.450 203.125 C 268.450 203.877,268.530 204.185,268.629 203.809 C 268.727 203.433,268.727 202.817,268.629 202.441 C 268.530 202.065,268.450 202.373,268.450 203.125 M12.208 204.883 C 12.212 205.742,12.292 206.048,12.386 205.562 C 12.479 205.076,12.476 204.373,12.378 203.999 C 12.280 203.626,12.204 204.023,12.208 204.883 M113.372 205.078 C 113.372 205.830,113.452 206.138,113.551 205.762 C 113.649 205.386,113.649 204.771,113.551 204.395 C 113.452 204.019,113.372 204.326,113.372 205.078 M286.419 205.078 C 286.419 205.830,286.499 206.138,286.597 205.762 C 286.696 205.386,286.696 204.771,286.597 204.395 C 286.499 204.019,286.419 204.326,286.419 205.078 M35.410 207.685 C 35.657 207.863,35.948 208.447,36.058 208.984 C 36.229 209.825,36.248 209.802,36.195 208.819 C 36.160 208.175,35.877 207.609,35.547 207.520 C 35.155 207.415,35.110 207.469,35.410 207.685 M13.911 208.132 C 13.802 208.308,14.231 208.376,14.864 208.283 C 15.498 208.190,16.016 208.047,16.016 207.963 C 16.016 207.666,14.104 207.819,13.911 208.132 M30.176 210.426 C 30.552 210.524,31.167 210.524,31.543 210.426 C 31.919 210.327,31.611 210.247,30.859 210.247 C 30.107 210.247,29.800 210.327,30.176 210.426 M42.677 211.914 C 42.681 212.773,42.761 213.079,42.854 212.593 C 42.948 212.107,42.944 211.404,42.847 211.031 C 42.749 210.657,42.672 211.055,42.677 211.914 M357.122 211.719 C 357.122 212.471,357.202 212.778,357.301 212.402 C 357.399 212.026,357.399 211.411,357.301 211.035 C 357.202 210.659,357.122 210.967,357.122 211.719 M36.419 213.672 C 36.419 214.424,36.499 214.731,36.597 214.355 C 36.696 213.979,36.696 213.364,36.597 212.988 C 36.499 212.612,36.419 212.920,36.419 213.672 M363.372 213.672 C 363.372 214.424,363.452 214.731,363.551 214.355 C 363.649 213.979,363.649 213.364,363.551 212.988 C 363.452 212.612,363.372 212.920,363.372 213.672 M31.938 213.558 C 32.424 213.651,33.127 213.647,33.501 213.550 C 33.874 213.452,33.477 213.375,32.617 213.380 C 31.758 213.384,31.452 213.464,31.938 213.558 M27.051 213.941 C 27.427 214.039,28.042 214.039,28.418 213.941 C 28.794 213.843,28.486 213.763,27.734 213.763 C 26.982 213.763,26.675 213.843,27.051 213.941 M371.391 213.948 C 371.877 214.042,372.580 214.038,372.954 213.940 C 373.327 213.842,372.930 213.766,372.070 213.770 C 371.211 213.775,370.905 213.855,371.391 213.948 M376.469 214.339 C 376.955 214.432,377.658 214.429,378.032 214.331 C 378.405 214.233,378.008 214.157,377.148 214.161 C 376.289 214.165,375.983 214.245,376.469 214.339 M386.809 215.234 C 386.809 215.986,386.890 216.294,386.988 215.918 C 387.086 215.542,387.086 214.927,386.988 214.551 C 386.890 214.175,386.809 214.482,386.809 215.234 M381.941 214.736 C 382.643 214.823,383.697 214.821,384.284 214.732 C 384.871 214.643,384.297 214.572,383.008 214.574 C 381.719 214.576,381.238 214.649,381.941 214.736 M180.469 217.383 C 181.198 218.135,181.882 218.750,181.989 218.750 C 182.097 218.750,181.588 218.135,180.859 217.383 C 180.131 216.631,179.446 216.016,179.339 216.016 C 179.232 216.016,179.740 216.631,180.469 217.383 M35.621 217.039 C 35.983 217.147,36.369 217.532,36.477 217.895 C 36.620 218.373,36.652 218.341,36.594 217.778 C 36.547 217.323,36.193 216.968,35.738 216.921 C 35.174 216.864,35.142 216.896,35.621 217.039 M369.438 217.073 C 369.924 217.167,370.627 217.163,371.001 217.065 C 371.374 216.967,370.977 216.891,370.117 216.895 C 369.258 216.900,368.952 216.980,369.438 217.073 M374.516 217.464 C 375.002 217.557,375.705 217.554,376.079 217.456 C 376.452 217.358,376.055 217.282,375.195 217.286 C 374.336 217.290,374.030 217.370,374.516 217.464 M379.785 217.847 C 380.161 217.946,380.776 217.946,381.152 217.847 C 381.528 217.749,381.221 217.669,380.469 217.669 C 379.717 217.669,379.409 217.749,379.785 217.847 M13.372 220.313 C 13.372 221.064,13.452 221.372,13.551 220.996 C 13.649 220.620,13.649 220.005,13.551 219.629 C 13.452 219.253,13.372 219.561,13.372 220.313 M31.744 236.608 C 32.337 236.698,33.216 236.696,33.697 236.603 C 34.177 236.510,33.691 236.437,32.617 236.440 C 31.543 236.443,31.150 236.519,31.744 236.608 M20.483 241.113 L 19.336 242.383 20.605 241.236 C 21.304 240.604,21.875 240.033,21.875 239.966 C 21.875 239.664,21.553 239.930,20.483 241.113 M42.294 246.094 C 42.294 247.061,42.370 247.456,42.463 246.973 C 42.556 246.489,42.556 245.698,42.463 245.215 C 42.370 244.731,42.294 245.127,42.294 246.094 M151.172 246.680 C 152.339 247.861,153.382 248.828,153.489 248.828 C 153.596 248.828,152.729 247.861,151.563 246.680 C 150.396 245.498,149.353 244.531,149.245 244.531 C 149.138 244.531,150.005 245.498,151.172 246.680 M149.414 248.828 C 150.472 249.902,151.426 250.781,151.533 250.781 C 151.641 250.781,150.863 249.902,149.805 248.828 C 148.747 247.754,147.793 246.875,147.686 246.875 C 147.578 246.875,148.356 247.754,149.414 248.828 M25.494 253.015 C 26.087 253.104,26.966 253.102,27.447 253.009 C 27.927 252.917,27.441 252.843,26.367 252.846 C 25.293 252.849,24.900 252.925,25.494 253.015 M363.911 255.398 C 363.802 255.574,364.231 255.642,364.864 255.549 C 365.498 255.456,366.016 255.312,366.016 255.229 C 366.016 254.931,364.104 255.085,363.911 255.398 M371.723 261.257 C 371.615 261.433,372.044 261.501,372.677 261.408 C 373.310 261.315,373.828 261.172,373.828 261.088 C 373.828 260.791,371.917 260.944,371.723 261.257 M24.708 265.039 C 24.712 265.898,24.792 266.204,24.886 265.718 C 24.979 265.232,24.976 264.529,24.878 264.156 C 24.780 263.782,24.704 264.180,24.708 265.039 M192.676 266.676 C 193.052 266.774,193.667 266.774,194.043 266.676 C 194.419 266.577,194.111 266.497,193.359 266.497 C 192.607 266.497,192.300 266.577,192.676 266.676 M205.957 266.676 C 206.333 266.774,206.948 266.774,207.324 266.676 C 207.700 266.577,207.393 266.497,206.641 266.497 C 205.889 266.497,205.581 266.577,205.957 266.676 M198.926 267.077 C 199.517 267.166,200.483 267.166,201.074 267.077 C 201.665 266.987,201.182 266.914,200.000 266.914 C 198.818 266.914,198.335 266.987,198.926 267.077 M349.716 268.359 C 349.716 269.326,349.792 269.722,349.885 269.238 C 349.978 268.755,349.978 267.964,349.885 267.480 C 349.792 266.997,349.716 267.393,349.716 268.359 M193.066 269.410 C 193.442 269.508,194.058 269.508,194.434 269.410 C 194.810 269.312,194.502 269.231,193.750 269.231 C 192.998 269.231,192.690 269.312,193.066 269.410 M205.566 269.410 C 205.942 269.508,206.558 269.508,206.934 269.410 C 207.310 269.312,207.002 269.231,206.250 269.231 C 205.498 269.231,205.190 269.312,205.566 269.410 M197.168 282.321 C 198.726 282.395,201.274 282.395,202.832 282.321 C 204.390 282.247,203.115 282.186,200.000 282.186 C 196.885 282.186,195.610 282.247,197.168 282.321 M41.406 285.352 C 41.406 286.104,41.475 286.719,41.559 286.719 C 41.643 286.719,41.783 286.104,41.871 285.352 C 41.959 284.600,41.890 283.984,41.718 283.984 C 41.547 283.984,41.406 284.600,41.406 285.352 M197.559 285.055 C 198.901 285.131,201.099 285.131,202.441 285.055 C 203.784 284.979,202.686 284.916,200.000 284.916 C 197.314 284.916,196.216 284.979,197.559 285.055 M59.961 296.484 C 61.019 297.559,61.973 298.438,62.080 298.438 C 62.187 298.438,61.410 297.559,60.352 296.484 C 59.293 295.410,58.340 294.531,58.232 294.531 C 58.125 294.531,58.903 295.410,59.961 296.484 M57.513 299.609 C 57.513 300.361,57.593 300.669,57.691 300.293 C 57.789 299.917,57.789 299.302,57.691 298.926 C 57.593 298.550,57.513 298.857,57.513 299.609 M342.685 304.297 C 342.685 305.264,342.761 305.659,342.854 305.176 C 342.947 304.692,342.947 303.901,342.854 303.418 C 342.761 302.935,342.685 303.330,342.685 304.297 M81.641 304.419 C 81.641 304.486,82.212 305.058,82.910 305.689 L 84.180 306.836 83.032 305.566 C 81.963 304.383,81.641 304.117,81.641 304.419 M316.968 305.566 L 315.820 306.836 317.090 305.689 C 317.788 305.058,318.359 304.486,318.359 304.419 C 318.359 304.117,318.037 304.383,316.968 305.566 M88.477 311.719 C 89.535 312.793,90.488 313.672,90.596 313.672 C 90.703 313.672,89.925 312.793,88.867 311.719 C 87.809 310.645,86.856 309.766,86.748 309.766 C 86.641 309.766,87.418 310.645,88.477 311.719 M311.118 311.816 L 309.180 313.867 311.230 311.929 C 312.358 310.863,313.281 309.940,313.281 309.878 C 313.281 309.586,312.919 309.911,311.118 311.816 M323.608 311.035 L 322.461 312.305 323.730 311.157 C 324.914 310.088,325.180 309.766,324.878 309.766 C 324.811 309.766,324.239 310.337,323.608 311.035 M325.872 312.500 C 325.872 313.252,325.952 313.560,326.051 313.184 C 326.149 312.808,326.149 312.192,326.051 311.816 C 325.952 311.440,325.872 311.748,325.872 312.500 M68.493 314.648 C 68.495 316.367,68.563 317.022,68.646 316.103 C 68.728 315.184,68.727 313.778,68.643 312.978 C 68.559 312.178,68.492 312.930,68.493 314.648 M350.561 313.379 L 349.414 314.648 350.684 313.501 C 351.382 312.870,351.953 312.299,351.953 312.232 C 351.953 311.930,351.631 312.196,350.561 313.379 M325.893 315.820 C 325.896 316.895,325.972 317.288,326.062 316.694 C 326.151 316.100,326.149 315.221,326.056 314.741 C 325.964 314.260,325.890 314.746,325.893 315.820 M93.359 316.138 C 93.359 316.205,93.931 316.776,94.629 317.407 L 95.898 318.555 94.751 317.285 C 93.682 316.102,93.359 315.836,93.359 316.138 M305.249 317.285 L 304.102 318.555 305.371 317.407 C 306.069 316.776,306.641 316.205,306.641 316.138 C 306.641 315.836,306.318 316.102,305.249 317.285 M330.859 320.508 C 329.911 321.475,329.222 322.266,329.330 322.266 C 329.437 322.266,330.301 321.475,331.250 320.508 C 332.199 319.541,332.887 318.750,332.780 318.750 C 332.672 318.750,331.808 319.541,330.859 320.508 M333.955 320.215 L 333.008 321.289 334.180 320.313 C 334.824 319.775,335.425 319.292,335.514 319.238 C 335.604 319.185,335.503 319.141,335.289 319.141 C 335.076 319.141,334.476 319.624,333.955 320.215 M325.519 322.461 C 325.521 323.965,325.591 324.532,325.676 323.722 C 325.760 322.911,325.759 321.681,325.673 320.987 C 325.586 320.294,325.517 320.957,325.519 322.461 M68.164 323.047 C 69.003 323.906,69.778 324.609,69.885 324.609 C 69.993 324.609,69.394 323.906,68.555 323.047 C 67.716 322.188,66.941 321.484,66.834 321.484 C 66.726 321.484,67.325 322.188,68.164 323.047 M72.060 324.121 C 74.759 326.928,75.391 327.378,75.391 326.497 C 75.391 326.247,75.268 326.164,75.119 326.313 C 74.969 326.463,73.607 325.394,72.092 323.937 L 69.336 321.289 72.060 324.121 M329.298 325.194 C 328.795 325.730,328.456 326.234,328.547 326.314 C 328.637 326.394,329.120 325.955,329.620 325.339 C 330.738 323.960,330.541 323.871,329.298 325.194 M306.937 328.809 C 307.176 331.321,307.329 331.525,307.377 329.395 C 307.401 328.267,307.281 327.344,307.110 327.344 C 306.938 327.344,306.860 328.003,306.937 328.809 M296.875 334.961 C 295.926 335.928,295.238 336.719,295.345 336.719 C 295.453 336.719,296.317 335.928,297.266 334.961 C 298.214 333.994,298.903 333.203,298.795 333.203 C 298.688 333.203,297.824 333.994,296.875 334.961 M88.789 336.328 C 88.789 337.510,88.862 337.993,88.952 337.402 C 89.041 336.812,89.041 335.845,88.952 335.254 C 88.862 334.663,88.789 335.146,88.789 336.328 M321.001 338.167 C 321.487 338.260,322.190 338.257,322.563 338.159 C 322.937 338.061,322.539 337.985,321.680 337.989 C 320.820 337.993,320.515 338.073,321.001 338.167 M78.032 339.339 C 78.518 339.432,79.221 339.429,79.594 339.331 C 79.968 339.233,79.570 339.157,78.711 339.161 C 77.852 339.165,77.546 339.245,78.032 339.339 M306.640 345.020 C 306.640 345.181,308.530 345.283,310.840 345.247 C 315.105 345.180,314.597 345.026,309.472 344.833 C 307.914 344.775,306.639 344.858,306.640 345.020 M322.363 345.191 C 322.739 345.289,323.354 345.289,323.730 345.191 C 324.106 345.093,323.799 345.013,323.047 345.013 C 322.295 345.013,321.987 345.093,322.363 345.191 M93.547 345.690 C 93.690 345.922,92.080 346.116,89.371 346.193 L 84.961 346.317 89.794 346.401 C 94.051 346.474,94.569 346.415,94.141 345.898 C 93.600 345.247,93.182 345.101,93.547 345.690 M78.032 346.370 C 78.518 346.463,79.221 346.460,79.594 346.362 C 79.968 346.264,79.570 346.188,78.711 346.192 C 77.852 346.197,77.546 346.277,78.032 346.370 M320.682 349.512 L 319.336 350.977 320.801 349.630 C 322.164 348.377,322.445 348.047,322.147 348.047 C 322.082 348.047,321.422 348.706,320.682 349.512 M296.973 356.519 C 297.349 356.618,297.964 356.618,298.340 356.519 C 298.716 356.421,298.408 356.341,297.656 356.341 C 296.904 356.341,296.597 356.421,296.973 356.519 M187.407 357.308 C 187.893 357.401,188.596 357.397,188.969 357.300 C 189.343 357.202,188.945 357.125,188.086 357.130 C 187.227 357.134,186.921 357.214,187.407 357.308 M211.235 357.308 C 211.721 357.401,212.424 357.397,212.798 357.300 C 213.171 357.202,212.773 357.125,211.914 357.130 C 211.055 357.134,210.749 357.214,211.235 357.308 M196.387 357.713 C 198.374 357.784,201.626 357.784,203.613 357.713 C 205.601 357.642,203.975 357.584,200.000 357.584 C 196.025 357.584,194.399 357.642,196.387 357.713 M286.626 361.214 C 287.112 361.307,287.815 361.304,288.188 361.206 C 288.562 361.108,288.164 361.032,287.305 361.036 C 286.445 361.040,286.140 361.120,286.626 361.214 M113.770 362.379 C 114.146 362.477,114.761 362.477,115.137 362.379 C 115.513 362.280,115.205 362.200,114.453 362.200 C 113.701 362.200,113.394 362.280,113.770 362.379 M186.816 367.457 C 187.192 367.555,187.808 367.555,188.184 367.457 C 188.560 367.359,188.252 367.278,187.500 367.278 C 186.748 367.278,186.440 367.359,186.816 367.457 M195.815 375.195 C 195.818 376.270,195.894 376.663,195.983 376.069 C 196.073 375.475,196.071 374.596,195.978 374.116 C 195.885 373.635,195.812 374.121,195.815 375.195 M202.863 377.539 C 202.864 379.043,202.935 379.610,203.019 378.800 C 203.104 377.989,203.103 376.759,203.016 376.066 C 202.930 375.372,202.861 376.035,202.863 377.539 M211.809 377.734 C 211.809 378.486,211.890 378.794,211.988 378.418 C 212.086 378.042,212.086 377.427,211.988 377.051 C 211.890 376.675,211.809 376.982,211.809 377.734 M215.753 379.492 C 215.755 380.996,215.826 381.563,215.910 380.753 C 215.995 379.943,215.993 378.712,215.907 378.019 C 215.821 377.325,215.751 377.988,215.753 379.492 M184.869 381.530 C 185.462 381.620,186.341 381.618,186.822 381.525 C 187.302 381.432,186.816 381.359,185.742 381.362 C 184.668 381.365,184.275 381.441,184.869 381.530 M182.129 389.722 C 182.505 389.821,183.120 389.821,183.496 389.722 C 183.872 389.624,183.564 389.544,182.813 389.544 C 182.061 389.544,181.753 389.624,182.129 389.722 \" stroke=\"none\" fill=\"#c99393\" fill-rule=\"evenodd\"></path></g></svg>\r\n  <h1 class=\"text-white text-7xl font-light place-self-center\">\r\n    <span class=\"text-yellow-400 font-medium\">.</span>\r\n    dotSystems\r\n  </h1>\r\n</div>\r\n\r\n<style>\r\n  svg {\r\n    transform: perspective(500px) rotatey(0deg);\r\n    animation-name: logo-rotate;\r\n    animation-duration: 4s;\r\n    animation-iteration-count: infinite;\r\n    animation-direction: alternate;\r\n    animation-timing-function: ease-in-out;\r\n  }\r\n\r\n  span {\r\n    animation-name: dot-color;\r\n    animation-duration: 1s;\r\n    animation-iteration-count: infinite;\r\n    animation-direction: alternate;\r\n    animation-timing-function: ease-in-out;\r\n  }\r\n\r\n  @keyframes logo-rotate {\r\n    0% {\r\n      transform: perspective(500px) rotateY(0deg);\r\n    }\r\n    100% {\r\n      transform: perspective(500px) rotateY(360deg);\r\n    }\r\n  }\r\n\r\n  @keyframes dot-color {\r\n    0% {\r\n      color: rgb(250 204 21)\r\n    }\r\n    100% {\r\n      color: rgb(255 255 255)\r\n    }\r\n  }\r\n</style>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { fade } from \"svelte/transition\";\r\n  import { authenticateComplete, resetPasswordWindowStatus } from \"../stores/ui\";\r\n  import { onDestroy } from \"svelte\";\r\n  let triggerTransition = true, password = \"\", message = \"\", formDisabled = false;\r\n\r\n  $: setTimeout(() => {\r\n    triggerTransition = false;\r\n  }, 2000)\r\n\r\n  let checkPassword = () => {\r\n    message = \"Checking password...\";\r\n    formDisabled = true;\r\n    ipcRenderer.send(\"login-validate\", password);\r\n  }\r\n\r\n  ipcRenderer.on(\"login-validate\", (event, res) => {\r\n    if (res.success) {\r\n      setTimeout(() => {\r\n        message = res.message;\r\n        setTimeout(() => {\r\n          $authenticateComplete = true;\r\n        }, 1000)\r\n      }, 2000);\r\n    } else {\r\n      setTimeout(() => {\r\n        message = res.message;\r\n        formDisabled = false;\r\n      }, 2000)\r\n    }\r\n  });\r\n\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"login-validate\");\r\n  })\r\n</script>\r\n\r\n{#if triggerTransition}\r\n  <div out:fade={{duration: 250}} class=\"w-screen h-screen bg-red-800 fixed z-50 flex flex-col justify-center items-center\">\r\n    <svg id=\"svg\" class=\"h-72 w-72 m-4 drop-shadow-md\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0, 0, 400,400\"><g id=\"svgg\"><path id=\"path0\" d=\"M183.789 0.423 C 134.727 4.908,92.694 24.420,58.557 58.557 C -38.913 156.026,-11.096 320.157,113.086 380.303 C 156.602 401.380,207.496 405.861,254.252 392.734 C 329.911 371.491,386.697 306.989,398.029 229.418 C 414.396 117.391,335.823 14.786,223.220 1.141 C 215.335 0.186,191.193 -0.254,183.789 0.423 M201.563 12.648 C 201.563 12.944,201.167 13.449,200.684 13.770 C 199.807 14.352,199.805 14.378,199.941 23.465 C 200.084 32.996,200.234 34.055,201.544 34.756 C 203.132 35.606,202.315 35.938,198.633 35.938 C 194.840 35.938,194.268 35.686,195.779 34.683 C 196.624 34.121,196.634 33.996,196.531 25.277 C 196.416 15.575,196.263 14.441,194.998 13.872 C 193.167 13.049,194.063 12.533,197.559 12.400 C 199.438 12.329,201.108 12.234,201.270 12.190 C 201.431 12.146,201.563 12.352,201.563 12.648 M215.962 13.079 C 224.378 13.726,223.600 13.311,223.256 16.975 C 222.906 20.714,221.641 21.073,220.732 17.690 C 220.206 15.732,219.091 14.844,217.157 14.844 L 215.738 14.844 215.512 17.285 C 214.181 31.635,214.258 35.547,215.868 35.547 C 216.164 35.547,216.406 35.831,216.406 36.179 C 216.406 36.738,215.961 36.779,212.598 36.534 C 208.288 36.220,207.583 35.887,209.324 34.987 C 209.991 34.643,210.623 33.968,210.730 33.489 C 210.972 32.406,212.109 17.885,212.109 15.880 L 212.109 14.412 210.059 14.530 C 208.048 14.646,207.989 14.685,207.031 16.503 C 205.543 19.330,204.085 19.220,204.434 16.309 C 204.570 15.181,204.682 13.773,204.684 13.180 C 204.687 12.114,204.709 12.105,206.738 12.315 C 207.866 12.431,212.017 12.775,215.962 13.079 M191.207 12.961 C 191.907 13.713,191.507 17.787,190.723 17.898 C 190.089 17.988,189.745 17.759,189.483 17.071 C 187.963 13.073,181.690 13.829,181.653 18.014 C 181.635 20.056,182.891 21.387,186.302 22.938 C 191.520 25.311,192.969 26.924,192.969 30.358 C 192.969 34.931,190.300 36.781,183.485 36.933 C 181.074 36.987,178.368 37.203,177.471 37.413 C 175.602 37.850,175.497 37.766,171.354 32.528 C 168.706 29.180,168.120 28.810,166.000 29.149 C 164.616 29.371,164.423 29.519,164.597 30.230 C 164.708 30.684,165.006 32.285,165.260 33.789 C 165.814 37.064,166.197 37.891,167.159 37.891 C 168.257 37.891,168.512 39.015,167.467 39.243 C 165.870 39.592,161.971 40.234,161.452 40.234 C 160.705 40.234,160.821 39.570,161.725 38.666 C 162.221 38.169,162.442 37.557,162.322 37.006 C 162.217 36.526,161.508 32.529,160.746 28.125 C 159.210 19.252,158.946 18.359,157.863 18.359 C 156.749 18.359,156.478 17.239,157.533 16.998 C 161.701 16.046,167.988 15.207,169.383 15.416 C 174.719 16.217,176.105 23.197,171.635 26.761 L 170.548 27.628 171.599 28.179 C 172.177 28.482,173.926 30.207,175.485 32.012 C 179.003 36.085,179.297 36.209,179.297 33.626 C 179.297 31.769,179.360 31.641,180.273 31.641 C 180.902 31.641,181.250 31.860,181.250 32.257 C 181.250 34.866,186.682 36.148,188.793 34.037 C 191.426 31.404,189.623 28.224,183.905 25.413 C 174.525 20.803,177.491 12.046,188.221 12.669 C 189.800 12.761,191.144 12.892,191.207 12.961 M229.269 14.590 C 231.839 15.080,232.687 15.755,231.291 16.198 C 229.955 16.622,229.997 17.745,231.529 22.466 L 233.011 27.032 235.792 23.575 C 239.012 19.573,239.428 18.629,238.449 17.548 C 237.412 16.401,237.960 16.261,241.391 16.795 C 244.772 17.320,245.373 17.916,243.364 18.748 C 242.686 19.029,240.415 21.324,237.943 24.227 L 233.689 29.222 233.033 32.789 C 232.323 36.655,232.439 37.719,233.614 38.092 C 234.431 38.352,234.677 39.453,233.917 39.453 C 232.762 39.453,226.718 38.175,226.392 37.861 C 226.170 37.648,226.494 37.347,227.217 37.095 C 228.693 36.580,229.117 35.674,229.718 31.752 L 230.191 28.661 228.162 22.381 C 226.980 18.722,225.816 15.814,225.372 15.412 C 223.767 13.960,224.813 13.740,229.269 14.590 M164.258 17.453 C 162.442 17.740,162.410 17.933,163.335 22.990 L 164.204 27.743 165.598 27.494 C 169.665 26.767,170.883 25.401,170.626 21.855 C 170.359 18.167,168.382 16.800,164.258 17.453 M153.606 20.775 C 153.962 22.104,154.165 23.335,154.057 23.510 C 153.653 24.163,152.412 23.795,151.782 22.834 C 150.654 21.112,145.194 21.214,143.277 22.993 C 143.018 23.233,145.005 30.682,145.445 31.122 C 146.081 31.758,150.000 30.012,150.223 28.994 C 150.629 27.139,150.741 26.953,151.455 26.953 C 152.157 26.953,154.106 32.563,153.657 33.290 C 153.291 33.882,151.974 33.582,151.563 32.813 C 151.085 31.921,150.292 31.848,147.829 32.468 C 145.761 32.989,145.764 32.963,147.130 37.875 C 148.437 42.578,148.219 42.404,151.617 41.449 C 155.018 40.492,155.859 39.667,155.859 37.288 C 155.859 33.589,157.845 34.511,158.610 38.565 C 159.176 41.563,160.169 40.900,151.480 43.332 C 143.917 45.449,142.634 45.549,144.185 43.898 L 145.069 42.957 142.615 34.272 C 140.012 25.058,139.500 23.828,138.272 23.828 C 136.664 23.828,137.511 22.675,139.551 22.086 C 140.679 21.760,143.975 20.808,146.875 19.971 C 149.775 19.133,152.331 18.427,152.554 18.403 C 152.777 18.379,153.250 19.447,153.606 20.775 M265.805 24.147 C 275.236 29.236,268.256 48.433,257.693 46.460 C 251.276 45.261,248.560 40.153,250.630 33.176 C 253.288 24.216,259.301 20.638,265.805 24.147 M134.586 24.243 C 134.727 24.472,134.561 24.969,134.218 25.348 C 133.434 26.215,133.428 28.195,134.180 38.672 C 134.976 49.765,134.975 49.779,133.783 50.322 C 132.652 50.838,133.617 51.777,124.218 41.016 C 118.302 34.241,117.240 33.244,115.918 33.217 C 114.430 33.187,115.392 32.342,118.609 30.856 C 122.375 29.116,122.656 29.049,122.656 29.883 C 122.656 30.205,122.492 30.469,122.292 30.469 C 121.655 30.469,121.424 31.969,121.918 32.895 C 122.583 34.142,132.101 45.373,132.313 45.161 C 132.511 44.962,131.321 31.163,130.979 29.688 C 130.639 28.227,130.104 27.734,128.858 27.734 C 126.877 27.734,127.632 26.775,130.762 25.315 C 134.244 23.691,134.244 23.691,134.586 24.243 M259.940 24.984 C 255.862 26.635,252.085 37.955,254.200 42.188 C 256.323 46.437,261.235 45.481,264.007 40.279 C 268.833 31.225,266.470 22.339,259.940 24.984 M284.668 32.526 C 288.374 34.405,291.406 36.122,291.406 36.343 C 291.406 37.030,289.459 40.625,289.088 40.625 C 287.914 40.625,287.490 40.098,287.712 38.915 C 288.113 36.777,287.446 35.860,284.429 34.401 C 282.903 33.663,281.589 33.135,281.508 33.229 C 281.427 33.322,280.478 35.124,279.398 37.234 L 277.435 41.069 279.531 42.097 L 281.628 43.125 282.820 42.244 C 285.336 40.383,285.746 41.416,283.931 45.043 C 282.012 48.879,282.247 48.597,281.377 48.110 C 280.881 47.832,280.664 47.256,280.664 46.221 C 280.664 44.827,280.535 44.663,278.626 43.637 L 276.588 42.542 274.818 46.068 C 272.907 49.873,272.703 50.926,273.671 51.995 C 275.090 53.564,273.700 53.459,270.277 51.740 C 266.883 50.035,266.204 49.219,268.182 49.219 C 269.392 49.219,270.032 48.206,274.627 39.027 C 277.972 32.346,278.188 31.771,277.781 30.645 C 277.270 29.232,277.231 28.789,277.637 28.976 C 277.798 29.050,280.962 30.648,284.668 32.526 M113.413 33.856 C 113.557 34.000,113.412 34.518,113.092 35.007 C 112.344 36.148,112.288 36.016,117.142 44.531 C 121.652 52.442,122.519 53.580,123.785 53.249 C 125.753 52.735,124.420 54.321,121.488 55.982 C 118.721 57.550,116.997 57.847,118.315 56.528 C 119.242 55.602,118.608 53.973,114.584 46.935 C 109.975 38.874,109.255 37.891,107.963 37.891 C 106.192 37.891,106.705 37.151,109.669 35.429 C 112.995 33.496,113.036 33.479,113.413 33.856 M104.688 39.235 C 104.688 39.544,104.512 39.906,104.297 40.039 C 103.455 40.559,104.104 41.828,109.645 50.495 C 115.058 58.961,115.342 59.502,114.649 60.009 C 113.500 60.849,113.429 60.822,103.415 55.767 C 98.207 53.138,93.808 50.924,93.641 50.848 C 93.219 50.655,102.343 64.577,102.883 64.951 C 103.124 65.117,103.710 65.186,104.186 65.105 C 105.887 64.815,105.304 65.848,102.826 67.517 C 100.459 69.111,98.442 69.370,99.922 67.891 C 100.798 67.014,100.393 66.118,96.058 59.326 C 90.293 50.296,90.059 50.000,88.652 50.000 C 86.946 50.000,87.238 49.410,89.735 47.813 L 91.970 46.383 101.071 50.929 L 110.171 55.474 105.861 49.026 C 101.894 43.092,101.458 42.578,100.385 42.578 C 98.681 42.578,98.942 42.021,101.465 40.270 C 103.871 38.601,104.688 38.338,104.688 39.235 M308.542 46.973 C 312.548 49.819,315.907 52.306,316.005 52.500 C 316.184 52.850,313.282 57.395,312.868 57.412 C 311.931 57.453,311.309 56.350,311.696 55.334 C 312.623 52.894,311.215 49.609,309.241 49.609 C 309.139 49.609,306.579 53.109,303.551 57.385 C 298.149 65.017,297.446 66.430,298.516 67.500 C 300.114 69.098,297.839 68.390,295.117 66.442 C 292.261 64.398,291.463 63.331,292.969 63.569 C 294.601 63.827,295.384 63.011,300.773 55.426 L 306.367 47.553 305.430 46.822 C 303.570 45.373,302.103 45.505,299.519 47.354 C 297.633 48.704,297.485 46.727,299.282 44.200 C 301.345 41.300,299.985 40.893,308.542 46.973 M217.188 43.158 C 343.392 57.779,402.076 206.752,319.516 302.926 C 242.326 392.845,96.048 367.740,52.973 257.180 C 10.206 147.414,100.567 29.647,217.188 43.158 M84.194 53.822 C 83.949 55.269,84.048 55.421,88.685 60.756 C 96.002 69.175,96.792 71.925,93.046 75.931 C 88.027 81.299,84.607 80.571,77.776 72.680 C 71.344 65.249,71.648 65.527,70.304 65.822 C 68.409 66.238,68.891 65.254,71.740 62.891 C 74.647 60.479,74.855 60.435,74.683 62.260 C 74.547 63.709,74.502 63.645,80.552 70.572 C 86.795 77.718,88.643 78.445,91.610 74.919 C 93.876 72.226,93.226 70.616,86.993 63.477 C 81.716 57.432,81.495 57.237,80.039 57.348 C 78.417 57.472,78.589 57.109,81.339 54.603 C 84.243 51.956,84.522 51.880,84.194 53.822 M323.774 58.721 C 325.143 60.146,325.177 61.269,323.830 60.548 C 322.746 59.968,322.800 59.936,319.685 62.957 C 316.146 66.388,316.122 65.975,320.072 69.611 L 323.340 72.620 326.166 69.706 C 328.839 66.950,328.978 66.718,328.736 65.427 C 328.371 63.480,328.960 63.674,331.860 66.459 C 334.496 68.990,334.711 69.657,332.764 69.268 C 330.741 68.863,317.549 82.860,318.420 84.488 C 319.518 86.540,317.918 86.060,315.426 83.590 C 312.576 80.766,312.354 80.264,314.110 80.615 C 315.233 80.840,315.591 80.605,318.615 77.652 C 322.483 73.877,322.490 74.383,318.519 70.602 L 315.358 67.593 312.127 70.903 C 309.040 74.066,308.908 74.274,309.153 75.583 C 309.533 77.609,308.768 77.349,305.935 74.490 C 303.347 71.879,303.227 71.425,305.211 71.743 C 307.120 72.049,319.729 58.790,319.408 56.814 C 319.048 54.598,320.370 55.175,323.774 58.721 M342.581 78.060 L 347.756 84.049 345.851 85.757 C 343.664 87.717,343.528 87.764,342.987 86.754 C 342.697 86.211,342.746 85.705,343.167 84.898 C 344.118 83.074,343.861 82.207,341.569 79.504 L 339.387 76.933 337.032 78.994 C 335.737 80.127,334.218 81.430,333.658 81.888 L 332.639 82.721 333.995 84.297 C 335.603 86.166,336.277 86.477,337.613 85.969 C 340.092 85.026,339.829 86.659,337.106 89.125 C 334.591 91.403,332.932 91.575,333.831 89.464 C 334.532 87.816,334.394 87.232,332.909 85.558 L 331.384 83.839 327.899 86.886 C 323.786 90.481,323.895 90.011,326.488 92.957 C 328.762 95.540,329.662 95.823,332.208 94.759 C 333.403 94.260,333.593 94.274,334.160 94.900 C 334.764 95.568,331.907 98.380,329.982 99.013 C 329.477 99.178,319.827 88.253,319.598 87.257 C 319.498 86.821,319.794 86.749,320.966 86.925 C 323.268 87.272,336.877 75.512,336.702 73.327 C 336.521 71.070,336.589 71.125,342.581 78.060 M61.961 76.660 C 64.618 78.660,64.136 79.556,60.511 79.354 C 52.030 78.882,56.303 90.745,66.080 94.812 C 71.464 97.052,75.822 93.543,73.445 88.883 C 72.026 86.099,73.480 85.544,76.149 87.851 L 77.884 89.351 76.274 92.062 C 71.312 100.414,65.152 100.784,57.553 93.187 C 52.228 87.864,52.232 83.012,57.567 77.504 C 59.979 75.014,59.816 75.045,61.961 76.660 M48.828 91.361 C 48.828 92.732,49.150 93.014,57.326 98.797 C 64.024 103.534,64.623 103.835,66.309 103.308 C 67.597 102.906,67.412 103.465,65.224 106.579 C 63.025 109.711,62.500 109.989,62.500 108.025 C 62.500 105.628,46.154 94.417,45.113 96.100 C 44.753 96.683,44.050 96.113,44.306 95.446 C 44.788 94.188,48.141 89.856,48.473 90.061 C 48.668 90.182,48.828 90.767,48.828 91.361 M358.078 98.928 C 362.847 106.395,363.014 109.163,358.860 111.857 C 354.868 114.445,351.060 113.290,348.033 108.572 C 347.336 107.487,346.553 106.681,346.292 106.781 C 345.021 107.269,340.228 110.602,340.179 111.033 C 340.149 111.303,340.105 111.875,340.081 112.305 C 339.995 113.902,339.259 113.396,337.398 110.462 C 335.728 107.829,335.143 105.690,336.450 106.997 C 337.429 107.976,339.053 107.255,346.186 102.675 C 354.423 97.386,354.757 97.121,354.666 95.947 C 354.484 93.622,354.951 94.030,358.078 98.928 M42.433 100.135 C 42.103 101.451,42.783 101.948,52.625 107.589 C 64.721 114.521,64.311 114.825,42.809 114.850 L 37.305 114.857 40.430 116.537 C 42.148 117.462,45.464 119.321,47.798 120.670 C 51.948 123.068,52.568 123.237,54.395 122.469 C 55.430 122.034,55.244 122.793,53.625 125.607 C 52.121 128.223,51.380 128.619,51.349 126.824 C 51.325 125.436,51.661 125.681,42.713 120.539 C 34.618 115.888,34.116 115.683,32.825 116.489 C 31.532 117.296,31.538 116.576,32.843 114.263 C 34.398 111.508,33.239 111.788,44.571 111.433 L 54.182 111.133 47.594 107.477 C 41.201 103.929,40.979 103.840,40.055 104.446 C 38.515 105.455,38.514 104.511,40.052 101.761 C 41.464 99.235,42.906 98.250,42.433 100.135 M352.252 102.794 L 348.058 105.539 349.231 107.244 C 353.529 113.492,361.879 108.233,357.821 101.834 C 357.181 100.825,356.610 100.011,356.552 100.024 C 356.493 100.038,354.558 101.284,352.252 102.794 M193.555 111.582 C 192.910 111.657,190.713 111.910,188.672 112.143 C 147.868 116.817,115.006 152.796,113.420 194.531 C 111.195 253.085,165.232 296.594,222.080 282.022 C 287.229 265.322,308.750 182.202,259.982 135.640 C 242.256 118.716,215.495 109.024,193.555 111.582 M367.588 115.123 C 369.527 119.399,369.567 120.085,367.812 118.935 C 366.791 118.265,366.480 118.343,362.012 120.391 C 360.562 121.056,359.375 121.737,359.375 121.904 C 359.375 122.272,362.683 129.610,362.984 129.912 C 363.620 130.547,370.646 126.619,370.771 125.559 C 371.002 123.593,371.715 124.156,373.145 127.432 C 374.573 130.705,374.564 132.037,373.123 130.733 C 372.087 129.795,372.318 129.723,363.206 133.828 C 353.918 138.013,353.906 138.019,353.906 139.283 C 353.906 141.157,353.115 140.552,351.775 137.653 C 351.014 136.004,350.391 134.417,350.391 134.125 C 350.391 133.506,351.016 133.416,351.367 133.984 C 351.859 134.781,353.952 134.328,357.594 132.638 L 361.337 130.901 360.314 128.634 C 359.751 127.387,358.930 125.520,358.488 124.485 C 357.537 122.253,357.563 122.252,352.465 124.709 C 349.479 126.148,348.998 126.518,348.828 127.507 C 348.488 129.490,347.866 129.012,346.320 125.578 C 344.568 121.689,344.690 121.105,346.918 122.715 C 347.431 123.085,349.181 122.428,356.361 119.170 C 364.919 115.287,365.625 114.836,365.625 113.249 C 365.625 111.783,366.416 112.538,367.588 115.123 M208.259 114.475 C 278.136 121.596,309.286 206.139,260.551 256.395 C 227.624 290.350,174.990 291.161,141.267 258.233 C 99.592 217.539,110.718 148.373,163.086 122.594 C 167.972 120.189,177.241 116.793,180.302 116.286 C 180.931 116.181,182.939 115.815,184.766 115.471 C 191.951 114.119,201.001 113.735,208.259 114.475 M30.469 122.493 C 30.835 124.630,48.750 131.389,50.014 129.866 C 51.265 128.359,51.266 130.123,50.018 133.353 C 48.755 136.618,47.656 137.551,47.656 135.358 C 47.656 134.186,47.361 133.994,42.701 132.135 L 38.722 130.548 37.135 134.645 C 36.261 136.898,35.547 138.884,35.547 139.057 C 35.547 139.230,37.418 140.097,39.705 140.983 C 43.543 142.471,45.313 142.719,45.313 141.771 C 45.313 141.570,45.576 141.406,45.898 141.406 C 46.700 141.406,46.659 141.665,45.271 145.298 C 44.027 148.557,43.323 149.089,42.966 147.042 C 42.602 144.960,24.945 138.284,23.430 139.655 C 22.158 140.806,22.141 139.564,23.384 136.328 C 24.538 133.324,25.781 132.170,25.781 134.103 C 25.781 135.360,26.132 135.609,30.194 137.243 L 33.631 138.626 33.959 137.770 C 34.139 137.299,34.920 135.345,35.695 133.428 C 36.469 131.510,37.061 129.905,37.009 129.860 C 35.502 128.560,28.125 126.830,28.125 127.776 C 28.125 127.968,27.861 128.125,27.539 128.125 C 26.737 128.125,26.779 127.867,28.166 124.233 C 29.411 120.974,30.117 120.440,30.469 122.493 M194.727 127.003 C 140.689 130.548,110.577 192.343,140.707 237.859 C 172.246 285.501,245.644 277.621,266.333 224.371 C 285.433 175.209,247.439 123.545,194.727 127.003 M205.664 129.709 C 254.298 133.904,283.422 186.036,261.300 229.297 C 235.751 279.259,164.227 279.259,138.698 229.297 C 116.614 186.077,145.999 133.482,194.336 129.713 C 200.053 129.267,200.534 129.267,205.664 129.709 M377.085 137.793 C 378.289 141.269,378.349 141.797,377.539 141.797 C 377.217 141.797,376.953 141.633,376.953 141.433 C 376.953 140.324,374.861 140.735,367.077 143.376 C 357.959 146.469,357.147 146.848,356.962 148.104 C 356.686 149.985,355.906 149.149,354.766 145.750 C 353.560 142.154,353.742 140.895,355.218 142.619 C 356.020 143.556,355.838 143.597,366.016 140.129 C 374.807 137.133,375.000 137.037,375.000 135.694 C 375.000 133.772,376.063 134.842,377.085 137.793 M191.746 142.761 C 146.247 150.222,128.056 205.255,160.377 237.660 C 195.631 273.007,255.658 248.173,255.658 198.242 C 255.658 163.798,225.120 137.288,191.746 142.761 M24.089 144.372 C 25.685 144.836,26.171 145.141,26.005 145.576 C 25.882 145.896,25.781 146.319,25.781 146.516 C 25.781 146.714,25.333 146.875,24.785 146.875 C 22.079 146.875,20.029 149.461,20.547 152.223 C 21.681 158.264,37.391 162.151,40.032 157.044 C 41.085 155.008,40.811 153.068,39.258 151.563 C 36.812 149.192,37.435 148.198,40.783 149.130 L 43.063 149.764 42.855 152.323 C 42.064 162.064,36.115 165.442,26.420 161.656 C 18.897 158.717,16.515 151.362,20.913 144.650 C 21.614 143.580,21.422 143.596,24.089 144.372 M380.087 147.363 C 380.540 148.921,380.998 150.503,381.106 150.879 C 381.351 151.731,380.370 151.799,379.688 150.977 C 378.972 150.115,378.712 150.163,368.940 152.961 C 358.334 155.998,359.622 155.163,360.549 158.405 C 361.535 161.853,361.973 162.260,364.955 162.500 C 369.608 162.874,366.346 165.671,361.304 165.630 C 360.685 165.625,356.315 151.367,356.788 150.894 C 357.019 150.663,357.661 150.918,358.669 151.642 C 359.211 152.031,360.898 151.672,368.044 149.646 C 377.745 146.896,378.125 146.749,378.125 145.754 C 378.125 145.007,378.448 144.531,378.955 144.531 C 379.125 144.531,379.634 145.806,380.087 147.363 M210.742 145.889 C 252.529 155.228,267.567 205.835,237.500 235.936 C 201.212 272.264,138.980 240.094,147.452 189.387 C 152.374 159.931,182.115 139.490,210.742 145.889 M193.945 158.216 C 164.927 162.685,150.136 196.388,166.522 220.703 C 188.679 253.582,239.970 237.908,240.023 198.242 C 240.056 173.343,218.320 154.462,193.945 158.216 M209.375 161.690 C 237.699 168.975,247.168 205.210,226.002 225.316 C 201.774 248.330,162.637 231.466,162.718 198.047 C 162.778 173.245,185.490 155.547,209.375 161.690 M384.311 164.746 C 385.392 169.877,385.235 171.679,383.894 169.531 C 383.223 168.458,382.428 168.512,372.461 170.314 C 363.818 171.877,362.891 172.209,362.891 173.740 C 362.891 175.615,361.825 173.430,361.352 170.585 C 360.739 166.900,360.914 166.205,362.129 167.509 C 363.127 168.580,362.352 168.633,372.602 166.789 C 381.954 165.107,382.813 164.844,382.813 163.658 C 382.813 162.086,383.919 162.889,384.311 164.746 M20.042 164.715 C 21.293 165.062,20.666 166.430,18.994 167.002 C 18.161 167.287,17.293 167.707,17.063 167.937 C 16.614 168.386,15.605 174.995,15.983 175.007 C 16.108 175.011,18.042 175.275,20.280 175.593 C 25.058 176.272,24.486 176.527,24.821 173.567 C 25.093 171.164,25.092 171.161,23.875 170.532 C 21.154 169.125,22.580 168.140,26.651 168.614 C 29.939 168.997,31.098 170.441,28.529 170.954 C 27.091 171.242,26.751 171.803,26.416 174.438 L 26.164 176.415 31.006 176.985 L 35.847 177.554 36.194 174.578 C 36.665 170.537,36.467 169.945,34.264 168.811 C 31.050 167.157,31.859 165.882,35.666 166.600 C 39.119 167.250,38.923 166.503,37.897 175.094 C 37.077 181.969,36.540 184.243,36.053 182.915 C 35.379 181.077,34.856 180.921,25.197 179.675 L 15.824 178.465 14.917 179.519 C 14.412 180.106,13.869 180.420,13.692 180.228 C 13.417 179.930,14.983 165.946,15.450 164.526 C 15.612 164.037,17.943 164.132,20.042 164.715 M193.053 171.882 C 172.827 177.182,166.003 202.459,180.814 217.223 C 200.488 236.836,233.132 218.177,226.321 191.211 C 222.736 177.015,207.422 168.118,193.053 171.882 M207.596 174.843 C 220.310 178.940,227.618 193.429,223.272 205.926 C 214.981 229.766,180.959 227.440,175.944 202.691 C 172.311 184.760,190.020 169.180,207.596 174.843 M386.463 177.441 C 387.332 188.600,386.006 191.335,379.913 190.947 C 375.687 190.678,373.665 188.300,373.172 183.020 L 372.934 180.473 369.573 180.720 C 365.749 181.000,364.955 181.298,364.444 182.641 C 363.939 183.970,363.352 183.829,363.124 182.324 C 362.301 176.888,362.659 174.460,363.972 176.563 C 364.583 177.542,366.519 177.574,376.409 176.770 C 384.182 176.138,384.630 176.044,384.972 174.964 C 385.547 173.154,386.216 174.266,386.463 177.441 M378.041 180.058 C 374.353 180.367,374.396 180.325,374.941 183.096 C 376.194 189.472,385.183 188.976,385.151 182.532 C 385.136 179.468,385.125 179.464,378.041 180.058 M17.871 183.449 C 19.337 183.842,19.046 185.404,17.451 185.704 C 15.438 186.081,14.453 187.234,14.453 189.212 L 14.453 190.894 20.375 191.150 C 32.795 191.688,34.256 191.567,35.117 189.930 C 36.175 187.923,36.699 190.933,36.080 195.453 C 35.807 197.442,35.329 197.771,34.786 196.342 C 34.279 195.010,34.194 194.998,23.664 194.692 L 14.063 194.413 14.063 195.865 C 14.063 197.913,14.655 198.789,16.635 199.664 C 17.998 200.267,18.359 200.628,18.359 201.385 C 18.359 202.456,18.227 202.481,14.608 202.103 L 12.305 201.863 12.402 194.974 C 12.455 191.186,12.601 186.987,12.726 185.645 L 12.953 183.203 14.972 183.208 C 16.083 183.211,17.388 183.320,17.871 183.449 M365.542 194.309 C 366.090 195.513,366.942 195.624,377.311 195.837 L 385.285 196.000 386.215 195.070 C 387.872 193.413,387.989 193.762,387.707 199.512 C 387.273 208.350,385.966 210.562,381.191 210.538 C 376.421 210.514,373.438 206.619,373.888 201.004 L 374.023 199.321 370.780 199.092 C 367.211 198.840,365.655 199.213,365.346 200.395 C 364.740 202.715,364.063 201.064,364.063 197.266 C 364.063 193.197,364.572 192.180,365.542 194.309 M375.781 201.387 C 375.781 205.293,377.151 206.752,380.854 206.788 C 384.419 206.824,385.929 205.139,385.935 201.120 C 385.938 199.343,385.588 199.231,379.980 199.224 L 375.781 199.219 375.781 201.387 M20.664 207.806 L 26.289 210.611 29.992 210.333 C 33.788 210.049,35.156 209.433,35.156 208.008 C 35.156 207.400,35.766 207.202,36.059 207.715 C 36.569 208.606,36.737 215.625,36.249 215.625 C 35.965 215.625,35.559 215.229,35.347 214.746 C 34.979 213.909,34.764 213.870,30.853 213.922 L 26.745 213.977 21.674 217.179 C 18.884 218.941,16.056 220.981,15.388 221.714 C 13.638 223.637,13.597 223.563,13.158 217.676 C 13.007 215.643,13.738 214.715,14.312 216.211 C 14.735 217.313,16.410 216.796,20.324 214.355 L 24.239 211.914 20.453 210.059 C 16.284 208.015,14.354 207.709,13.672 208.984 C 12.925 210.379,12.606 209.823,12.329 206.646 C 11.990 202.760,12.223 202.319,13.814 203.834 C 14.488 204.476,17.570 206.264,20.664 207.806 M364.844 211.866 C 364.844 213.000,366.136 213.306,373.286 213.868 C 383.658 214.683,385.430 214.655,385.742 213.672 C 386.398 211.604,387.226 212.851,386.973 215.527 C 386.836 216.978,386.723 218.647,386.722 219.238 C 386.718 220.493,385.744 220.718,385.435 219.536 C 385.121 218.335,384.037 218.123,374.586 217.420 C 365.368 216.734,364.636 216.777,364.240 218.026 C 363.391 220.701,362.804 216.089,363.524 212.402 C 363.736 211.318,364.844 210.868,364.844 211.866 M37.812 224.532 C 39.223 232.466,39.219 233.072,37.766 231.707 C 36.618 230.628,36.906 230.613,27.817 232.224 C 17.808 233.997,17.332 234.136,17.019 235.383 C 16.557 237.224,15.826 236.107,15.258 232.695 C 14.673 229.176,14.901 228.089,15.911 229.590 C 16.680 230.735,16.718 230.732,26.953 228.906 C 31.769 228.047,35.869 227.344,36.063 227.344 C 36.435 227.344,36.149 224.641,35.519 222.214 C 35.117 220.666,34.279 220.164,31.348 219.716 C 30.298 219.556,29.688 219.260,29.688 218.911 C 29.688 218.608,29.644 218.228,29.590 218.066 C 29.494 217.778,34.818 216.826,35.911 216.936 C 36.323 216.978,36.824 218.981,37.812 224.532 M364.063 221.080 C 364.063 222.265,364.921 222.529,374.273 224.211 C 384.466 226.045,383.809 225.995,384.661 225.000 C 385.495 224.026,386.455 223.964,386.181 224.902 C 386.072 225.278,385.868 226.392,385.730 227.377 C 385.591 228.362,385.361 229.341,385.219 229.552 C 385.026 229.840,372.429 234.721,366.406 236.841 C 366.084 236.955,366.348 237.070,366.992 237.097 C 367.637 237.124,371.064 237.652,374.609 238.271 C 381.014 239.388,381.061 239.390,382.113 238.643 C 383.823 237.428,383.875 237.578,383.163 241.667 C 382.755 244.008,381.641 245.282,381.641 243.407 C 381.641 242.106,380.773 241.846,370.187 239.967 C 360.551 238.258,359.766 238.058,359.772 237.321 C 359.782 235.932,360.142 235.750,370.898 231.711 C 376.699 229.533,381.229 227.747,380.964 227.742 C 380.700 227.738,376.850 227.113,372.410 226.354 L 364.337 224.973 363.446 225.810 C 362.044 227.127,361.822 226.596,362.413 223.340 C 362.927 220.505,364.063 218.950,364.063 221.080 M37.411 237.562 C 44.217 240.944,44.158 249.974,37.305 253.766 C 26.606 259.686,15.182 253.354,18.917 243.575 C 20.998 238.127,31.606 234.677,37.411 237.562 M29.937 240.463 C 22.560 242.249,18.790 246.313,20.838 250.273 C 23.516 255.452,39.309 251.620,40.454 245.513 C 41.291 241.053,36.669 238.834,29.937 240.463 M360.156 242.760 C 360.156 244.029,360.439 244.162,369.890 247.320 C 378.576 250.223,379.075 250.322,380.147 249.351 C 381.588 248.047,381.368 249.405,378.963 256.653 C 376.125 265.208,376.551 264.662,373.511 263.635 C 370.592 262.650,370.512 261.305,373.350 260.916 C 374.220 260.796,375.199 260.477,375.525 260.206 C 376.033 259.785,378.290 253.903,378.024 253.695 C 377.774 253.501,370.452 251.172,370.090 251.172 C 369.861 251.172,369.363 252.157,368.984 253.362 L 368.293 255.552 369.236 256.585 C 370.166 257.604,370.280 259.199,369.399 258.875 C 369.150 258.783,367.715 258.307,366.211 257.817 C 362.925 256.746,363.119 256.892,363.654 255.893 C 363.948 255.343,364.474 255.078,365.268 255.078 C 366.256 255.078,366.543 254.846,367.045 253.644 C 368.321 250.591,368.249 250.493,363.485 248.806 C 358.645 247.092,358.978 246.999,357.864 250.369 C 356.707 253.868,356.777 254.409,358.594 255.964 C 361.894 258.789,358.015 259.532,354.009 256.843 C 353.920 256.783,358.213 243.880,358.787 242.480 C 359.210 241.451,360.156 241.644,360.156 242.760 M34.124 259.522 C 35.755 260.203,37.625 262.460,38.492 264.792 C 39.468 267.416,39.484 267.420,42.912 266.039 C 46.251 264.692,47.391 263.787,47.194 262.636 C 46.857 260.670,48.269 262.282,49.452 265.214 C 50.689 268.282,50.772 270.791,49.566 268.652 C 48.929 267.525,47.672 267.827,39.181 271.146 C 30.677 274.471,29.807 274.940,29.612 276.310 C 29.220 279.055,24.877 268.929,24.832 265.167 C 24.777 260.638,29.675 257.663,34.124 259.522 M356.493 259.816 C 358.867 260.853,358.741 260.713,358.203 261.720 C 357.859 262.362,357.519 262.511,356.807 262.332 C 352.281 261.196,349.803 268.167,353.993 270.250 C 356.334 271.413,357.412 271.105,361.299 268.160 C 370.255 261.374,376.668 268.562,370.448 278.414 L 369.156 280.460 367.097 279.558 C 364.315 278.339,364.243 277.272,366.917 276.889 C 371.647 276.213,372.825 270.370,368.474 269.168 C 366.715 268.683,364.959 269.401,361.546 272.003 C 354.086 277.691,346.835 271.918,350.998 263.605 C 353.331 258.946,353.784 258.633,356.493 259.816 M30.795 262.734 C 27.352 263.776,26.319 266.015,27.614 269.629 C 28.419 271.873,28.156 271.862,33.203 269.864 C 38.292 267.850,38.109 268.034,37.116 265.922 C 35.584 262.662,33.877 261.801,30.795 262.734 M359.255 286.035 C 358.788 292.416,357.000 295.816,353.178 297.593 C 351.169 298.527,350.669 299.026,348.271 302.500 L 345.602 306.368 346.922 306.104 C 347.648 305.959,349.912 305.011,351.953 303.997 C 353.994 302.983,355.820 302.086,356.010 302.003 C 356.535 301.775,355.907 304.587,354.852 307.183 C 352.210 313.683,347.716 316.863,338.532 318.732 L 334.961 319.458 331.929 322.680 C 330.261 324.452,328.969 325.975,329.059 326.064 C 329.148 326.153,331.831 325.791,335.021 325.259 C 346.144 323.403,345.680 323.315,343.397 326.847 C 338.597 334.274,332.310 337.414,320.592 338.236 L 314.936 338.633 311.010 341.680 L 307.084 344.727 315.651 344.832 C 320.363 344.890,324.219 345.093,324.219 345.284 C 324.219 345.994,320.726 349.887,318.699 351.436 C 312.414 356.239,306.120 357.464,294.141 356.214 L 290.039 355.786 285.816 358.012 C 283.493 359.236,281.659 360.305,281.741 360.387 C 281.824 360.469,284.779 360.793,288.309 361.106 C 294.946 361.694,298.828 362.344,298.828 362.865 C 298.828 363.282,294.709 366.456,292.578 367.681 C 287.093 370.834,280.595 371.148,272.230 368.664 C 268.830 367.655,267.467 367.409,266.761 367.678 C 265.176 368.281,252.380 371.484,251.556 371.484 C 249.854 371.484,250.898 370.360,253.493 369.398 C 254.984 368.845,258.386 367.410,261.051 366.209 L 265.898 364.026 267.364 360.322 C 270.494 352.413,274.409 348.082,282.459 343.616 C 286.938 341.133,287.053 342.563,283.060 351.111 C 279.437 358.868,279.391 358.625,284.035 356.166 C 287.075 354.556,287.970 353.893,288.136 353.127 C 290.713 341.222,294.125 336.170,304.459 328.957 C 305.730 328.070,306.917 327.344,307.096 327.344 C 307.797 327.344,307.359 331.005,306.055 336.051 C 303.993 344.026,303.924 343.893,308.402 340.577 C 311.913 337.976,312.096 337.627,312.105 333.480 C 312.122 326.186,315.224 319.539,321.622 313.086 L 325.494 309.180 325.831 310.547 C 326.016 311.299,326.056 314.946,325.919 318.652 C 325.756 323.061,325.805 325.391,326.061 325.391 C 326.695 325.391,332.890 318.410,332.630 317.989 C 331.367 315.946,332.813 306.833,335.075 302.587 C 336.477 299.953,342.632 292.910,343.117 293.383 C 343.490 293.746,343.516 296.810,343.188 301.758 L 342.877 306.445 345.834 302.317 C 348.519 298.567,348.829 297.940,349.213 295.481 C 349.966 290.665,352.141 287.454,356.867 284.185 C 359.503 282.362,359.523 282.377,359.255 286.035 M44.120 285.410 C 48.770 288.542,50.869 291.629,51.734 296.610 C 52.178 299.167,52.526 299.901,54.889 303.258 C 57.952 307.609,58.417 307.862,58.052 304.980 C 56.893 295.841,57.294 293.506,59.638 295.757 C 66.062 301.926,69.135 309.058,68.606 316.574 L 68.356 320.131 71.630 323.388 C 75.548 327.285,75.569 327.269,75.136 320.777 C 74.794 315.654,74.877 311.889,75.351 311.029 C 75.743 310.318,82.005 316.651,84.254 320.033 C 87.183 324.440,89.025 331.107,89.077 337.490 L 89.091 339.258 92.690 341.916 C 96.930 345.048,96.914 345.067,95.298 338.848 C 92.402 327.701,92.580 327.288,98.438 331.555 C 106.292 337.276,109.773 342.280,112.083 351.172 L 113.148 355.273 116.828 357.314 C 121.226 359.752,121.275 359.689,118.934 354.587 C 113.432 342.596,113.463 342.079,119.475 345.410 C 126.351 349.219,130.752 354.241,133.504 361.418 L 134.961 365.219 140.234 367.543 C 143.135 368.822,146.536 370.275,147.793 370.774 C 150.166 371.716,150.762 372.380,149.408 372.574 C 148.728 372.671,139.883 370.543,134.863 369.074 C 133.558 368.692,132.848 368.689,131.543 369.059 C 119.703 372.415,115.742 372.482,109.486 369.432 C 107.017 368.228,102.722 365.033,102.450 364.197 C 102.240 363.553,105.564 362.910,111.523 362.441 C 114.316 362.222,117.213 361.918,117.960 361.767 L 119.318 361.492 115.083 359.231 L 110.848 356.969 106.971 357.391 C 93.383 358.869,86.768 357.141,79.922 350.324 C 78.009 348.420,76.573 346.734,76.730 346.576 C 76.888 346.418,80.805 346.201,85.435 346.094 L 93.854 345.898 89.924 342.872 L 85.993 339.846 80.321 339.443 C 68.775 338.623,62.611 335.608,57.824 328.439 C 55.266 324.610,55.185 324.632,65.463 326.398 C 73.094 327.710,72.876 327.838,69.306 324.121 C 65.977 320.654,66.319 320.824,59.570 319.295 C 52.135 317.609,47.603 313.402,45.351 306.093 C 44.322 302.754,44.321 302.754,47.334 304.418 C 48.693 305.169,51.090 306.239,52.660 306.798 L 55.516 307.813 52.771 303.849 C 50.535 300.622,49.714 299.747,48.352 299.140 C 44.092 297.239,42.270 293.875,41.570 286.621 C 41.274 283.555,41.327 283.530,44.120 285.410 M172.118 364.604 C 171.605 366.661,168.359 385.235,168.359 386.110 C 168.359 387.235,169.516 388.141,171.441 388.526 C 172.751 388.788,173.425 389.630,172.806 390.231 C 172.527 390.501,160.836 388.676,159.112 388.093 C 157.629 387.592,159.117 386.470,161.063 386.622 C 164.278 386.874,164.267 386.895,166.026 377.145 C 166.879 372.420,167.577 368.335,167.577 368.066 C 167.579 367.381,165.770 367.458,163.749 368.230 C 162.288 368.788,161.991 368.802,161.691 368.328 C 161.073 367.350,161.483 367.079,166.406 365.204 C 171.421 363.293,172.472 363.183,172.118 364.604 M230.616 364.746 C 230.732 365.337,231.203 368.896,231.663 372.656 C 232.123 376.416,232.573 379.569,232.664 379.663 C 233.105 380.121,234.973 379.005,235.086 378.215 C 235.375 376.199,237.109 377.120,237.109 379.289 C 237.109 381.390,237.014 381.470,234.180 381.729 C 232.269 381.904,232.982 387.554,234.979 388.055 C 236.444 388.423,236.146 389.321,234.473 389.578 C 228.506 390.492,226.225 390.107,228.956 388.645 C 229.713 388.240,229.769 387.959,229.593 385.493 C 229.347 382.053,229.762 382.245,224.133 382.971 C 221.476 383.313,219.178 383.594,219.026 383.594 C 217.971 383.594,226.386 364.914,227.866 363.973 C 228.993 363.256,230.403 363.652,230.616 364.746 M191.833 366.534 C 197.475 369.513,197.269 381.989,191.478 388.022 C 188.281 391.353,181.993 392.966,181.712 390.527 C 181.595 389.510,181.673 389.453,183.193 389.453 C 186.451 389.453,189.155 387.239,190.595 383.390 C 191.823 380.108,191.770 380.009,189.268 380.889 C 181.943 383.463,176.416 377.623,179.451 370.513 C 181.360 366.040,187.289 364.135,191.833 366.534 M210.742 366.498 C 217.187 369.733,217.866 387.189,211.706 391.266 C 207.670 393.937,203.093 392.610,200.781 388.098 L 199.414 385.430 199.414 379.141 C 199.414 368.366,204.083 363.156,210.742 366.498 M184.388 368.677 C 180.836 372.229,182.542 379.297,186.951 379.297 C 191.461 379.297,193.229 376.228,191.763 370.946 C 190.803 367.490,186.805 366.260,184.388 368.677 M205.859 368.066 C 202.244 369.898,202.156 387.014,205.746 389.839 C 209.943 393.140,212.718 387.210,211.752 377.004 C 211.035 369.428,209.066 366.441,205.859 368.066 M225.975 372.356 C 225.159 374.132,223.924 376.822,223.232 378.333 L 221.972 381.080 225.215 380.677 C 226.999 380.455,228.569 380.161,228.704 380.024 C 228.941 379.783,227.893 369.560,227.602 369.269 C 227.524 369.190,226.791 370.579,225.975 372.356 \" stroke=\"none\" fill=\"#fbfafa\" fill-rule=\"evenodd\"></path><path id=\"path1\" d=\"M191.080 84.412 C 186.066 100.110,182.023 113.010,182.095 113.079 C 182.167 113.148,183.457 112.973,184.961 112.690 C 188.305 112.061,195.488 111.328,198.310 111.328 L 200.391 111.328 200.391 83.594 C 200.391 68.340,200.347 55.862,200.293 55.865 C 200.239 55.868,196.093 68.715,191.080 84.412 M191.211 114.526 C 189.277 114.721,186.201 115.180,184.375 115.546 L 181.055 116.211 179.995 119.240 C 179.412 120.906,178.340 124.170,177.612 126.493 L 176.289 130.717 179.876 129.651 C 184.346 128.322,192.276 126.953,195.508 126.953 C 196.851 126.953,198.499 126.843,199.170 126.709 L 200.391 126.465 200.391 120.264 L 200.391 114.063 197.559 114.116 C 196.001 114.146,193.145 114.330,191.211 114.526 M194.336 129.713 C 189.576 130.084,183.528 131.289,178.758 132.817 L 175.195 133.959 172.696 141.882 C 171.321 146.239,170.113 150.030,170.012 150.306 C 169.911 150.582,171.651 149.850,173.879 148.679 C 180.990 144.941,188.658 142.784,196.547 142.304 L 200.391 142.069 200.391 135.683 L 200.391 129.297 199.316 129.352 C 198.726 129.383,196.484 129.545,194.336 129.713 M191.992 145.498 C 184.171 146.745,174.578 150.513,170.067 154.110 L 168.982 154.975 172.445 159.812 C 174.350 162.472,176.035 164.795,176.190 164.975 C 176.346 165.154,177.161 164.866,178.003 164.335 C 184.184 160.433,192.562 157.813,198.856 157.813 L 200.391 157.813 200.391 151.367 L 200.391 144.922 197.754 144.961 C 196.304 144.982,193.711 145.223,191.992 145.498 M65.706 154.508 C 65.814 154.616,76.607 162.509,89.690 172.048 L 113.477 189.391 114.300 184.442 C 114.753 181.719,115.607 177.680,116.198 175.466 C 116.789 173.251,117.209 171.380,117.132 171.308 C 117.055 171.236,106.709 167.810,94.141 163.695 C 81.572 159.579,69.989 155.784,68.399 155.262 C 66.810 154.739,65.598 154.400,65.706 154.508 M239.386 158.496 C 245.194 164.335,250.020 171.748,252.546 178.711 C 252.935 179.785,253.385 180.816,253.546 181.001 C 253.772 181.262,264.056 178.181,265.311 177.477 C 266.471 176.825,259.568 163.124,254.983 156.977 L 252.984 154.297 244.096 154.297 L 235.208 154.297 239.386 158.496 M256.641 154.501 C 256.641 154.622,257.340 155.648,258.196 156.780 C 260.832 160.272,264.215 166.497,266.222 171.546 C 267.276 174.198,268.156 176.409,268.178 176.459 C 268.474 177.139,280.068 172.452,279.854 171.739 C 279.019 168.950,276.236 162.480,274.284 158.789 L 272.012 154.492 264.326 154.386 C 260.099 154.328,256.641 154.380,256.641 154.501 M277.730 159.561 C 279.169 162.457,280.855 166.324,281.476 168.155 C 282.231 170.378,282.803 171.483,283.198 171.479 C 283.523 171.476,295.303 167.624,309.375 162.919 L 334.961 154.363 305.037 154.330 L 275.114 154.297 277.730 159.561 M227.832 160.515 L 224.236 165.561 228.254 169.597 C 232.679 174.043,235.332 177.931,237.377 182.970 C 238.129 184.824,238.878 186.115,239.186 186.090 C 240.376 185.992,250.781 182.330,250.781 182.009 C 250.781 180.358,247.166 172.945,244.192 168.499 C 240.947 163.648,233.111 155.469,231.709 155.469 C 231.554 155.469,229.809 157.739,227.832 160.515 M193.324 161.154 C 188.312 162.061,181.891 164.677,179.221 166.898 L 178.169 167.773 180.708 171.289 C 184.347 176.329,183.780 176.070,187.177 174.238 C 190.528 172.430,195.258 171.094,198.305 171.094 L 200.391 171.094 200.391 165.820 L 200.391 160.547 198.340 160.582 C 197.212 160.601,194.955 160.859,193.324 161.154 M219.507 172.173 L 216.556 176.295 219.129 178.870 C 221.810 181.552,224.061 184.887,225.220 187.891 C 226.204 190.438,226.039 190.413,231.219 188.813 C 236.747 187.105,236.540 187.601,233.994 182.159 C 231.686 177.226,227.057 171.348,223.436 168.753 L 222.458 168.052 219.507 172.173 M119.171 174.902 C 117.609 180.156,115.774 190.907,116.346 191.458 C 116.486 191.593,119.256 193.637,122.501 196.000 L 128.399 200.297 128.639 195.363 C 128.898 190.022,129.987 183.020,131.216 178.788 C 131.786 176.824,131.866 176.085,131.521 175.957 C 129.819 175.321,120.485 172.266,120.248 172.266 C 120.087 172.266,119.602 173.452,119.171 174.902 M193.750 174.456 C 191.157 175.153,188.034 176.560,186.765 177.605 L 185.835 178.372 192.917 188.189 C 196.813 193.588,200.000 198.091,200.000 198.196 C 200.000 198.300,198.198 197.777,195.996 197.033 C 193.794 196.289,188.523 194.562,184.284 193.197 L 176.575 190.713 176.181 192.134 C 175.191 195.701,175.556 204.983,176.731 206.158 C 176.790 206.217,181.978 204.579,188.261 202.519 C 194.544 200.459,199.749 198.838,199.827 198.916 C 199.905 198.994,196.900 203.314,193.148 208.515 C 189.397 213.717,186.328 218.146,186.328 218.356 C 186.328 219.565,195.217 222.656,198.695 222.656 L 200.391 222.656 200.391 198.242 L 200.391 173.828 198.145 173.854 C 196.909 173.868,194.932 174.139,193.750 174.456 M133.472 181.135 C 131.930 187.435,131.527 190.626,131.484 196.853 L 131.445 202.495 138.477 207.642 C 142.344 210.473,145.567 212.738,145.640 212.675 C 145.713 212.612,145.471 211.185,145.101 209.503 C 143.624 202.772,143.913 191.513,145.752 184.222 C 146.689 180.506,147.073 180.905,140.625 178.887 C 137.725 177.979,135.161 177.165,134.927 177.078 C 134.674 176.983,134.088 178.614,133.472 181.135 M207.678 188.710 C 203.845 194.091,200.780 198.566,200.868 198.654 C 201.229 199.015,223.438 191.318,223.438 190.832 C 223.438 188.617,216.567 178.877,215.032 178.916 C 214.821 178.921,211.512 183.329,207.678 188.710 M148.666 183.732 C 146.179 192.287,146.622 211.975,149.373 215.118 C 149.445 215.201,161.431 211.356,161.586 211.200 C 161.635 211.151,161.313 209.798,160.871 208.192 C 159.608 203.607,159.449 195.128,160.527 189.893 C 160.987 187.665,161.311 185.800,161.248 185.749 C 161.184 185.698,158.460 184.768,155.193 183.684 L 149.254 181.711 148.666 183.732 M163.690 188.184 C 161.868 194.698,162.522 210.156,164.619 210.156 C 164.982 210.156,171.422 208.095,173.701 207.249 C 174.047 207.120,174.025 206.564,173.612 205.004 C 172.729 201.663,172.520 197.732,173.056 194.530 C 173.915 189.404,174.243 189.934,169.154 188.224 C 163.733 186.402,164.187 186.406,163.690 188.184 M201.172 199.394 C 201.172 199.576,212.223 215.160,214.308 217.918 C 214.940 218.755,220.565 212.130,222.171 208.657 C 223.395 206.012,224.151 206.467,212.305 202.719 C 206.719 200.952,201.929 199.423,201.660 199.321 C 201.392 199.219,201.172 199.252,201.172 199.394 M224.300 210.254 C 222.555 213.751,220.277 216.718,217.693 218.860 L 216.051 220.221 218.994 224.369 C 220.613 226.649,222.085 228.516,222.265 228.516 C 224.733 228.516,236.236 212.810,235.464 210.494 C 235.374 210.224,226.892 207.143,225.943 207.035 C 225.924 207.033,225.185 208.481,224.300 210.254 M236.907 214.350 C 234.194 220.374,229.607 226.430,225.438 229.492 C 223.510 230.908,223.373 230.492,227.744 236.515 L 231.307 241.426 232.939 240.161 C 240.313 234.442,250.391 220.074,250.391 215.278 C 250.391 215.052,247.798 214.047,244.629 213.046 C 241.460 212.045,238.768 211.170,238.646 211.103 C 238.524 211.035,237.741 212.496,236.907 214.350 M250.819 221.672 C 247.533 228.861,242.282 235.783,236.318 240.787 L 232.893 243.660 236.604 248.797 L 240.314 253.935 242.130 252.471 C 248.099 247.657,252.492 243.038,256.306 237.564 L 258.119 234.961 255.329 226.436 L 252.539 217.911 250.819 221.672 M183.906 221.397 C 180.718 225.152,178.416 229.039,179.088 229.531 C 182.590 232.091,190.146 234.876,195.369 235.531 C 200.938 236.229,200.391 236.753,200.391 230.721 L 200.391 225.505 197.540 225.264 C 193.957 224.961,189.955 223.755,186.868 222.046 C 184.631 220.807,184.442 220.766,183.906 221.397 M172.954 236.510 L 169.179 241.751 171.607 243.284 C 178.987 247.945,187.600 250.725,196.777 251.406 L 200.391 251.675 200.391 245.219 L 200.391 238.764 197.363 238.488 C 190.078 237.825,183.225 235.511,177.525 231.789 C 176.778 231.301,176.497 231.590,172.954 236.510 M258.425 239.284 C 255.926 243.143,248.422 251.057,244.087 254.407 L 241.885 256.109 245.586 261.254 L 249.287 266.400 251.694 264.564 C 255.066 261.992,263.673 253.513,263.668 252.767 C 263.666 252.427,262.653 248.996,261.416 245.144 L 259.168 238.139 258.425 239.284 M163.793 249.207 L 160.204 254.252 163.367 256.281 C 169.297 260.085,181.549 265.179,183.747 264.755 C 184.200 264.667,187.667 262.322,191.451 259.544 L 198.332 254.492 196.529 254.221 C 195.538 254.071,192.909 253.678,190.688 253.346 C 184.036 252.353,174.821 248.817,169.696 245.292 C 167.467 243.758,167.850 243.504,163.793 249.207 M261.514 259.407 C 259.801 261.144,256.711 263.931,254.648 265.600 L 250.897 268.636 267.123 291.146 C 276.047 303.527,283.398 313.607,283.458 313.547 C 283.630 313.376,265.063 256.254,264.835 256.252 C 264.722 256.251,263.228 257.671,261.514 259.407 M156.250 259.670 C 155.068 261.325,153.444 263.591,152.639 264.705 L 151.177 266.730 154.006 268.603 C 157.004 270.587,164.317 274.498,167.078 275.593 L 168.726 276.247 174.782 271.815 C 178.112 269.377,180.837 267.295,180.837 267.188 C 180.838 267.080,179.002 266.402,176.757 265.681 C 172.270 264.240,165.240 260.857,161.398 258.290 C 158.328 256.239,158.786 256.116,156.250 259.670 M135.156 288.944 C 118.180 312.508,116.853 314.389,117.594 313.821 C 117.907 313.580,128.887 305.514,141.992 295.895 C 155.098 286.276,165.866 278.370,165.922 278.326 C 165.978 278.283,163.869 277.170,161.235 275.853 C 158.600 274.537,154.967 272.488,153.161 271.300 C 151.354 270.112,149.772 269.143,149.645 269.147 C 149.518 269.150,142.998 278.059,135.156 288.944 \" stroke=\"none\" fill=\"#fada06\" fill-rule=\"evenodd\"></path><path id=\"path2\" d=\"M200.298 83.340 L 200.401 111.211 205.121 111.478 C 207.718 111.625,211.874 112.092,214.357 112.517 C 216.841 112.942,218.924 113.237,218.987 113.174 C 219.172 112.989,200.661 55.469,200.417 55.469 C 200.295 55.469,200.242 68.011,200.298 83.340 M200.391 120.313 C 200.391 126.004,200.452 126.563,201.074 126.563 C 205.975 126.565,215.991 128.270,221.488 130.038 L 224.881 131.129 222.791 124.647 C 221.641 121.081,220.598 117.785,220.473 117.321 C 220.144 116.101,208.387 114.087,201.465 114.066 L 200.391 114.063 200.391 120.313 M200.391 135.879 L 200.391 142.188 202.696 142.188 C 210.390 142.188,222.239 145.884,229.756 150.629 C 230.578 151.148,231.249 151.438,231.249 151.274 C 231.247 150.886,226.203 135.133,225.949 134.720 C 225.112 133.366,211.135 130.112,204.785 129.793 L 200.391 129.571 200.391 135.879 M200.391 151.256 L 200.391 157.697 203.613 157.948 C 209.404 158.400,216.349 160.701,221.169 163.765 C 222.309 164.490,223.451 165.209,223.706 165.362 C 224.006 165.543,225.481 163.809,227.873 160.463 L 231.576 155.285 229.753 153.977 C 223.370 149.398,212.957 145.831,203.809 145.091 L 200.391 144.814 200.391 151.256 M65.234 154.151 C 65.234 154.355,65.542 154.547,65.918 154.579 C 66.294 154.612,77.882 158.340,91.670 162.866 C 105.457 167.391,116.883 171.092,117.060 171.090 C 117.238 171.088,117.985 169.462,118.721 167.477 C 119.457 165.491,121.145 161.714,122.473 159.082 L 124.888 154.297 105.901 154.296 C 95.458 154.296,82.036 154.180,76.074 154.038 C 69.323 153.878,65.234 153.920,65.234 154.151 M126.183 158.025 C 123.426 163.002,119.765 172.016,120.414 172.231 C 120.680 172.319,123.381 173.222,126.415 174.237 L 131.931 176.083 133.193 172.709 C 134.787 168.448,138.046 162.208,140.713 158.311 C 141.846 156.655,142.914 155.075,143.086 154.799 C 143.336 154.397,141.894 154.297,135.823 154.297 L 128.248 154.297 126.183 158.025 M144.922 157.216 C 140.675 162.979,135.420 173.083,135.065 176.171 C 134.975 176.951,141.703 179.653,146.716 180.851 C 146.735 180.856,146.972 180.112,147.242 179.199 C 149.072 173.005,154.375 164.727,160.380 158.691 L 164.752 154.297 155.911 154.299 L 147.070 154.300 144.922 157.216 M308.984 163.011 C 294.697 167.767,282.981 171.663,282.949 171.669 C 282.917 171.675,283.482 174.025,284.204 176.891 C 284.926 179.758,285.744 183.925,286.021 186.153 L 286.525 190.203 309.395 173.519 C 337.389 153.098,335.778 154.290,335.331 154.331 C 335.127 154.349,323.271 158.256,308.984 163.011 M165.966 157.242 C 158.991 163.029,152.076 172.864,149.975 179.983 C 149.376 182.014,148.703 181.556,155.714 183.884 L 161.622 185.846 162.106 184.232 C 163.532 179.465,167.537 173.518,172.544 168.731 C 176.223 165.214,176.236 165.195,175.602 164.228 C 175.252 163.694,173.599 161.357,171.929 159.035 L 168.892 154.814 165.966 157.242 M200.391 165.562 L 200.391 170.668 201.855 170.896 C 208.261 171.894,210.410 172.588,214.191 174.884 C 215.444 175.644,216.608 176.113,216.778 175.926 C 217.571 175.055,222.266 168.331,222.266 168.066 C 222.266 166.116,210.021 161.444,203.027 160.726 L 200.391 160.456 200.391 165.562 M174.496 170.693 C 170.065 174.887,166.854 179.569,164.923 184.652 L 164.187 186.590 168.714 188.076 C 171.205 188.893,173.420 189.628,173.637 189.708 C 173.854 189.789,174.341 188.982,174.720 187.915 C 175.731 185.070,178.990 180.422,181.682 177.985 L 184.035 175.856 181.054 171.717 C 177.510 166.797,178.456 166.945,174.496 170.693 M274.148 174.544 C 267.630 176.768,268.156 176.100,269.295 180.707 C 270.672 186.277,271.160 189.698,271.436 195.727 L 271.680 201.056 277.734 196.617 L 283.789 192.177 283.670 190.327 C 283.352 185.377,280.678 173.016,279.883 172.818 C 279.668 172.765,277.087 173.542,274.148 174.544 M200.391 198.242 L 200.391 222.656 201.465 222.649 C 204.884 222.628,213.385 219.561,213.925 218.155 C 214.045 217.843,211.350 213.753,207.616 208.581 C 204.032 203.615,201.167 199.485,201.249 199.402 C 201.332 199.319,206.282 200.808,212.249 202.710 L 223.098 206.168 223.434 205.282 C 224.641 202.108,224.693 192.896,223.511 191.714 C 223.345 191.548,218.219 193.078,212.119 195.114 C 206.020 197.150,200.956 198.743,200.867 198.653 C 200.778 198.564,203.801 194.162,207.586 188.872 C 211.371 183.582,214.508 179.062,214.558 178.828 C 214.836 177.518,205.405 173.828,201.778 173.828 L 200.391 173.828 200.391 198.242 M259.466 179.449 C 254.718 181.027,253.551 181.552,253.745 182.024 C 256.352 188.366,256.643 206.134,254.243 212.447 C 253.604 214.128,254.151 213.831,261.255 208.647 C 267.227 204.289,268.294 203.356,268.504 202.306 C 269.336 198.142,267.920 185.321,265.937 179.065 L 265.430 177.466 259.466 179.449 M183.304 180.370 C 180.031 183.471,176.067 189.995,176.988 190.764 C 177.302 191.026,200.000 198.332,200.000 198.170 C 200.000 198.055,186.655 179.370,185.752 178.222 C 185.710 178.167,184.608 179.134,183.304 180.370 M244.575 184.395 C 237.895 186.666,238.620 186.079,239.294 188.672 C 240.729 194.199,240.651 202.769,239.115 208.310 C 238.712 209.764,238.491 211.015,238.624 211.090 C 239.215 211.421,250.485 214.879,250.600 214.764 C 250.898 214.466,252.363 208.182,252.721 205.664 C 253.767 198.304,252.348 183.024,250.577 182.581 C 250.367 182.528,247.666 183.345,244.575 184.395 M230.664 188.936 C 228.301 189.693,226.342 190.339,226.311 190.371 C 226.280 190.403,226.517 191.660,226.838 193.164 C 227.515 196.345,227.312 202.251,226.424 205.168 L 225.862 207.016 230.595 208.556 C 233.197 209.404,235.445 210.024,235.589 209.935 C 237.859 208.532,237.797 187.905,235.521 187.628 C 235.213 187.591,233.027 188.179,230.664 188.936 M188.103 202.528 C 182.097 204.519,177.135 206.303,177.076 206.492 C 176.585 208.081,185.244 219.360,186.126 218.279 C 186.432 217.906,199.541 199.646,199.769 199.277 C 200.220 198.547,199.536 198.738,188.103 202.528 M169.239 208.747 C 163.748 210.561,163.990 210.018,166.455 215.001 C 168.944 220.029,174.681 226.880,177.806 228.554 C 178.380 228.861,184.850 220.891,184.304 220.548 C 181.204 218.603,177.533 214.246,175.445 210.034 L 174.023 207.167 169.239 208.747 M155.469 213.231 C 148.792 215.424,149.032 214.897,151.934 220.971 C 155.375 228.174,160.982 235.301,166.734 239.782 C 169.417 241.871,168.922 242.120,172.813 236.727 C 176.981 230.952,176.874 231.294,174.955 229.883 C 170.548 226.641,165.449 220.054,163.015 214.457 C 161.462 210.885,162.232 211.010,155.469 213.231 M145.322 226.172 C 143.975 230.361,142.730 234.168,142.554 234.631 C 141.772 236.694,157.478 253.906,160.143 253.906 C 160.443 253.906,167.089 244.868,167.293 244.182 C 167.342 244.016,166.025 242.786,164.366 241.448 C 157.775 236.134,150.080 225.671,147.960 219.141 C 147.855 218.818,146.668 221.982,145.322 226.172 M215.039 220.958 C 212.490 222.982,205.475 225.373,202.051 225.385 L 200.391 225.391 200.391 230.619 L 200.391 235.848 203.027 235.647 C 208.645 235.221,217.437 232.147,221.059 229.342 L 222.001 228.613 219.106 224.477 C 215.905 219.906,216.125 220.096,215.039 220.958 M222.266 231.914 C 217.976 234.998,209.637 237.905,203.418 238.482 L 200.391 238.764 200.391 245.187 L 200.391 251.610 203.223 251.361 C 212.892 250.513,221.472 247.703,228.845 242.970 L 231.323 241.380 230.374 240.124 C 229.852 239.433,228.231 237.197,226.772 235.156 C 225.313 233.115,224.010 231.329,223.876 231.188 C 223.742 231.046,223.018 231.373,222.266 231.914 M138.937 245.837 C 137.717 249.564,136.719 252.875,136.719 253.196 C 136.719 254.470,150.212 266.669,151.232 266.318 C 151.402 266.259,153.116 264.038,155.040 261.383 L 158.538 256.555 155.538 254.181 C 151.633 251.089,146.846 246.243,143.751 242.250 C 142.392 240.497,141.252 239.063,141.217 239.063 C 141.183 239.063,140.157 242.111,138.937 245.837 M230.664 245.149 C 224.129 249.686,215.078 252.814,204.501 254.189 L 202.167 254.492 209.189 259.668 C 217.134 265.524,215.983 265.208,222.070 263.200 C 226.439 261.760,233.206 258.493,237.228 255.884 L 240.277 253.906 238.791 251.835 C 237.973 250.697,236.338 248.414,235.156 246.764 C 233.975 245.113,232.920 243.770,232.813 243.778 C 232.705 243.786,231.738 244.403,230.664 245.149 M239.063 258.048 C 235.631 260.413,227.139 264.550,222.952 265.895 C 221.074 266.498,219.546 267.080,219.557 267.188 C 219.568 267.295,222.307 269.372,225.644 271.803 L 231.709 276.223 236.851 273.676 C 239.679 272.276,243.630 270.066,245.631 268.766 L 249.269 266.402 248.373 265.135 C 241.293 255.126,242.248 255.853,239.063 258.048 M135.427 256.915 C 134.905 257.774,116.784 314.180,116.971 314.366 C 117.090 314.486,117.188 314.378,117.188 314.128 C 117.188 313.877,117.407 313.716,117.676 313.770 C 117.944 313.823,118.116 313.636,118.058 313.353 C 117.999 313.071,124.943 303.152,133.488 291.311 C 142.032 279.471,149.144 269.587,149.291 269.346 C 149.451 269.086,148.500 268.125,146.948 266.977 C 145.511 265.915,142.374 263.146,139.976 260.824 C 137.578 258.502,135.531 256.743,135.427 256.915 M247.070 271.148 C 245.137 272.429,241.487 274.518,238.959 275.789 L 234.364 278.102 237.983 280.806 C 252.802 291.879,283.758 314.419,283.922 314.256 C 284.032 314.145,283.846 313.837,283.508 313.570 C 283.170 313.304,275.745 303.154,267.009 291.016 C 258.272 278.877,251.003 268.917,250.855 268.883 C 250.707 268.848,249.004 269.868,247.070 271.148 \" stroke=\"none\" fill=\"#daa126\" fill-rule=\"evenodd\"></path><path id=\"path3\" d=\"M194.531 12.748 C 194.531 12.885,194.950 13.385,195.462 13.859 C 196.374 14.705,196.399 14.906,196.680 23.901 C 196.983 33.607,196.895 34.583,195.683 34.967 C 193.949 35.518,195.140 35.938,198.438 35.938 C 202.253 35.938,202.404 35.859,201.041 34.596 C 200.187 33.805,200.112 33.366,199.869 27.751 C 199.340 15.536,199.548 13.281,201.200 13.281 C 201.399 13.281,201.563 13.105,201.563 12.891 C 201.563 12.659,200.130 12.500,198.047 12.500 C 196.113 12.500,194.531 12.612,194.531 12.748 M204.944 13.067 C 204.320 14.693,204.654 18.359,205.426 18.359 C 205.883 18.359,206.256 17.997,206.403 17.413 C 207.057 14.807,210.780 12.993,212.318 14.531 C 212.558 14.771,211.057 33.250,210.730 34.085 C 210.582 34.463,210.041 34.878,209.527 35.007 C 207.259 35.576,208.755 36.116,213.574 36.467 C 216.205 36.658,216.957 36.314,215.428 35.617 C 214.021 34.976,213.981 34.260,214.794 24.099 C 215.651 13.387,215.312 14.459,217.728 14.832 C 219.756 15.145,220.191 15.570,220.932 17.966 C 221.682 20.390,223.046 20.096,223.052 17.508 C 223.055 16.365,223.156 15.063,223.276 14.615 C 223.488 13.828,223.286 13.785,217.314 13.336 C 213.914 13.081,209.798 12.765,208.167 12.635 C 205.593 12.429,205.167 12.486,204.944 13.067 M183.080 13.288 C 176.293 15.325,177.133 22.144,184.598 25.609 C 188.836 27.576,189.844 28.653,189.844 31.216 C 189.844 36.062,182.974 37.151,181.236 32.580 C 180.448 30.508,179.158 31.377,179.442 33.789 C 179.581 34.971,179.593 35.938,179.470 35.937 C 178.744 35.937,177.526 34.819,175.233 32.048 C 173.810 30.328,172.100 28.638,171.432 28.293 L 170.218 27.665 171.681 26.460 C 177.102 21.991,174.010 15.211,166.797 15.748 C 160.449 16.220,155.610 17.527,157.993 18.126 C 159.197 18.428,159.371 19.030,161.136 28.989 C 162.745 38.069,162.742 38.025,161.650 39.043 C 160.405 40.203,160.805 40.277,164.571 39.586 C 167.464 39.054,169.166 38.281,167.443 38.281 C 166.370 38.281,165.657 36.810,165.007 33.258 C 164.261 29.180,164.359 28.923,166.667 28.912 C 168.643 28.903,168.966 29.162,172.316 33.439 C 175.618 37.657,175.750 37.737,178.320 37.085 C 179.180 36.868,181.420 36.703,183.299 36.720 C 189.372 36.773,192.228 35.215,192.778 31.549 C 193.342 27.789,191.644 25.591,186.267 23.122 C 182.483 21.384,181.534 20.346,181.534 17.948 C 181.534 14.071,186.839 12.789,189.030 16.136 C 190.423 18.263,191.406 18.084,191.406 15.703 C 191.406 14.672,191.195 13.617,190.938 13.359 C 190.398 12.820,184.808 12.769,183.080 13.288 M225.000 14.204 C 225.000 14.317,225.358 15.015,225.795 15.756 C 226.232 16.497,227.465 19.715,228.534 22.907 L 230.479 28.711 229.862 32.031 C 229.170 35.753,228.487 37.109,227.302 37.109 C 225.198 37.109,227.195 38.122,230.399 38.680 C 233.996 39.306,234.945 39.069,233.203 37.981 C 231.607 36.984,232.670 30.306,234.846 27.659 C 238.839 22.802,241.785 19.627,243.082 18.782 C 244.855 17.627,244.851 17.623,241.378 16.961 C 238.586 16.429,237.193 16.571,238.426 17.261 C 239.961 18.120,239.145 19.913,235.028 24.728 C 232.742 27.402,232.854 27.474,231.274 22.328 C 229.890 17.823,229.870 16.779,231.152 16.216 C 232.514 15.618,232.227 15.373,229.590 14.880 C 228.247 14.629,226.665 14.328,226.074 14.212 C 225.483 14.096,225.000 14.092,225.000 14.204 M168.926 17.797 C 170.799 19.024,171.630 22.830,170.501 25.013 C 169.340 27.258,164.297 28.703,163.894 26.906 C 163.677 25.939,162.508 19.365,162.379 18.385 C 162.224 17.216,167.338 16.756,168.926 17.797 M144.435 20.843 C 137.369 22.890,136.765 23.168,138.465 23.595 C 139.779 23.925,139.852 24.102,142.549 33.493 C 145.132 42.486,145.238 43.144,144.273 44.210 C 143.184 45.413,143.704 45.335,151.332 43.148 C 160.068 40.644,159.059 41.383,158.323 38.031 C 157.561 34.559,156.502 34.339,156.119 37.574 C 155.991 38.653,155.683 39.781,155.435 40.080 C 154.870 40.761,148.756 42.670,148.393 42.279 C 148.009 41.866,145.605 33.171,145.816 32.960 C 145.914 32.862,147.008 32.494,148.249 32.141 L 150.505 31.499 151.437 32.583 C 152.625 33.965,153.722 33.701,153.337 32.125 C 152.300 27.882,151.922 27.034,151.156 27.235 C 150.629 27.373,150.391 27.771,150.391 28.513 C 150.391 29.939,145.803 32.410,145.173 31.324 C 144.873 30.805,142.969 23.870,142.969 23.294 C 142.969 22.697,146.108 21.581,148.849 21.203 C 150.066 21.035,150.390 21.185,151.469 22.414 C 153.611 24.854,154.507 23.363,153.109 19.685 C 152.648 18.472,152.597 18.479,144.435 20.843 M256.836 24.179 C 250.471 27.846,247.959 39.492,252.602 43.803 C 259.165 49.896,267.518 45.485,269.758 34.742 C 271.516 26.309,263.919 20.099,256.836 24.179 M130.469 25.667 C 128.857 26.429,127.715 27.102,127.930 27.164 C 128.145 27.225,128.774 27.374,129.328 27.496 C 129.918 27.624,130.537 28.159,130.822 28.785 C 131.241 29.703,132.951 45.695,132.662 45.984 C 132.535 46.111,123.121 35.016,122.171 33.619 C 121.334 32.389,121.292 31.115,122.066 30.472 C 123.514 29.270,121.959 29.499,118.765 30.958 C 115.116 32.625,114.844 32.949,116.775 33.335 C 117.685 33.517,119.531 35.390,125.200 41.882 C 135.438 53.607,135.048 53.773,133.967 38.142 C 133.265 27.985,133.247 26.751,133.781 25.679 C 134.736 23.765,134.497 23.764,130.469 25.667 M264.484 25.276 C 269.893 28.471,264.885 44.922,258.504 44.922 C 253.722 44.922,252.118 40.222,254.437 33.008 C 256.703 25.959,260.584 22.972,264.484 25.276 M277.344 29.506 C 277.344 29.621,277.618 30.134,277.954 30.646 C 278.958 32.178,270.340 48.964,268.457 49.146 C 266.507 49.334,266.909 49.851,270.353 51.583 C 273.553 53.192,274.490 53.331,273.305 52.022 C 272.374 50.994,272.453 50.616,274.481 46.387 C 276.538 42.096,276.313 42.241,278.897 43.550 C 280.693 44.460,280.822 44.626,280.934 46.183 C 281.129 48.874,282.017 48.519,283.724 45.070 C 284.883 42.727,285.095 41.999,284.694 41.744 C 283.955 41.276,283.795 41.317,283.008 42.188 C 282.044 43.252,279.188 42.749,277.417 41.204 C 277.314 41.114,281.132 33.239,281.451 32.885 C 281.623 32.693,286.442 35.172,287.207 35.847 C 287.677 36.261,287.891 37.027,287.891 38.300 C 287.891 39.892,288.694 41.198,289.267 40.537 C 289.580 40.175,291.436 36.231,291.335 36.144 C 290.342 35.290,277.344 29.123,277.344 29.506 M109.766 35.585 C 106.863 37.330,106.468 37.891,108.144 37.891 C 109.585 37.891,109.573 37.875,114.978 47.298 C 119.375 54.966,119.409 55.049,118.667 56.238 C 117.827 57.583,118.565 57.465,121.610 55.766 C 124.856 53.955,125.217 53.516,123.464 53.516 C 122.068 53.516,122.087 53.542,116.669 44.109 C 112.703 37.204,112.003 35.509,112.891 34.961 C 113.443 34.620,113.376 33.977,112.793 34.022 C 112.524 34.042,111.162 34.746,109.766 35.585 M101.897 40.192 C 99.471 41.743,99.096 42.373,100.583 42.401 C 101.120 42.411,101.713 42.587,101.901 42.792 C 102.590 43.543,110.553 55.925,110.262 55.792 C 110.096 55.716,105.901 53.604,100.939 51.098 L 91.916 46.541 89.673 48.030 C 87.913 49.199,86.975 50.854,88.664 49.810 C 89.534 49.272,90.724 50.707,95.198 57.694 C 101.199 67.066,100.980 66.630,100.243 67.755 C 99.273 69.236,99.915 69.166,102.570 67.501 C 105.410 65.720,105.614 65.336,103.809 65.161 C 102.728 65.057,92.502 51.105,93.088 50.534 C 93.130 50.493,97.749 52.760,103.352 55.571 C 117.393 62.616,117.278 62.707,109.566 50.666 C 104.153 42.214,103.364 40.543,104.331 39.575 C 105.369 38.537,103.905 38.908,101.897 40.192 M299.332 44.460 C 297.828 46.594,297.774 46.761,298.456 47.187 C 298.925 47.480,299.268 47.503,299.422 47.252 C 300.535 45.451,303.387 45.144,305.375 46.611 L 306.595 47.510 301.903 54.126 C 295.134 63.671,295.133 63.672,293.536 63.672 C 291.639 63.672,291.831 63.983,295.177 66.331 C 298.222 68.468,298.930 68.643,298.075 67.046 C 297.415 65.812,297.811 65.104,304.074 56.336 L 309.124 49.265 310.242 50.061 C 312.236 51.481,312.657 52.481,312.134 54.556 C 311.323 57.778,312.366 58.008,314.432 55.063 C 315.357 53.744,315.957 52.529,315.770 52.352 C 314.974 51.604,301.510 42.188,301.236 42.188 C 301.071 42.188,300.214 43.210,299.332 44.460 M184.527 43.176 C 57.096 55.818,-2.811 208.311,81.945 304.297 C 162.082 395.052,311.177 364.678,349.424 249.805 C 385.392 141.776,297.743 31.944,184.527 43.176 M81.496 54.676 C 79.013 56.849,78.827 57.280,80.446 57.109 C 82.377 56.906,92.964 69.490,92.967 71.992 C 92.972 75.469,89.011 77.957,85.972 76.385 C 83.271 74.988,74.060 63.464,74.439 61.955 C 74.799 60.518,74.484 60.653,71.664 63.144 C 69.009 65.489,68.810 65.986,70.634 65.719 C 71.680 65.565,72.197 66.038,77.109 71.641 C 84.717 80.320,86.516 80.984,91.719 77.029 C 97.441 72.679,96.405 69.643,84.677 56.398 C 83.883 55.502,83.712 54.498,84.169 53.418 C 84.663 52.252,83.805 52.656,81.496 54.676 M209.740 83.887 C 220.433 117.276,218.699 113.231,222.778 114.314 C 242.601 119.576,260.243 132.302,272.247 150.000 L 275.029 154.102 305.260 154.297 L 335.492 154.492 311.109 172.266 L 286.726 190.039 286.715 197.656 C 286.683 218.800,280.416 236.870,267.612 252.734 C 266.312 254.346,265.247 255.840,265.247 256.055 C 265.246 256.270,269.462 269.439,274.614 285.320 C 279.766 301.202,283.923 314.254,283.851 314.326 C 283.779 314.398,272.603 306.280,259.015 296.287 L 234.309 278.117 230.686 279.474 C 211.519 286.653,190.648 286.911,171.377 280.207 C 168.609 279.244,166.138 278.539,165.887 278.639 C 165.635 278.740,154.532 286.841,141.212 296.641 C 127.892 306.441,116.955 314.326,116.907 314.163 C 116.859 314.000,121.019 300.959,126.152 285.183 L 135.483 256.499 133.213 253.738 C 119.899 237.550,113.877 220.981,113.329 199.037 L 113.086 189.286 89.177 171.889 C 76.027 162.321,65.261 154.379,65.251 154.240 C 65.242 154.101,78.642 154.084,95.029 154.201 L 124.824 154.415 126.963 151.150 C 139.022 132.744,156.779 119.819,177.787 114.156 L 181.754 113.086 190.971 84.277 C 196.040 68.433,200.289 55.469,200.414 55.469 C 200.538 55.469,204.735 68.257,209.740 83.887 M319.723 56.626 C 320.170 58.657,306.942 72.364,304.910 71.976 C 303.456 71.698,303.649 72.034,306.479 74.706 C 308.771 76.870,309.787 77.281,308.943 75.704 C 308.437 74.758,308.800 74.191,312.371 70.350 C 315.534 66.947,315.233 66.912,319.412 71.164 L 322.223 74.023 318.945 77.494 C 315.957 80.658,315.565 80.945,314.520 80.736 C 312.701 80.372,312.833 80.739,315.415 83.218 C 318.169 85.863,318.524 86.014,318.167 84.390 C 317.716 82.334,330.940 68.664,333.027 69.031 C 334.108 69.221,334.024 69.074,331.671 66.667 C 329.312 64.254,328.024 63.586,328.905 65.232 C 329.464 66.276,329.556 66.107,326.541 69.529 C 323.175 73.349,323.528 73.354,319.630 69.434 L 316.426 66.211 319.308 63.127 C 321.975 60.273,322.280 60.062,323.400 60.285 C 325.083 60.622,324.936 60.260,322.352 57.703 C 319.787 55.164,319.364 54.991,319.723 56.626 M336.842 73.085 C 336.960 73.535,336.957 74.162,336.835 74.478 C 336.414 75.577,322.189 87.572,321.530 87.384 C 321.183 87.285,320.723 87.139,320.508 87.059 C 319.252 86.592,320.430 88.334,324.828 93.446 L 329.775 99.197 332.109 97.401 C 334.980 95.192,334.753 94.019,331.666 95.108 C 329.181 95.985,329.002 95.921,326.517 93.262 C 323.625 90.168,323.569 90.446,327.832 86.756 L 331.445 83.628 332.894 85.271 C 334.364 86.939,334.683 88.148,333.993 89.438 C 332.998 91.296,334.625 91.070,337.060 89.011 C 339.749 86.736,339.780 85.863,337.161 86.215 C 335.799 86.397,335.565 86.279,334.246 84.738 C 332.416 82.599,332.296 82.949,335.974 79.703 C 339.601 76.502,339.180 76.540,341.521 79.193 C 344.203 82.232,344.305 82.523,343.407 84.553 C 342.239 87.193,343.134 87.708,345.507 85.763 C 347.752 83.924,348.036 84.616,342.326 77.994 C 337.503 72.401,336.406 71.419,336.842 73.085 M57.724 77.655 C 52.467 83.037,52.508 88.150,57.849 93.412 C 63.675 99.150,70.149 99.970,73.734 95.425 C 77.696 90.403,77.940 89.335,75.542 87.528 C 73.370 85.890,72.085 86.782,73.645 88.844 C 75.011 90.650,73.765 94.368,71.476 95.316 C 66.431 97.406,55.855 89.582,55.861 83.763 C 55.864 80.519,58.432 78.389,61.390 79.179 C 64.485 80.005,63.792 77.734,60.321 75.677 C 60.089 75.540,58.921 76.430,57.724 77.655 M47.016 91.699 C 46.427 92.505,45.521 93.747,45.003 94.459 C 43.959 95.896,44.053 96.377,45.253 95.735 C 46.475 95.081,46.365 95.023,53.759 100.233 C 62.043 106.069,63.006 106.908,62.722 108.041 C 62.285 109.781,63.089 109.265,65.062 106.540 C 67.285 103.468,67.389 102.969,65.670 103.618 C 64.623 104.013,64.260 103.841,60.301 101.058 C 48.761 92.950,48.628 92.839,48.690 91.484 C 48.766 89.850,48.326 89.906,47.016 91.699 M354.688 96.074 C 354.688 97.463,354.544 97.575,345.291 103.455 C 338.417 107.823,337.638 108.185,336.831 107.378 C 335.377 105.924,335.755 107.641,337.467 110.262 C 339.645 113.599,340.048 113.877,340.043 112.035 C 340.039 110.720,341.829 109.036,345.313 107.078 L 346.805 106.239 347.682 107.710 C 350.541 112.497,354.326 114.087,358.182 112.120 C 362.799 109.765,362.748 106.543,357.976 99.073 C 355.160 94.667,354.688 94.236,354.688 96.074 M40.114 101.956 C 39.010 103.983,38.777 104.688,39.212 104.688 C 39.534 104.688,39.906 104.512,40.039 104.297 C 40.527 103.508,41.691 103.984,48.409 107.715 L 55.267 111.523 44.799 111.719 L 34.332 111.914 33.098 114.142 C 31.786 116.511,31.830 117.256,33.225 116.278 C 34.333 115.502,34.323 115.498,42.969 120.499 C 51.111 125.209,51.563 125.541,51.563 126.818 C 51.563 128.281,52.074 127.903,53.601 125.314 C 55.136 122.711,55.183 121.923,53.746 122.865 C 52.653 123.581,52.410 123.496,47.656 120.748 C 45.615 119.568,42.363 117.760,40.430 116.731 C 38.496 115.701,37.090 114.828,37.305 114.790 C 38.054 114.658,40.496 114.609,50.230 114.532 L 60.031 114.453 60.471 113.486 C 60.967 112.398,61.865 113.019,50.000 106.248 C 42.422 101.923,42.188 101.747,42.188 100.364 C 42.188 98.624,41.742 98.966,40.114 101.956 M358.192 102.051 C 361.895 108.508,353.727 113.532,349.216 107.571 C 347.638 105.486,347.580 105.587,352.058 102.671 C 356.918 99.508,356.743 99.525,358.192 102.051 M365.625 113.787 C 365.625 115.144,365.409 115.274,356.367 119.363 C 348.022 123.137,346.929 123.467,346.097 122.465 C 344.946 121.079,345.098 122.509,346.408 125.393 C 347.966 128.822,348.230 129.065,348.567 127.380 C 348.755 126.438,349.246 126.030,351.448 124.986 C 355.107 123.249,357.513 122.226,357.634 122.353 C 357.880 122.616,361.328 130.509,361.328 130.812 C 361.328 131.207,353.507 134.766,352.638 134.766 C 352.314 134.766,351.824 134.495,351.549 134.163 C 350.359 132.730,350.479 134.457,351.762 137.234 C 353.165 140.270,353.906 140.990,353.906 139.318 C 353.906 137.943,354.601 137.518,363.172 133.646 C 371.028 130.097,372.470 129.658,373.353 130.540 C 374.395 131.583,374.247 130.320,373.002 127.552 C 371.691 124.636,371.094 123.940,371.094 125.330 C 371.094 126.390,370.115 127.111,366.284 128.873 L 362.845 130.454 362.317 129.192 C 362.026 128.498,361.156 126.540,360.382 124.842 C 359.607 123.144,359.063 121.666,359.172 121.557 C 359.595 121.134,366.140 118.359,366.714 118.359 C 367.048 118.359,367.625 118.634,367.997 118.971 C 369.203 120.063,369.119 118.967,367.767 116.002 C 366.377 112.953,365.625 112.175,365.625 113.787 M176.089 117.598 C 157.465 123.233,140.891 135.441,130.141 151.443 C 129.247 152.774,128.516 153.961,128.516 154.080 C 128.516 154.199,131.899 154.296,136.035 154.294 L 143.555 154.291 145.508 151.909 C 151.867 144.154,162.139 136.586,171.875 132.484 C 174.131 131.534,176.009 130.732,176.049 130.703 C 176.189 130.600,180.469 117.090,180.469 116.750 C 180.469 116.281,180.397 116.295,176.089 117.598 M220.321 116.895 C 220.326 116.948,221.344 120.144,222.585 123.997 L 224.840 131.002 228.924 132.818 C 238.622 137.130,248.297 144.353,254.492 151.909 L 256.445 154.291 263.965 154.294 C 268.101 154.296,271.484 154.199,271.484 154.080 C 271.484 152.735,263.639 143.033,258.536 138.069 C 251.319 131.047,245.353 126.876,236.133 122.403 C 230.397 119.621,220.250 116.086,220.321 116.895 M28.175 124.663 C 26.877 127.978,26.848 128.694,28.056 127.602 C 28.450 127.245,29.065 126.953,29.423 126.953 C 30.208 126.953,37.109 129.678,37.109 129.989 C 37.109 130.527,33.839 138.672,33.623 138.672 C 33.111 138.672,27.105 136.252,26.270 135.709 C 25.748 135.371,25.391 134.744,25.391 134.171 C 25.391 132.460,24.835 133.132,23.543 136.403 C 22.117 140.014,22.122 140.109,23.678 139.234 C 25.658 138.119,43.359 145.397,43.359 147.326 C 43.359 148.820,44.060 147.946,45.208 145.020 C 46.446 141.864,46.487 140.929,45.341 141.967 C 44.969 142.303,44.358 142.578,43.983 142.578 C 43.265 142.578,35.156 139.508,35.156 139.236 C 35.156 138.855,38.371 131.023,38.643 130.742 C 38.809 130.571,40.334 130.980,42.031 131.653 C 47.196 133.699,47.677 133.989,47.921 135.211 C 48.257 136.891,48.517 136.616,49.895 133.128 C 51.321 129.516,51.316 129.417,49.759 130.310 C 48.647 130.949,48.521 130.914,40.624 127.820 C 30.102 123.696,30.459 123.876,30.200 122.582 C 29.860 120.881,29.517 121.233,28.175 124.663 M170.077 136.465 C 162.467 140.201,156.953 144.166,151.005 150.181 L 147.126 154.102 156.023 154.207 L 164.919 154.312 167.327 152.594 C 169.335 151.161,169.814 150.592,170.212 149.168 C 170.475 148.229,171.641 144.517,172.805 140.918 C 173.968 137.319,174.788 134.375,174.627 134.375 C 174.466 134.375,172.419 135.315,170.077 136.465 M226.378 135.645 C 226.500 136.128,227.702 139.948,229.049 144.133 L 231.499 151.743 233.287 153.027 L 235.075 154.312 243.974 154.207 L 252.874 154.102 248.995 150.181 C 243.210 144.331,237.788 140.392,230.466 136.718 C 225.974 134.463,226.088 134.493,226.378 135.645 M375.216 135.845 C 374.899 137.287,374.779 137.343,364.854 140.674 C 356.040 143.634,356.031 143.636,355.009 142.711 C 353.788 141.606,353.765 142.422,354.925 145.687 C 356.117 149.041,356.415 149.388,356.798 147.863 C 357.122 146.573,357.495 146.403,366.765 143.305 C 375.451 140.402,375.950 140.303,377.022 141.274 C 378.169 142.312,378.184 141.744,377.094 138.448 C 375.874 134.756,375.552 134.311,375.216 135.845 M20.448 145.995 C 16.799 154.246,19.800 159.908,29.086 162.293 C 36.801 164.274,40.918 161.836,42.395 154.412 C 43.218 150.275,43.143 150.000,41.016 149.365 C 37.759 148.392,37.061 149.229,39.366 151.342 C 42.860 154.544,39.988 159.763,34.730 159.765 C 32.391 159.766,27.536 158.511,25.100 157.277 C 19.260 154.318,18.636 148.191,24.036 146.831 C 26.584 146.189,26.405 145.224,23.593 144.441 L 21.405 143.832 20.448 145.995 M378.516 145.252 C 378.516 146.606,377.122 147.230,368.935 149.543 C 358.286 152.550,359.156 152.396,357.992 151.480 C 357.441 151.047,356.937 150.756,356.871 150.834 C 356.713 151.023,360.686 165.113,360.980 165.407 C 361.276 165.703,367.414 164.260,367.285 163.925 C 367.231 163.786,367.188 163.423,367.188 163.118 C 367.188 162.707,366.651 162.569,365.108 162.583 C 362.022 162.611,361.489 162.168,360.420 158.683 C 359.307 155.056,358.350 155.726,368.864 152.778 C 377.987 150.220,379.430 149.999,380.029 151.071 C 380.892 152.612,380.917 150.975,380.080 147.859 C 379.251 144.775,378.516 143.549,378.516 145.252 M382.981 163.834 C 382.659 165.119,381.863 165.364,372.788 166.968 C 363.461 168.616,362.749 168.651,361.945 167.504 C 360.830 165.912,360.824 167.935,361.930 172.949 C 362.139 173.894,362.891 174.171,362.891 173.303 C 362.891 172.041,364.499 171.530,373.556 169.918 L 382.855 168.263 383.738 169.092 C 385.050 170.325,385.077 170.222,384.425 166.406 C 383.816 162.845,383.411 162.122,382.981 163.834 M15.492 165.476 C 14.910 168.487,13.623 179.769,13.837 179.983 C 13.971 180.117,14.350 179.841,14.680 179.371 C 15.459 178.258,16.178 178.275,26.465 179.652 C 34.488 180.726,35.938 181.128,35.938 182.274 C 35.938 182.570,36.113 182.813,36.328 182.813 C 36.543 182.813,36.719 182.769,36.720 182.715 C 36.721 182.661,37.160 179.189,37.695 175.000 C 38.231 170.811,38.669 167.361,38.670 167.335 C 38.671 167.309,37.925 167.172,37.012 167.032 C 36.099 166.891,34.780 166.673,34.082 166.548 C 32.981 166.350,32.813 166.428,32.813 167.139 C 32.813 167.693,33.224 168.132,34.082 168.496 C 36.589 169.557,36.893 170.271,36.435 174.042 C 35.921 178.287,36.601 178.082,27.586 176.708 L 26.071 176.477 26.293 174.331 C 26.528 172.054,27.378 170.703,28.576 170.703 C 30.120 170.703,29.397 169.224,27.734 168.980 C 26.875 168.853,25.469 168.647,24.609 168.520 C 22.695 168.239,22.379 169.394,24.068 170.501 C 25.058 171.150,25.383 175.138,24.517 176.004 C 24.021 176.500,15.625 175.282,15.625 174.714 C 15.625 170.429,16.864 167.484,18.958 166.793 C 20.076 166.424,20.997 165.398,20.583 164.984 C 20.507 164.908,19.379 164.734,18.077 164.598 L 15.710 164.351 15.492 165.476 M385.156 174.796 C 385.156 176.119,383.482 176.475,374.046 177.158 L 364.694 177.835 363.755 176.710 L 362.816 175.586 363.069 179.285 C 363.308 182.781,363.582 183.945,363.935 182.966 C 364.567 181.209,366.475 180.519,370.783 180.486 C 373.284 180.467,373.031 180.081,373.635 184.835 C 374.475 191.443,383.437 193.439,386.023 187.593 C 386.810 185.814,386.834 179.865,386.072 175.488 C 385.851 174.224,385.156 173.698,385.156 174.796 M385.080 181.805 C 385.290 185.881,383.761 187.583,379.839 187.640 C 376.415 187.689,374.685 185.741,374.631 181.776 L 374.609 180.153 378.809 179.892 C 381.118 179.749,383.184 179.568,383.398 179.491 C 384.606 179.055,384.963 179.546,385.080 181.805 M12.889 186.035 C 12.889 187.378,12.773 191.509,12.633 195.215 L 12.377 201.953 15.368 201.953 C 19.064 201.953,19.626 200.980,16.597 199.824 C 14.527 199.033,14.063 198.326,14.063 195.964 L 14.063 194.220 21.387 194.384 C 33.887 194.662,35.156 194.880,35.156 196.740 C 35.156 197.029,35.332 197.266,35.547 197.266 C 35.781 197.266,35.938 195.703,35.938 193.359 C 35.938 191.016,35.781 189.453,35.547 189.453 C 35.332 189.453,35.156 189.695,35.156 189.991 C 35.156 191.456,34.169 191.596,24.653 191.478 C 13.700 191.342,14.063 191.411,14.063 189.479 C 14.063 187.558,15.143 186.206,17.161 185.601 C 20.119 184.715,19.370 183.594,15.820 183.594 L 12.891 183.594 12.889 186.035 M116.016 197.476 C 116.016 217.612,123.194 237.876,135.224 251.704 L 136.536 253.213 138.852 246.108 C 140.939 239.702,141.113 238.921,140.618 238.154 C 133.692 227.426,129.691 215.858,128.684 203.647 L 128.421 200.459 122.456 196.128 C 119.176 193.746,116.385 191.797,116.254 191.797 C 116.123 191.797,116.016 194.353,116.016 197.476 M277.734 196.616 L 271.680 201.052 271.395 203.358 C 270.194 213.085,268.977 218.258,266.328 224.909 C 265.418 227.193,263.479 231.148,262.018 233.698 L 259.363 238.333 261.615 245.332 C 262.854 249.181,263.987 252.333,264.133 252.337 C 264.420 252.344,269.130 246.098,270.755 243.555 C 279.587 229.728,284.298 213.118,283.910 197.164 L 283.789 192.180 277.734 196.616 M364.256 197.288 C 364.004 200.473,364.251 202.239,364.751 200.830 C 365.338 199.175,366.301 198.828,370.313 198.828 L 374.219 198.828 374.219 201.870 C 374.219 208.004,377.768 211.352,383.008 210.162 C 386.392 209.393,387.500 206.593,387.500 198.809 C 387.500 194.196,387.270 193.307,386.518 195.020 L 386.133 195.898 376.422 195.791 C 366.806 195.685,365.234 195.479,365.234 194.322 C 365.234 192.141,364.483 194.418,364.256 197.288 M381.782 199.213 L 386.026 199.219 385.871 201.957 C 385.650 205.860,384.655 206.836,380.892 206.836 C 377.075 206.836,375.391 205.065,375.391 201.054 C 375.391 199.088,375.647 198.700,376.748 198.995 C 377.183 199.112,379.449 199.210,381.782 199.213 M12.420 205.761 C 12.579 209.379,12.760 209.803,13.645 208.630 C 14.574 207.398,15.787 207.636,20.805 210.035 L 24.618 211.858 21.977 213.536 C 20.524 214.459,18.402 215.702,17.261 216.299 L 15.186 217.383 14.464 216.504 C 13.304 215.092,13.173 215.429,13.470 219.043 C 13.807 223.141,13.738 223.041,15.206 221.572 C 15.855 220.924,18.719 218.908,21.572 217.091 L 26.758 213.789 30.078 213.543 C 34.074 213.247,34.922 213.433,35.514 214.732 C 36.141 216.108,36.500 215.555,36.400 213.366 C 36.179 208.532,35.567 206.515,35.002 208.763 C 34.709 209.932,33.955 210.184,29.706 210.533 L 26.367 210.808 20.218 207.747 C 16.835 206.063,13.849 204.334,13.581 203.905 C 12.673 202.452,12.301 203.047,12.420 205.761 M131.799 205.762 C 132.708 214.774,137.870 229.727,141.655 234.314 L 142.411 235.230 145.053 226.981 L 147.695 218.732 146.808 215.977 L 145.921 213.222 138.978 208.174 C 130.826 202.246,131.466 202.461,131.799 205.762 M261.058 208.733 C 254.311 213.608,253.919 213.962,253.304 215.744 L 252.657 217.621 255.270 225.705 C 256.708 230.151,258.021 233.934,258.190 234.112 C 258.550 234.490,262.280 227.342,264.055 222.871 C 266.092 217.742,269.057 204.440,268.318 203.744 C 268.233 203.664,264.966 205.909,261.058 208.733 M363.485 214.676 C 363.183 218.309,363.362 218.975,364.289 217.652 C 365.033 216.591,366.436 216.560,376.555 217.382 C 384.926 218.063,385.071 218.096,385.609 219.467 C 386.196 220.961,386.617 219.720,386.724 216.183 C 386.834 212.528,386.839 212.541,385.811 213.825 L 384.908 214.954 375.755 214.261 C 365.879 213.513,365.043 213.352,364.656 212.132 C 364.150 210.539,363.759 211.389,363.485 214.676 M32.617 217.451 C 28.770 217.931,28.331 219.282,31.901 219.650 C 34.804 219.950,35.422 220.623,36.109 224.228 C 36.787 227.786,38.057 227.112,26.887 229.118 L 17.383 230.825 16.278 230.026 C 14.784 228.947,14.753 229.060,15.472 232.939 C 16.002 235.795,16.797 237.234,16.797 235.338 C 16.797 234.241,18.685 233.658,26.758 232.260 C 31.270 231.478,35.354 230.753,35.834 230.648 C 36.391 230.526,37.000 230.750,37.518 231.268 C 39.126 232.876,39.076 232.232,36.528 218.457 C 36.278 217.106,35.984 217.031,32.617 217.451 M363.119 220.725 C 362.696 221.942,362.073 226.266,362.289 226.482 C 362.415 226.608,362.788 226.326,363.117 225.855 C 363.898 224.740,364.303 224.760,373.633 226.370 C 377.930 227.111,381.533 227.729,381.641 227.744 C 381.748 227.759,377.008 229.589,371.108 231.809 C 361.351 235.481,360.355 235.940,360.106 236.870 C 359.781 238.084,358.658 237.763,370.508 239.846 C 380.555 241.611,381.544 241.899,381.716 243.105 C 381.958 244.798,382.587 243.872,383.101 241.066 C 383.693 237.841,383.565 237.358,382.476 238.702 L 381.729 239.624 373.979 238.343 C 369.717 237.639,366.183 237.016,366.126 236.960 C 366.070 236.903,370.138 235.308,375.166 233.414 C 386.187 229.262,385.082 229.942,385.599 227.003 C 386.072 224.320,385.846 223.618,384.930 224.926 C 384.127 226.073,383.378 226.037,374.274 224.413 C 364.295 222.632,364.932 222.820,364.067 221.398 C 363.541 220.532,363.256 220.330,363.119 220.725 M27.539 237.457 C 18.793 240.004,15.696 247.167,20.818 253.000 C 26.622 259.611,42.188 254.631,42.188 246.163 C 42.188 238.691,35.977 234.999,27.539 237.457 M36.667 239.838 C 38.346 239.848,40.625 242.583,40.622 244.583 C 40.610 252.582,21.552 256.416,20.106 248.710 C 19.302 244.423,28.983 238.541,34.961 239.684 C 35.391 239.766,36.158 239.835,36.667 239.838 M356.675 249.222 C 355.297 253.304,354.243 256.703,354.331 256.775 C 354.420 256.847,355.635 257.356,357.031 257.907 C 360.324 259.206,361.003 258.437,358.501 256.240 C 357.452 255.318,356.934 254.538,356.934 253.880 C 356.934 252.448,358.676 247.266,359.158 247.266 C 359.519 247.266,368.012 249.987,368.261 250.182 C 369.112 250.851,366.274 255.385,364.904 255.544 C 362.289 255.848,366.392 258.594,369.461 258.594 C 370.214 258.594,369.984 257.258,369.141 256.731 C 368.052 256.051,368.735 250.781,369.912 250.781 C 370.281 250.781,377.854 253.505,378.061 253.712 C 378.315 253.966,376.146 260.082,375.661 260.479 C 375.405 260.688,374.406 261.014,373.441 261.203 C 370.860 261.709,370.946 262.578,373.663 263.435 C 376.379 264.291,376.020 264.756,378.621 257.031 C 379.815 253.486,380.914 250.278,381.063 249.902 C 381.253 249.423,381.146 249.219,380.706 249.219 C 380.361 249.219,380.078 249.383,380.078 249.583 C 380.078 250.661,378.050 250.297,371.377 248.022 C 359.826 244.084,360.154 244.230,359.895 242.934 C 359.517 241.043,359.276 241.514,356.675 249.222 M191.487 259.643 C 187.558 262.557,184.395 264.994,184.461 265.060 C 186.473 267.072,213.627 266.945,215.705 264.914 C 215.856 264.766,212.818 262.317,208.954 259.471 C 199.700 252.657,200.926 252.645,191.487 259.643 M29.297 259.602 C 24.392 261.168,23.785 264.270,26.865 272.038 C 28.668 276.585,29.688 278.037,29.688 276.057 C 29.688 274.719,29.719 274.702,38.672 271.187 C 48.721 267.241,48.323 267.353,49.249 268.192 C 50.526 269.347,50.512 268.561,49.191 265.085 C 47.975 261.883,47.266 261.137,47.266 263.061 C 47.266 264.239,46.787 264.602,43.393 266.002 C 39.376 267.658,39.518 267.682,38.493 265.183 C 36.405 260.089,33.429 258.282,29.297 259.602 M352.848 260.841 C 346.031 270.927,353.146 278.738,362.344 271.266 C 364.760 269.304,366.471 268.602,368.097 268.907 C 373.045 269.835,371.957 276.953,366.868 276.953 C 364.347 276.953,364.386 278.221,366.940 279.283 L 368.945 280.118 369.832 279.024 C 376.236 271.124,370.718 261.672,362.942 267.221 C 357.225 271.302,356.205 271.701,354.174 270.654 C 349.606 268.302,351.273 262.465,356.637 262.026 C 358.756 261.852,358.623 260.819,356.367 259.923 C 355.338 259.514,354.407 259.136,354.299 259.083 C 354.190 259.030,353.537 259.821,352.848 260.841 M35.537 263.077 C 36.342 263.805,37.891 266.854,37.891 267.710 C 37.891 268.148,35.002 269.416,28.658 271.760 C 27.405 272.224,26.498 266.057,27.591 264.498 C 29.120 262.315,33.775 261.483,35.537 263.077 M175.121 271.604 C 171.858 274.009,169.177 276.087,169.164 276.222 C 169.127 276.609,177.444 279.268,181.370 280.125 C 192.974 282.658,205.270 282.757,217.188 280.414 C 221.242 279.616,230.340 276.848,230.968 276.220 C 231.484 275.703,219.511 267.096,218.565 267.304 C 218.130 267.400,215.928 267.891,213.672 268.396 C 209.977 269.223,208.622 269.314,200.000 269.314 C 190.100 269.314,190.684 269.375,181.836 267.406 C 181.293 267.285,179.241 268.569,175.121 271.604 M356.507 284.639 C 352.126 287.594,349.254 292.306,349.205 296.623 C 349.186 298.211,343.504 306.551,342.871 305.918 C 342.587 305.634,342.600 304.309,342.911 301.569 C 343.907 292.813,343.622 292.297,339.976 296.257 C 334.405 302.309,332.670 306.496,332.639 313.956 L 332.617 319.123 329.310 322.448 C 325.320 326.458,325.176 326.373,325.574 320.229 C 325.933 314.691,325.887 310.497,325.464 310.073 C 324.934 309.543,318.918 315.734,316.780 319.009 C 313.949 323.346,312.440 328.829,312.014 336.323 C 311.916 338.034,311.832 338.138,308.451 340.717 C 303.601 344.417,303.568 344.354,305.899 335.967 C 307.008 331.981,307.415 327.539,306.649 327.799 C 305.291 328.261,298.800 333.358,296.544 335.733 C 292.489 340.002,290.629 343.618,288.905 350.586 L 288.036 354.102 284.350 356.151 C 279.086 359.078,279.095 359.105,282.812 351.172 C 285.498 345.440,286.518 342.188,285.628 342.188 C 284.943 342.188,278.183 346.294,276.172 347.931 C 272.103 351.245,268.300 357.089,266.769 362.383 C 266.270 364.107,262.360 366.245,253.906 369.417 C 246.311 372.266,255.752 371.015,265.130 367.929 L 267.565 367.128 272.721 368.573 C 283.052 371.467,289.255 370.533,296.205 365.036 C 299.452 362.467,298.646 362.065,288.755 361.321 C 280.241 360.680,280.284 360.721,285.364 358.045 L 289.648 355.787 294.141 356.116 C 308.998 357.204,315.074 355.484,321.717 348.311 L 324.312 345.508 322.801 345.222 C 321.969 345.065,317.993 345.046,313.965 345.178 C 309.774 345.317,306.651 345.272,306.664 345.073 C 306.677 344.883,308.532 343.320,310.787 341.602 L 314.887 338.477 320.852 338.017 C 332.419 337.125,337.705 334.598,342.607 327.618 C 345.386 323.660,345.302 323.619,337.258 325.036 C 331.379 326.071,328.516 326.476,328.516 326.271 C 328.516 326.183,329.964 324.553,331.733 322.649 L 334.951 319.188 338.365 318.560 C 348.319 316.731,352.958 313.028,355.431 304.939 C 355.882 303.466,356.250 302.195,356.250 302.115 C 356.250 302.034,355.151 302.571,353.809 303.309 C 351.173 304.757,346.197 306.743,345.666 306.559 C 344.822 306.266,350.974 298.272,352.344 297.881 C 354.598 297.238,357.233 294.265,358.123 291.358 C 358.786 289.194,359.677 282.791,359.311 282.825 C 359.239 282.831,357.977 283.648,356.507 284.639 M41.909 287.615 C 42.325 293.501,44.418 297.269,48.141 298.831 C 50.110 299.658,56.025 306.995,55.304 307.717 C 54.976 308.045,50.433 306.301,47.724 304.807 C 44.699 303.139,44.631 303.198,45.660 306.586 C 47.909 313.991,52.551 317.709,61.914 319.602 C 66.225 320.474,66.138 320.419,70.006 324.705 C 72.541 327.514,72.656 327.718,71.622 327.546 C 60.928 325.778,58.032 325.360,57.194 325.463 L 56.195 325.586 57.820 328.095 C 62.587 335.453,68.254 338.289,80.082 339.232 L 86.140 339.715 90.043 342.750 C 92.189 344.418,94.121 345.964,94.336 346.183 C 94.602 346.456,92.606 346.512,88.064 346.359 C 81.183 346.127,76.953 346.344,76.953 346.930 C 76.953 347.114,78.316 348.628,79.982 350.293 C 86.590 356.899,92.642 358.462,107.031 357.280 L 111.133 356.943 115.393 359.202 C 120.473 361.895,120.457 361.914,112.571 362.503 C 107.026 362.918,102.845 363.568,102.538 364.064 C 102.267 364.503,106.597 367.760,109.236 369.101 C 114.942 372.000,120.139 372.172,128.460 369.737 L 133.288 368.324 135.687 369.113 C 140.363 370.651,149.360 372.671,149.759 372.272 C 150.257 371.775,150.299 371.800,146.875 370.554 C 145.264 369.968,141.926 368.565,139.458 367.437 L 134.971 365.385 133.387 361.481 C 130.029 353.201,125.718 348.631,117.230 344.352 L 115.125 343.291 115.323 345.045 C 115.432 346.011,116.517 348.921,117.734 351.514 C 120.385 357.156,121.211 359.375,120.660 359.375 C 119.333 359.375,112.872 355.328,112.653 354.360 C 109.884 342.101,106.797 337.542,96.329 330.251 L 93.635 328.375 93.845 331.082 C 93.960 332.571,94.601 335.709,95.269 338.056 C 97.336 345.315,97.235 345.459,92.537 341.962 C 88.709 339.111,88.874 339.450,88.510 333.700 C 88.000 325.630,84.666 319.096,77.916 312.941 L 75.615 310.843 75.296 311.965 C 75.121 312.581,75.095 316.206,75.238 320.020 C 75.546 328.214,75.711 328.059,71.483 323.535 L 68.288 320.117 68.218 314.844 C 68.116 307.199,66.599 303.592,60.944 297.548 L 58.022 294.425 57.740 295.747 C 57.585 296.475,57.624 298.564,57.827 300.391 C 58.273 304.399,58.309 307.423,57.910 307.418 C 56.836 307.406,51.970 299.230,51.578 296.779 C 50.793 291.863,48.672 288.638,44.329 285.755 C 41.587 283.935,41.647 283.889,41.909 287.615 M166.406 365.290 C 161.898 367.008,161.509 367.249,161.841 368.116 C 162.039 368.630,162.354 368.605,164.289 367.925 C 168.156 366.566,168.105 366.320,166.180 377.119 C 164.483 386.636,164.442 386.719,161.290 386.719 C 159.268 386.719,158.946 386.815,159.056 387.389 C 159.243 388.361,172.153 390.658,172.676 389.812 C 172.941 389.384,172.559 389.101,170.997 388.570 C 167.602 387.415,167.641 388.150,170.234 373.926 C 172.418 361.947,172.818 362.847,166.406 365.290 M228.600 363.949 C 227.720 364.118,218.750 381.094,218.750 382.591 C 218.750 383.502,219.085 383.516,224.312 382.825 C 229.965 382.077,229.444 381.817,229.873 385.595 C 230.118 387.761,229.599 389.063,228.488 389.063 C 228.288 389.063,228.125 389.332,228.125 389.662 C 228.125 390.282,228.292 390.278,233.952 389.496 C 235.907 389.226,236.460 388.497,234.989 388.128 C 233.716 387.808,233.319 387.011,232.991 384.113 L 232.723 381.742 234.916 381.468 L 237.109 381.194 237.109 379.269 C 237.109 376.962,236.161 376.612,235.077 378.518 C 234.543 379.456,232.422 380.313,232.422 379.590 C 232.422 379.536,231.982 376.170,231.445 372.109 C 230.908 368.048,230.469 364.489,230.469 364.199 C 230.469 363.668,230.232 363.636,228.600 363.949 M184.673 366.014 C 179.815 367.477,177.399 373.457,179.785 378.111 C 181.370 381.201,186.143 382.292,190.140 380.478 L 191.803 379.723 191.550 380.779 C 190.204 386.394,186.780 389.831,182.520 389.842 C 181.596 389.844,181.406 390.430,182.015 391.394 C 182.449 392.079,185.699 391.535,188.175 390.363 C 197.015 386.175,198.670 368.338,190.430 366.061 C 188.638 365.566,186.227 365.546,184.673 366.014 M204.688 366.433 C 197.710 369.355,197.112 387.607,203.864 391.550 C 206.459 393.066,210.680 392.412,212.774 390.169 C 217.004 385.639,216.506 371.065,211.997 367.437 C 210.365 366.123,206.646 365.612,204.688 366.433 M190.319 368.229 C 192.213 369.916,193.026 376.491,191.504 377.819 C 187.586 381.236,182.417 379.264,182.424 374.355 C 182.432 368.720,186.941 365.221,190.319 368.229 M209.462 368.652 C 212.526 371.899,213.077 386.143,210.267 389.482 C 208.007 392.168,204.843 390.464,203.675 385.932 C 200.927 375.280,204.801 363.715,209.462 368.652 M228.496 374.609 C 228.768 377.295,229.016 379.663,229.046 379.872 C 229.098 380.229,222.313 381.428,222.002 381.117 C 221.924 381.038,223.130 378.223,224.683 374.861 C 226.237 371.496,227.617 368.967,227.753 369.237 C 227.889 369.506,228.223 371.924,228.496 374.609 \" stroke=\"none\" fill=\"#840404\" fill-rule=\"evenodd\"></path><path id=\"path4\" d=\"M204.693 12.793 C 204.697 13.215,204.809 13.312,204.986 13.047 C 205.144 12.811,205.537 12.517,205.859 12.394 C 206.251 12.245,206.154 12.161,205.566 12.140 C 204.976 12.119,204.689 12.334,204.693 12.793 M186.237 12.783 C 186.940 12.870,187.994 12.868,188.581 12.779 C 189.168 12.690,188.594 12.619,187.305 12.621 C 186.016 12.623,185.535 12.696,186.237 12.783 M209.473 12.769 C 209.849 12.868,210.464 12.868,210.840 12.769 C 211.216 12.671,210.908 12.591,210.156 12.591 C 209.404 12.591,209.097 12.671,209.473 12.769 M214.551 13.160 C 214.927 13.258,215.542 13.258,215.918 13.160 C 216.294 13.062,215.986 12.981,215.234 12.981 C 214.482 12.981,214.175 13.062,214.551 13.160 M219.629 13.551 C 220.005 13.649,220.620 13.649,220.996 13.551 C 221.372 13.452,221.064 13.372,220.313 13.372 C 219.561 13.372,219.253 13.452,219.629 13.551 M209.282 14.339 C 209.768 14.432,210.471 14.429,210.844 14.331 C 211.218 14.233,210.820 14.157,209.961 14.161 C 209.102 14.165,208.796 14.245,209.282 14.339 M212.200 15.625 C 212.200 16.377,212.280 16.685,212.379 16.309 C 212.477 15.933,212.477 15.317,212.379 14.941 C 212.280 14.565,212.200 14.873,212.200 15.625 M223.138 16.016 C 223.138 16.768,223.218 17.075,223.316 16.699 C 223.414 16.323,223.414 15.708,223.316 15.332 C 223.218 14.956,223.138 15.264,223.138 16.016 M167.090 15.510 C 167.573 15.603,168.364 15.603,168.848 15.510 C 169.331 15.417,168.936 15.341,167.969 15.341 C 167.002 15.341,166.606 15.417,167.090 15.510 M204.395 16.992 C 204.400 17.852,204.480 18.157,204.573 17.671 C 204.667 17.185,204.663 16.482,204.565 16.109 C 204.467 15.735,204.391 16.133,204.395 16.992 M215.325 17.188 C 215.325 17.939,215.405 18.247,215.504 17.871 C 215.602 17.495,215.602 16.880,215.504 16.504 C 215.405 16.128,215.325 16.436,215.325 17.188 M191.406 16.973 C 191.406 17.503,191.176 17.625,190.442 17.485 C 189.911 17.383,189.570 17.451,189.683 17.635 C 190.030 18.195,191.416 18.007,191.662 17.366 C 191.789 17.034,191.784 16.654,191.650 16.520 C 191.516 16.386,191.406 16.590,191.406 16.973 M199.752 22.070 C 199.753 24.219,199.819 25.048,199.898 23.913 C 199.977 22.778,199.976 21.020,199.896 20.006 C 199.816 18.993,199.751 19.922,199.752 22.070 M211.809 20.703 C 211.809 21.455,211.890 21.763,211.988 21.387 C 212.086 21.011,212.086 20.396,211.988 20.020 C 211.890 19.644,211.809 19.951,211.809 20.703 M170.810 22.656 C 170.810 23.623,170.886 24.019,170.979 23.535 C 171.072 23.052,171.072 22.261,170.979 21.777 C 170.886 21.294,170.810 21.689,170.810 22.656 M214.934 22.266 C 214.934 23.018,215.015 23.325,215.113 22.949 C 215.211 22.573,215.211 21.958,215.113 21.582 C 215.015 21.206,214.934 21.514,214.934 22.266 M260.254 22.926 C 260.630 23.024,261.245 23.024,261.621 22.926 C 261.997 22.827,261.689 22.747,260.938 22.747 C 260.186 22.747,259.878 22.827,260.254 22.926 M133.959 24.195 C 134.438 24.498,134.441 24.654,133.981 25.263 C 133.473 25.935,133.483 25.938,134.150 25.330 C 134.870 24.673,134.708 23.823,133.864 23.834 C 133.572 23.838,133.607 23.972,133.959 24.195 M196.627 27.539 C 196.628 29.688,196.694 30.517,196.773 29.381 C 196.852 28.246,196.851 26.488,196.771 25.475 C 196.691 24.462,196.626 25.391,196.627 27.539 M211.419 25.781 C 211.419 26.533,211.499 26.841,211.597 26.465 C 211.696 26.089,211.696 25.474,211.597 25.098 C 211.499 24.722,211.419 25.029,211.419 25.781 M214.552 27.539 C 214.556 28.398,214.636 28.704,214.729 28.218 C 214.823 27.732,214.819 27.029,214.722 26.656 C 214.624 26.282,214.547 26.680,214.552 27.539 M133.310 28.125 C 133.310 29.092,133.386 29.487,133.479 29.004 C 133.572 28.521,133.572 27.729,133.479 27.246 C 133.386 26.763,133.310 27.158,133.310 28.125 M211.028 30.859 C 211.028 31.611,211.109 31.919,211.207 31.543 C 211.305 31.167,211.305 30.552,211.207 30.176 C 211.109 29.800,211.028 30.107,211.028 30.859 M214.169 32.813 C 214.169 33.779,214.245 34.175,214.338 33.691 C 214.431 33.208,214.431 32.417,214.338 31.934 C 214.245 31.450,214.169 31.846,214.169 32.813 M133.692 34.180 C 133.697 35.039,133.777 35.345,133.870 34.859 C 133.963 34.373,133.960 33.670,133.862 33.296 C 133.764 32.923,133.688 33.320,133.692 34.180 M176.172 33.325 C 176.172 33.393,176.743 33.964,177.441 34.595 L 178.711 35.742 177.564 34.473 C 176.494 33.289,176.172 33.024,176.172 33.325 M131.731 36.719 C 131.731 37.471,131.812 37.778,131.910 37.402 C 132.008 37.026,132.008 36.411,131.910 36.035 C 131.812 35.659,131.731 35.967,131.731 36.719 M155.958 36.914 C 155.962 37.773,156.042 38.079,156.136 37.593 C 156.229 37.107,156.226 36.404,156.128 36.031 C 156.030 35.657,155.954 36.055,155.958 36.914 M212.988 36.597 C 213.364 36.696,213.979 36.696,214.355 36.597 C 214.731 36.499,214.424 36.419,213.672 36.419 C 212.920 36.419,212.612 36.499,212.988 36.597 M183.496 36.994 C 183.979 37.088,184.771 37.088,185.254 36.994 C 185.737 36.901,185.342 36.825,184.375 36.825 C 183.408 36.825,183.013 36.901,183.496 36.994 M134.083 40.039 C 134.087 40.898,134.167 41.204,134.261 40.718 C 134.354 40.232,134.351 39.529,134.253 39.156 C 134.155 38.782,134.079 39.180,134.083 40.039 M132.122 41.016 C 132.122 41.768,132.202 42.075,132.301 41.699 C 132.399 41.323,132.399 40.708,132.301 40.332 C 132.202 39.956,132.122 40.264,132.122 41.016 M196.387 42.479 C 198.374 42.549,201.626 42.549,203.613 42.479 C 205.601 42.408,203.975 42.350,200.000 42.350 C 196.025 42.350,194.399 42.408,196.387 42.479 M187.407 42.854 C 187.893 42.948,188.596 42.944,188.969 42.847 C 189.343 42.749,188.945 42.672,188.086 42.677 C 187.227 42.681,186.921 42.761,187.407 42.854 M211.235 42.854 C 211.721 42.948,212.424 42.944,212.798 42.847 C 213.171 42.749,212.773 42.672,211.914 42.677 C 211.055 42.681,210.749 42.761,211.235 42.854 M251.172 42.700 C 251.172 42.768,251.743 43.339,252.441 43.970 L 253.711 45.117 252.564 43.848 C 251.494 42.664,251.172 42.399,251.172 42.700 M131.799 45.222 C 132.726 46.308,132.820 46.307,132.782 45.215 C 132.765 44.731,132.660 44.563,132.548 44.841 C 132.384 45.250,132.224 45.251,131.700 44.847 C 131.252 44.502,131.282 44.616,131.799 45.222 M134.474 45.898 C 134.478 46.758,134.558 47.063,134.651 46.577 C 134.745 46.092,134.741 45.388,134.643 45.015 C 134.546 44.642,134.469 45.039,134.474 45.898 M272.702 50.636 C 272.677 51.093,272.928 51.692,273.260 51.968 C 273.592 52.243,273.757 52.748,273.627 53.090 C 273.441 53.581,273.492 53.611,273.874 53.232 C 274.257 52.852,274.230 52.610,273.742 52.060 C 273.404 51.679,273.042 51.016,272.937 50.586 C 272.757 49.844,272.745 49.847,272.702 50.636 M322.805 58.068 C 324.056 59.396,324.600 60.261,324.403 60.607 C 324.160 61.034,324.204 61.040,324.638 60.637 C 325.081 60.225,324.812 59.797,323.040 58.098 L 320.909 56.055 322.805 58.068 M80.896 57.129 C 80.988 57.183,81.764 57.842,82.621 58.594 L 84.180 59.961 82.834 58.496 C 82.093 57.690,81.317 57.031,81.108 57.031 C 80.900 57.031,80.804 57.075,80.896 57.129 M320.291 62.012 L 318.945 63.477 320.410 62.130 C 321.774 60.877,322.055 60.547,321.756 60.547 C 321.691 60.547,321.032 61.206,320.291 62.012 M313.074 64.941 L 310.742 67.383 313.184 65.051 C 314.526 63.769,315.625 62.670,315.625 62.610 C 315.625 62.321,315.239 62.674,313.074 64.941 M331.778 66.653 C 333.339 68.289,333.897 69.116,333.536 69.259 C 333.198 69.394,333.176 69.481,333.473 69.500 C 334.620 69.576,334.163 68.718,331.915 66.571 L 329.492 64.258 331.778 66.653 M313.071 69.629 L 311.133 71.680 313.184 69.741 C 315.089 67.940,315.414 67.578,315.122 67.578 C 315.060 67.578,314.137 68.501,313.071 69.629 M318.164 70.313 C 319.440 71.602,320.571 72.656,320.679 72.656 C 320.786 72.656,319.830 71.602,318.555 70.313 C 317.279 69.023,316.148 67.969,316.040 67.969 C 315.933 67.969,316.888 69.023,318.164 70.313 M320.703 70.508 C 321.870 71.689,322.913 72.656,323.020 72.656 C 323.128 72.656,322.261 71.689,321.094 70.508 C 319.927 69.326,318.884 68.359,318.777 68.359 C 318.669 68.359,319.536 69.326,320.703 70.508 M324.786 71.191 L 323.242 72.852 324.902 71.307 C 326.446 69.871,326.742 69.531,326.446 69.531 C 326.383 69.531,325.636 70.278,324.786 71.191 M95.013 71.094 C 95.013 71.846,95.093 72.153,95.191 71.777 C 95.289 71.401,95.289 70.786,95.191 70.410 C 95.093 70.034,95.013 70.342,95.013 71.094 M306.445 75.000 C 307.503 76.074,308.457 76.953,308.564 76.953 C 308.672 76.953,307.894 76.074,306.836 75.000 C 305.778 73.926,304.824 73.047,304.717 73.047 C 304.609 73.047,305.387 73.926,306.445 75.000 M83.984 74.805 C 84.713 75.557,85.397 76.172,85.505 76.172 C 85.612 76.172,85.104 75.557,84.375 74.805 C 83.646 74.053,82.962 73.438,82.855 73.438 C 82.747 73.438,83.256 74.053,83.984 74.805 M324.402 76.270 L 322.070 78.711 324.512 76.379 C 325.854 75.097,326.953 73.998,326.953 73.938 C 326.953 73.649,326.568 74.002,324.402 76.270 M57.599 77.441 L 56.055 79.102 57.715 77.557 C 58.628 76.708,59.375 75.961,59.375 75.897 C 59.375 75.602,59.035 75.897,57.599 77.441 M316.968 79.395 L 315.820 80.664 317.090 79.517 C 317.788 78.886,318.359 78.314,318.359 78.247 C 318.359 77.945,318.037 78.211,316.968 79.395 M59.473 79.176 C 59.849 79.274,60.464 79.274,60.840 79.176 C 61.216 79.077,60.908 78.997,60.156 78.997 C 59.404 78.997,59.097 79.077,59.473 79.176 M315.420 83.499 C 317.724 85.912,318.360 86.232,318.658 85.132 C 318.781 84.676,318.733 84.681,318.403 85.156 C 318.065 85.643,317.579 85.345,315.541 83.398 L 313.086 81.055 315.420 83.499 M94.311 82.910 L 93.164 84.180 94.434 83.032 C 95.617 81.963,95.883 81.641,95.581 81.641 C 95.514 81.641,94.942 82.212,94.311 82.910 M304.297 81.763 C 304.297 81.830,304.868 82.401,305.566 83.032 L 306.836 84.180 305.689 82.910 C 304.619 81.727,304.297 81.461,304.297 81.763 M346.847 83.301 C 347.272 83.866,347.272 84.102,346.847 84.668 C 346.356 85.319,346.367 85.319,347.078 84.668 C 347.812 83.995,347.812 83.974,347.078 83.301 C 346.367 82.650,346.356 82.650,346.847 83.301 M53.614 85.352 C 53.618 86.211,53.698 86.517,53.792 86.031 C 53.885 85.545,53.882 84.842,53.784 84.468 C 53.686 84.095,53.610 84.492,53.614 85.352 M344.516 86.541 C 344.241 86.873,343.736 87.039,343.394 86.909 C 342.894 86.718,342.869 86.769,343.266 87.169 C 343.664 87.570,343.925 87.499,344.622 86.801 C 345.097 86.326,345.381 85.938,345.252 85.938 C 345.123 85.938,344.792 86.209,344.516 86.541 M88.462 88.379 L 86.523 90.430 88.574 88.491 C 90.480 86.690,90.804 86.328,90.513 86.328 C 90.451 86.328,89.528 87.251,88.462 88.379 M311.133 88.281 C 312.191 89.355,313.144 90.234,313.252 90.234 C 313.359 90.234,312.582 89.355,311.523 88.281 C 310.465 87.207,309.512 86.328,309.404 86.328 C 309.297 86.328,310.075 87.207,311.133 88.281 M48.483 91.639 C 48.458 92.089,48.833 92.792,49.316 93.201 C 50.188 93.939,50.190 93.939,49.552 93.164 C 49.198 92.734,48.823 92.031,48.718 91.602 C 48.535 90.850,48.526 90.852,48.483 91.639 M82.593 94.629 L 81.445 95.898 82.715 94.751 C 83.898 93.682,84.164 93.359,83.862 93.359 C 83.795 93.359,83.224 93.931,82.593 94.629 M316.016 93.482 C 316.016 93.549,316.587 94.120,317.285 94.751 L 318.555 95.898 317.407 94.629 C 316.338 93.446,316.016 93.180,316.016 93.482 M333.686 94.751 C 334.209 95.373,334.258 95.663,333.901 96.021 C 333.646 96.276,333.539 96.484,333.663 96.484 C 334.548 96.484,334.686 95.366,333.885 94.688 C 333.010 93.947,333.010 93.947,333.686 94.751 M359.075 105.078 C 359.075 105.830,359.155 106.138,359.254 105.762 C 359.352 105.386,359.352 104.771,359.254 104.395 C 359.155 104.019,359.075 104.326,359.075 105.078 M348.828 109.888 C 348.828 109.955,349.399 110.526,350.098 111.157 L 351.367 112.305 350.220 111.035 C 349.150 109.852,348.828 109.586,348.828 109.888 M48.242 111.328 L 41.992 111.554 48.558 111.636 C 52.856 111.690,55.041 111.584,54.883 111.328 C 54.750 111.113,54.608 110.975,54.567 111.020 C 54.526 111.065,51.680 111.204,48.242 111.328 M354.204 113.167 C 354.690 113.260,355.393 113.257,355.766 113.159 C 356.140 113.061,355.742 112.985,354.883 112.989 C 354.023 112.993,353.718 113.073,354.204 113.167 M43.457 114.743 C 45.122 114.817,47.847 114.817,49.512 114.743 C 51.177 114.670,49.814 114.610,46.484 114.610 C 43.154 114.610,41.792 114.670,43.457 114.743 M29.545 121.357 C 29.788 121.534,30.084 122.031,30.203 122.461 C 30.372 123.077,30.402 123.042,30.346 122.296 C 30.306 121.776,30.010 121.279,29.688 121.192 C 29.300 121.088,29.252 121.144,29.545 121.357 M370.849 124.792 C 370.728 125.107,370.720 125.590,370.831 125.866 C 370.941 126.142,371.046 125.986,371.063 125.521 C 371.080 125.055,371.313 124.586,371.582 124.477 C 371.964 124.323,371.962 124.274,371.570 124.250 C 371.294 124.233,370.970 124.477,370.849 124.792 M201.074 126.838 C 201.558 126.931,202.349 126.931,202.832 126.838 C 203.315 126.745,202.920 126.669,201.953 126.669 C 200.986 126.669,200.591 126.745,201.074 126.838 M348.468 127.604 C 348.451 128.070,348.218 128.539,347.949 128.648 C 347.567 128.802,347.569 128.851,347.961 128.875 C 348.554 128.912,348.986 127.969,348.700 127.259 C 348.590 126.983,348.485 127.139,348.468 127.604 M200.879 129.566 C 201.255 129.664,201.870 129.664,202.246 129.566 C 202.622 129.468,202.314 129.388,201.563 129.388 C 200.811 129.388,200.503 129.468,200.879 129.566 M25.444 134.034 C 25.414 134.600,25.697 135.301,26.074 135.597 C 26.669 136.063,26.699 136.057,26.307 135.547 C 26.059 135.225,25.775 134.521,25.677 133.984 L 25.497 133.008 25.444 134.034 M138.464 136.816 L 136.133 139.258 138.574 136.926 C 140.842 134.761,141.194 134.375,140.906 134.375 C 140.845 134.375,139.747 135.474,138.464 136.816 M261.133 136.719 C 262.408 138.008,263.540 139.063,263.647 139.063 C 263.755 139.063,262.799 138.008,261.523 136.719 C 260.248 135.430,259.116 134.375,259.009 134.375 C 258.901 134.375,259.857 135.430,261.133 136.719 M140.422 138.770 L 136.914 142.383 140.527 138.875 C 143.883 135.618,144.318 135.156,144.035 135.156 C 143.977 135.156,142.351 136.782,140.422 138.770 M259.375 138.867 C 261.192 140.693,262.766 142.188,262.873 142.188 C 262.981 142.188,261.582 140.693,259.766 138.867 C 257.949 137.041,256.375 135.547,256.267 135.547 C 256.160 135.547,257.558 137.041,259.375 138.867 M149.405 147.754 L 146.289 150.977 149.512 147.861 C 151.284 146.147,152.734 144.697,152.734 144.638 C 152.734 144.353,152.299 144.761,149.405 147.754 M250.195 147.656 C 251.904 149.375,253.390 150.781,253.497 150.781 C 253.605 150.781,252.295 149.375,250.586 147.656 C 248.877 145.938,247.391 144.531,247.284 144.531 C 247.177 144.531,248.487 145.938,250.195 147.656 M43.092 147.235 C 43.132 147.755,43.428 148.252,43.750 148.339 C 44.137 148.443,44.186 148.387,43.893 148.174 C 43.649 147.997,43.353 147.500,43.235 147.070 C 43.065 146.454,43.035 146.489,43.092 147.235 M38.281 150.513 C 38.281 150.580,38.853 151.151,39.551 151.782 L 40.820 152.930 39.673 151.660 C 38.604 150.477,38.281 150.211,38.281 150.513 M33.503 159.658 C 34.205 159.745,35.260 159.743,35.847 159.654 C 36.434 159.565,35.859 159.494,34.570 159.496 C 33.281 159.498,32.801 159.571,33.503 159.658 M32.910 163.160 C 33.286 163.258,33.901 163.258,34.277 163.160 C 34.653 163.062,34.346 162.981,33.594 162.981 C 32.842 162.981,32.534 163.062,32.910 163.160 M15.369 164.665 C 15.242 164.997,15.247 165.378,15.381 165.512 C 15.515 165.646,15.625 165.474,15.625 165.131 C 15.625 164.788,16.021 164.431,16.504 164.338 L 17.383 164.169 16.492 164.116 C 16.002 164.086,15.496 164.334,15.369 164.665 M28.394 169.003 C 28.864 169.105,29.327 169.532,29.422 169.952 C 29.557 170.545,29.585 170.518,29.544 169.830 C 29.506 169.180,29.234 168.928,28.516 168.881 C 27.702 168.828,27.682 168.848,28.394 169.003 M364.013 177.051 C 364.424 177.576,365.059 177.718,366.747 177.662 L 368.945 177.590 366.809 177.443 C 365.634 177.363,364.403 177.088,364.074 176.832 C 363.551 176.425,363.543 176.452,364.013 177.051 M377.251 176.839 C 377.737 176.932,378.440 176.929,378.813 176.831 C 379.187 176.733,378.789 176.657,377.930 176.661 C 377.070 176.665,376.765 176.745,377.251 176.839 M371.973 177.222 C 372.349 177.321,372.964 177.321,373.340 177.222 C 373.716 177.124,373.408 177.044,372.656 177.044 C 371.904 177.044,371.597 177.124,371.973 177.222 M386.419 179.688 C 386.419 180.439,386.499 180.747,386.597 180.371 C 386.696 179.995,386.696 179.380,386.597 179.004 C 386.499 178.628,386.419 178.936,386.419 179.688 M384.058 179.539 C 384.421 179.647,384.806 180.032,384.914 180.395 C 385.057 180.873,385.089 180.841,385.032 180.278 C 384.985 179.823,384.630 179.468,384.175 179.421 C 383.612 179.364,383.580 179.396,384.058 179.539 M379.004 179.957 C 379.380 180.055,379.995 180.055,380.371 179.957 C 380.747 179.859,380.439 179.778,379.688 179.778 C 378.936 179.778,378.628 179.859,379.004 179.957 M362.981 181.250 C 362.981 182.002,363.062 182.310,363.160 181.934 C 363.258 181.558,363.258 180.942,363.160 180.566 C 363.062 180.190,362.981 180.498,362.981 181.250 M368.657 180.745 C 369.143 180.838,369.846 180.835,370.219 180.737 C 370.593 180.639,370.195 180.563,369.336 180.567 C 368.477 180.572,368.171 180.652,368.657 180.745 M36.750 181.901 C 36.733 182.367,36.499 182.836,36.230 182.944 C 35.848 183.099,35.851 183.148,36.243 183.172 C 36.836 183.209,37.267 182.266,36.982 181.556 C 36.871 181.280,36.767 181.436,36.750 181.901 M373.138 182.813 C 373.138 183.564,373.218 183.872,373.316 183.496 C 373.414 183.120,373.414 182.505,373.316 182.129 C 373.218 181.753,373.138 182.061,373.138 182.813 M13.965 183.486 C 14.663 183.572,15.806 183.572,16.504 183.486 C 17.202 183.399,16.631 183.328,15.234 183.328 C 13.838 183.328,13.267 183.399,13.965 183.486 M12.643 189.258 C 12.644 191.406,12.709 192.235,12.788 191.100 C 12.868 189.965,12.867 188.207,12.787 187.194 C 12.706 186.181,12.642 187.109,12.643 189.258 M42.677 188.086 C 42.681 188.945,42.761 189.251,42.854 188.765 C 42.948 188.279,42.944 187.576,42.847 187.202 C 42.749 186.829,42.672 187.227,42.677 188.086 M357.122 188.281 C 357.122 189.033,357.202 189.341,357.301 188.965 C 357.399 188.589,357.399 187.974,357.301 187.598 C 357.202 187.222,357.122 187.529,357.122 188.281 M14.169 189.453 C 14.169 190.420,14.245 190.815,14.338 190.332 C 14.431 189.849,14.431 189.058,14.338 188.574 C 14.245 188.091,14.169 188.486,14.169 189.453 M35.934 192.108 L 36.125 195.117 36.246 192.422 C 36.312 190.939,36.226 189.585,36.054 189.412 C 35.883 189.239,35.828 190.452,35.934 192.108 M113.372 191.016 C 113.372 191.768,113.452 192.075,113.551 191.699 C 113.649 191.323,113.649 190.708,113.551 190.332 C 113.452 189.956,113.372 190.264,113.372 191.016 M16.712 191.304 C 17.847 191.383,19.605 191.382,20.619 191.302 C 21.632 191.222,20.703 191.157,18.555 191.158 C 16.406 191.159,15.577 191.225,16.712 191.304 M31.157 191.683 C 31.643 191.776,32.346 191.772,32.719 191.675 C 33.093 191.577,32.695 191.500,31.836 191.505 C 30.977 191.509,30.671 191.589,31.157 191.683 M42.348 200.000 C 42.348 203.760,42.407 205.298,42.478 203.418 C 42.550 201.538,42.550 198.462,42.478 196.582 C 42.407 194.702,42.348 196.240,42.348 200.000 M357.583 200.000 C 357.583 203.760,357.641 205.298,357.713 203.418 C 357.784 201.538,357.784 198.462,357.713 196.582 C 357.641 194.702,357.583 196.240,357.583 200.000 M364.131 195.410 L 364.199 197.461 364.353 195.710 C 364.438 194.746,364.715 193.826,364.968 193.665 C 365.275 193.470,365.201 193.369,364.746 193.365 C 364.173 193.360,364.073 193.689,364.131 195.410 M14.947 194.421 C 15.541 194.511,16.419 194.508,16.900 194.416 C 17.380 194.323,16.895 194.249,15.820 194.252 C 14.746 194.255,14.353 194.331,14.947 194.421 M387.628 196.680 C 387.630 198.184,387.701 198.751,387.785 197.941 C 387.870 197.130,387.868 195.900,387.782 195.206 C 387.696 194.513,387.626 195.176,387.628 196.680 M27.051 194.818 C 28.071 194.899,29.741 194.899,30.762 194.818 C 31.782 194.738,30.947 194.672,28.906 194.672 C 26.865 194.672,26.030 194.738,27.051 194.818 M115.753 198.242 C 115.755 199.746,115.826 200.313,115.910 199.503 C 115.995 198.693,115.993 197.462,115.907 196.769 C 115.821 196.075,115.751 196.738,115.753 198.242 M284.113 198.242 C 284.114 199.746,284.185 200.313,284.269 199.503 C 284.354 198.693,284.353 197.462,284.266 196.769 C 284.180 196.075,284.111 196.738,284.113 198.242 M376.087 195.992 C 377.222 196.071,378.980 196.070,379.994 195.990 C 381.007 195.910,380.078 195.845,377.930 195.846 C 375.781 195.847,374.952 195.912,376.087 195.992 M255.980 198.242 C 255.983 199.531,256.056 200.012,256.142 199.309 C 256.229 198.607,256.228 197.553,256.138 196.966 C 256.049 196.379,255.978 196.953,255.980 198.242 M253.231 198.047 C 253.231 199.014,253.308 199.409,253.401 198.926 C 253.494 198.442,253.494 197.651,253.401 197.168 C 253.308 196.685,253.231 197.080,253.231 198.047 M370.605 199.111 C 371.304 199.197,372.446 199.197,373.145 199.111 C 373.843 199.024,373.271 198.953,371.875 198.953 C 370.479 198.953,369.907 199.024,370.605 199.111 M375.549 199.369 C 375.435 199.667,375.410 200.678,375.493 201.615 L 375.645 203.320 375.713 201.298 C 375.766 199.737,375.937 199.235,376.465 199.097 C 377.106 198.930,377.105 198.916,376.453 198.873 C 376.070 198.849,375.663 199.072,375.549 199.369 M373.949 201.758 C 373.951 203.047,374.024 203.527,374.111 202.825 C 374.198 202.123,374.196 201.068,374.107 200.481 C 374.018 199.894,373.947 200.469,373.949 201.758 M128.622 202.344 C 128.622 203.311,128.698 203.706,128.791 203.223 C 128.884 202.739,128.884 201.948,128.791 201.465 C 128.698 200.981,128.622 201.377,128.622 202.344 M271.192 202.539 C 271.197 203.398,271.277 203.704,271.370 203.218 C 271.463 202.732,271.460 202.029,271.362 201.656 C 271.264 201.282,271.188 201.680,271.192 202.539 M15.918 202.229 C 16.401 202.322,17.192 202.322,17.676 202.229 C 18.159 202.136,17.764 202.060,16.797 202.060 C 15.830 202.060,15.435 202.136,15.918 202.229 M268.450 203.125 C 268.450 203.877,268.530 204.185,268.629 203.809 C 268.727 203.433,268.727 202.817,268.629 202.441 C 268.530 202.065,268.450 202.373,268.450 203.125 M12.208 204.883 C 12.212 205.742,12.292 206.048,12.386 205.562 C 12.479 205.076,12.476 204.373,12.378 203.999 C 12.280 203.626,12.204 204.023,12.208 204.883 M113.372 205.078 C 113.372 205.830,113.452 206.138,113.551 205.762 C 113.649 205.386,113.649 204.771,113.551 204.395 C 113.452 204.019,113.372 204.326,113.372 205.078 M286.419 205.078 C 286.419 205.830,286.499 206.138,286.597 205.762 C 286.696 205.386,286.696 204.771,286.597 204.395 C 286.499 204.019,286.419 204.326,286.419 205.078 M35.410 207.685 C 35.657 207.863,35.948 208.447,36.058 208.984 C 36.229 209.825,36.248 209.802,36.195 208.819 C 36.160 208.175,35.877 207.609,35.547 207.520 C 35.155 207.415,35.110 207.469,35.410 207.685 M13.911 208.132 C 13.802 208.308,14.231 208.376,14.864 208.283 C 15.498 208.190,16.016 208.047,16.016 207.963 C 16.016 207.666,14.104 207.819,13.911 208.132 M30.176 210.426 C 30.552 210.524,31.167 210.524,31.543 210.426 C 31.919 210.327,31.611 210.247,30.859 210.247 C 30.107 210.247,29.800 210.327,30.176 210.426 M42.677 211.914 C 42.681 212.773,42.761 213.079,42.854 212.593 C 42.948 212.107,42.944 211.404,42.847 211.031 C 42.749 210.657,42.672 211.055,42.677 211.914 M357.122 211.719 C 357.122 212.471,357.202 212.778,357.301 212.402 C 357.399 212.026,357.399 211.411,357.301 211.035 C 357.202 210.659,357.122 210.967,357.122 211.719 M36.419 213.672 C 36.419 214.424,36.499 214.731,36.597 214.355 C 36.696 213.979,36.696 213.364,36.597 212.988 C 36.499 212.612,36.419 212.920,36.419 213.672 M363.372 213.672 C 363.372 214.424,363.452 214.731,363.551 214.355 C 363.649 213.979,363.649 213.364,363.551 212.988 C 363.452 212.612,363.372 212.920,363.372 213.672 M31.938 213.558 C 32.424 213.651,33.127 213.647,33.501 213.550 C 33.874 213.452,33.477 213.375,32.617 213.380 C 31.758 213.384,31.452 213.464,31.938 213.558 M27.051 213.941 C 27.427 214.039,28.042 214.039,28.418 213.941 C 28.794 213.843,28.486 213.763,27.734 213.763 C 26.982 213.763,26.675 213.843,27.051 213.941 M371.391 213.948 C 371.877 214.042,372.580 214.038,372.954 213.940 C 373.327 213.842,372.930 213.766,372.070 213.770 C 371.211 213.775,370.905 213.855,371.391 213.948 M376.469 214.339 C 376.955 214.432,377.658 214.429,378.032 214.331 C 378.405 214.233,378.008 214.157,377.148 214.161 C 376.289 214.165,375.983 214.245,376.469 214.339 M386.809 215.234 C 386.809 215.986,386.890 216.294,386.988 215.918 C 387.086 215.542,387.086 214.927,386.988 214.551 C 386.890 214.175,386.809 214.482,386.809 215.234 M381.941 214.736 C 382.643 214.823,383.697 214.821,384.284 214.732 C 384.871 214.643,384.297 214.572,383.008 214.574 C 381.719 214.576,381.238 214.649,381.941 214.736 M180.469 217.383 C 181.198 218.135,181.882 218.750,181.989 218.750 C 182.097 218.750,181.588 218.135,180.859 217.383 C 180.131 216.631,179.446 216.016,179.339 216.016 C 179.232 216.016,179.740 216.631,180.469 217.383 M35.621 217.039 C 35.983 217.147,36.369 217.532,36.477 217.895 C 36.620 218.373,36.652 218.341,36.594 217.778 C 36.547 217.323,36.193 216.968,35.738 216.921 C 35.174 216.864,35.142 216.896,35.621 217.039 M369.438 217.073 C 369.924 217.167,370.627 217.163,371.001 217.065 C 371.374 216.967,370.977 216.891,370.117 216.895 C 369.258 216.900,368.952 216.980,369.438 217.073 M374.516 217.464 C 375.002 217.557,375.705 217.554,376.079 217.456 C 376.452 217.358,376.055 217.282,375.195 217.286 C 374.336 217.290,374.030 217.370,374.516 217.464 M379.785 217.847 C 380.161 217.946,380.776 217.946,381.152 217.847 C 381.528 217.749,381.221 217.669,380.469 217.669 C 379.717 217.669,379.409 217.749,379.785 217.847 M13.372 220.313 C 13.372 221.064,13.452 221.372,13.551 220.996 C 13.649 220.620,13.649 220.005,13.551 219.629 C 13.452 219.253,13.372 219.561,13.372 220.313 M31.744 236.608 C 32.337 236.698,33.216 236.696,33.697 236.603 C 34.177 236.510,33.691 236.437,32.617 236.440 C 31.543 236.443,31.150 236.519,31.744 236.608 M20.483 241.113 L 19.336 242.383 20.605 241.236 C 21.304 240.604,21.875 240.033,21.875 239.966 C 21.875 239.664,21.553 239.930,20.483 241.113 M42.294 246.094 C 42.294 247.061,42.370 247.456,42.463 246.973 C 42.556 246.489,42.556 245.698,42.463 245.215 C 42.370 244.731,42.294 245.127,42.294 246.094 M151.172 246.680 C 152.339 247.861,153.382 248.828,153.489 248.828 C 153.596 248.828,152.729 247.861,151.563 246.680 C 150.396 245.498,149.353 244.531,149.245 244.531 C 149.138 244.531,150.005 245.498,151.172 246.680 M149.414 248.828 C 150.472 249.902,151.426 250.781,151.533 250.781 C 151.641 250.781,150.863 249.902,149.805 248.828 C 148.747 247.754,147.793 246.875,147.686 246.875 C 147.578 246.875,148.356 247.754,149.414 248.828 M25.494 253.015 C 26.087 253.104,26.966 253.102,27.447 253.009 C 27.927 252.917,27.441 252.843,26.367 252.846 C 25.293 252.849,24.900 252.925,25.494 253.015 M363.911 255.398 C 363.802 255.574,364.231 255.642,364.864 255.549 C 365.498 255.456,366.016 255.312,366.016 255.229 C 366.016 254.931,364.104 255.085,363.911 255.398 M371.723 261.257 C 371.615 261.433,372.044 261.501,372.677 261.408 C 373.310 261.315,373.828 261.172,373.828 261.088 C 373.828 260.791,371.917 260.944,371.723 261.257 M24.708 265.039 C 24.712 265.898,24.792 266.204,24.886 265.718 C 24.979 265.232,24.976 264.529,24.878 264.156 C 24.780 263.782,24.704 264.180,24.708 265.039 M192.676 266.676 C 193.052 266.774,193.667 266.774,194.043 266.676 C 194.419 266.577,194.111 266.497,193.359 266.497 C 192.607 266.497,192.300 266.577,192.676 266.676 M205.957 266.676 C 206.333 266.774,206.948 266.774,207.324 266.676 C 207.700 266.577,207.393 266.497,206.641 266.497 C 205.889 266.497,205.581 266.577,205.957 266.676 M198.926 267.077 C 199.517 267.166,200.483 267.166,201.074 267.077 C 201.665 266.987,201.182 266.914,200.000 266.914 C 198.818 266.914,198.335 266.987,198.926 267.077 M349.716 268.359 C 349.716 269.326,349.792 269.722,349.885 269.238 C 349.978 268.755,349.978 267.964,349.885 267.480 C 349.792 266.997,349.716 267.393,349.716 268.359 M193.066 269.410 C 193.442 269.508,194.058 269.508,194.434 269.410 C 194.810 269.312,194.502 269.231,193.750 269.231 C 192.998 269.231,192.690 269.312,193.066 269.410 M205.566 269.410 C 205.942 269.508,206.558 269.508,206.934 269.410 C 207.310 269.312,207.002 269.231,206.250 269.231 C 205.498 269.231,205.190 269.312,205.566 269.410 M197.168 282.321 C 198.726 282.395,201.274 282.395,202.832 282.321 C 204.390 282.247,203.115 282.186,200.000 282.186 C 196.885 282.186,195.610 282.247,197.168 282.321 M41.406 285.352 C 41.406 286.104,41.475 286.719,41.559 286.719 C 41.643 286.719,41.783 286.104,41.871 285.352 C 41.959 284.600,41.890 283.984,41.718 283.984 C 41.547 283.984,41.406 284.600,41.406 285.352 M197.559 285.055 C 198.901 285.131,201.099 285.131,202.441 285.055 C 203.784 284.979,202.686 284.916,200.000 284.916 C 197.314 284.916,196.216 284.979,197.559 285.055 M59.961 296.484 C 61.019 297.559,61.973 298.438,62.080 298.438 C 62.187 298.438,61.410 297.559,60.352 296.484 C 59.293 295.410,58.340 294.531,58.232 294.531 C 58.125 294.531,58.903 295.410,59.961 296.484 M57.513 299.609 C 57.513 300.361,57.593 300.669,57.691 300.293 C 57.789 299.917,57.789 299.302,57.691 298.926 C 57.593 298.550,57.513 298.857,57.513 299.609 M342.685 304.297 C 342.685 305.264,342.761 305.659,342.854 305.176 C 342.947 304.692,342.947 303.901,342.854 303.418 C 342.761 302.935,342.685 303.330,342.685 304.297 M81.641 304.419 C 81.641 304.486,82.212 305.058,82.910 305.689 L 84.180 306.836 83.032 305.566 C 81.963 304.383,81.641 304.117,81.641 304.419 M316.968 305.566 L 315.820 306.836 317.090 305.689 C 317.788 305.058,318.359 304.486,318.359 304.419 C 318.359 304.117,318.037 304.383,316.968 305.566 M88.477 311.719 C 89.535 312.793,90.488 313.672,90.596 313.672 C 90.703 313.672,89.925 312.793,88.867 311.719 C 87.809 310.645,86.856 309.766,86.748 309.766 C 86.641 309.766,87.418 310.645,88.477 311.719 M311.118 311.816 L 309.180 313.867 311.230 311.929 C 312.358 310.863,313.281 309.940,313.281 309.878 C 313.281 309.586,312.919 309.911,311.118 311.816 M323.608 311.035 L 322.461 312.305 323.730 311.157 C 324.914 310.088,325.180 309.766,324.878 309.766 C 324.811 309.766,324.239 310.337,323.608 311.035 M325.872 312.500 C 325.872 313.252,325.952 313.560,326.051 313.184 C 326.149 312.808,326.149 312.192,326.051 311.816 C 325.952 311.440,325.872 311.748,325.872 312.500 M68.493 314.648 C 68.495 316.367,68.563 317.022,68.646 316.103 C 68.728 315.184,68.727 313.778,68.643 312.978 C 68.559 312.178,68.492 312.930,68.493 314.648 M350.561 313.379 L 349.414 314.648 350.684 313.501 C 351.382 312.870,351.953 312.299,351.953 312.232 C 351.953 311.930,351.631 312.196,350.561 313.379 M325.893 315.820 C 325.896 316.895,325.972 317.288,326.062 316.694 C 326.151 316.100,326.149 315.221,326.056 314.741 C 325.964 314.260,325.890 314.746,325.893 315.820 M93.359 316.138 C 93.359 316.205,93.931 316.776,94.629 317.407 L 95.898 318.555 94.751 317.285 C 93.682 316.102,93.359 315.836,93.359 316.138 M305.249 317.285 L 304.102 318.555 305.371 317.407 C 306.069 316.776,306.641 316.205,306.641 316.138 C 306.641 315.836,306.318 316.102,305.249 317.285 M330.859 320.508 C 329.911 321.475,329.222 322.266,329.330 322.266 C 329.437 322.266,330.301 321.475,331.250 320.508 C 332.199 319.541,332.887 318.750,332.780 318.750 C 332.672 318.750,331.808 319.541,330.859 320.508 M333.955 320.215 L 333.008 321.289 334.180 320.313 C 334.824 319.775,335.425 319.292,335.514 319.238 C 335.604 319.185,335.503 319.141,335.289 319.141 C 335.076 319.141,334.476 319.624,333.955 320.215 M325.519 322.461 C 325.521 323.965,325.591 324.532,325.676 323.722 C 325.760 322.911,325.759 321.681,325.673 320.987 C 325.586 320.294,325.517 320.957,325.519 322.461 M68.164 323.047 C 69.003 323.906,69.778 324.609,69.885 324.609 C 69.993 324.609,69.394 323.906,68.555 323.047 C 67.716 322.188,66.941 321.484,66.834 321.484 C 66.726 321.484,67.325 322.188,68.164 323.047 M72.060 324.121 C 74.759 326.928,75.391 327.378,75.391 326.497 C 75.391 326.247,75.268 326.164,75.119 326.313 C 74.969 326.463,73.607 325.394,72.092 323.937 L 69.336 321.289 72.060 324.121 M329.298 325.194 C 328.795 325.730,328.456 326.234,328.547 326.314 C 328.637 326.394,329.120 325.955,329.620 325.339 C 330.738 323.960,330.541 323.871,329.298 325.194 M306.937 328.809 C 307.176 331.321,307.329 331.525,307.377 329.395 C 307.401 328.267,307.281 327.344,307.110 327.344 C 306.938 327.344,306.860 328.003,306.937 328.809 M296.875 334.961 C 295.926 335.928,295.238 336.719,295.345 336.719 C 295.453 336.719,296.317 335.928,297.266 334.961 C 298.214 333.994,298.903 333.203,298.795 333.203 C 298.688 333.203,297.824 333.994,296.875 334.961 M88.789 336.328 C 88.789 337.510,88.862 337.993,88.952 337.402 C 89.041 336.812,89.041 335.845,88.952 335.254 C 88.862 334.663,88.789 335.146,88.789 336.328 M321.001 338.167 C 321.487 338.260,322.190 338.257,322.563 338.159 C 322.937 338.061,322.539 337.985,321.680 337.989 C 320.820 337.993,320.515 338.073,321.001 338.167 M78.032 339.339 C 78.518 339.432,79.221 339.429,79.594 339.331 C 79.968 339.233,79.570 339.157,78.711 339.161 C 77.852 339.165,77.546 339.245,78.032 339.339 M306.640 345.020 C 306.640 345.181,308.530 345.283,310.840 345.247 C 315.105 345.180,314.597 345.026,309.472 344.833 C 307.914 344.775,306.639 344.858,306.640 345.020 M322.363 345.191 C 322.739 345.289,323.354 345.289,323.730 345.191 C 324.106 345.093,323.799 345.013,323.047 345.013 C 322.295 345.013,321.987 345.093,322.363 345.191 M93.547 345.690 C 93.690 345.922,92.080 346.116,89.371 346.193 L 84.961 346.317 89.794 346.401 C 94.051 346.474,94.569 346.415,94.141 345.898 C 93.600 345.247,93.182 345.101,93.547 345.690 M78.032 346.370 C 78.518 346.463,79.221 346.460,79.594 346.362 C 79.968 346.264,79.570 346.188,78.711 346.192 C 77.852 346.197,77.546 346.277,78.032 346.370 M320.682 349.512 L 319.336 350.977 320.801 349.630 C 322.164 348.377,322.445 348.047,322.147 348.047 C 322.082 348.047,321.422 348.706,320.682 349.512 M296.973 356.519 C 297.349 356.618,297.964 356.618,298.340 356.519 C 298.716 356.421,298.408 356.341,297.656 356.341 C 296.904 356.341,296.597 356.421,296.973 356.519 M187.407 357.308 C 187.893 357.401,188.596 357.397,188.969 357.300 C 189.343 357.202,188.945 357.125,188.086 357.130 C 187.227 357.134,186.921 357.214,187.407 357.308 M211.235 357.308 C 211.721 357.401,212.424 357.397,212.798 357.300 C 213.171 357.202,212.773 357.125,211.914 357.130 C 211.055 357.134,210.749 357.214,211.235 357.308 M196.387 357.713 C 198.374 357.784,201.626 357.784,203.613 357.713 C 205.601 357.642,203.975 357.584,200.000 357.584 C 196.025 357.584,194.399 357.642,196.387 357.713 M286.626 361.214 C 287.112 361.307,287.815 361.304,288.188 361.206 C 288.562 361.108,288.164 361.032,287.305 361.036 C 286.445 361.040,286.140 361.120,286.626 361.214 M113.770 362.379 C 114.146 362.477,114.761 362.477,115.137 362.379 C 115.513 362.280,115.205 362.200,114.453 362.200 C 113.701 362.200,113.394 362.280,113.770 362.379 M186.816 367.457 C 187.192 367.555,187.808 367.555,188.184 367.457 C 188.560 367.359,188.252 367.278,187.500 367.278 C 186.748 367.278,186.440 367.359,186.816 367.457 M195.815 375.195 C 195.818 376.270,195.894 376.663,195.983 376.069 C 196.073 375.475,196.071 374.596,195.978 374.116 C 195.885 373.635,195.812 374.121,195.815 375.195 M202.863 377.539 C 202.864 379.043,202.935 379.610,203.019 378.800 C 203.104 377.989,203.103 376.759,203.016 376.066 C 202.930 375.372,202.861 376.035,202.863 377.539 M211.809 377.734 C 211.809 378.486,211.890 378.794,211.988 378.418 C 212.086 378.042,212.086 377.427,211.988 377.051 C 211.890 376.675,211.809 376.982,211.809 377.734 M215.753 379.492 C 215.755 380.996,215.826 381.563,215.910 380.753 C 215.995 379.943,215.993 378.712,215.907 378.019 C 215.821 377.325,215.751 377.988,215.753 379.492 M184.869 381.530 C 185.462 381.620,186.341 381.618,186.822 381.525 C 187.302 381.432,186.816 381.359,185.742 381.362 C 184.668 381.365,184.275 381.441,184.869 381.530 M182.129 389.722 C 182.505 389.821,183.120 389.821,183.496 389.722 C 183.872 389.624,183.564 389.544,182.813 389.544 C 182.061 389.544,181.753 389.624,182.129 389.722 \" stroke=\"none\" fill=\"#c99393\" fill-rule=\"evenodd\"></path></g></svg>\r\n    <h1 class=\"text-white text-7xl font-light place-self-center\"><span class=\"text-yellow-400 font-medium\">.</span>dotSystems</h1>\r\n  </div>\r\n{/if}\r\n<main out:fade={{duration: 250}} class=\"w-screen h-screen overflow-auto fixed top-0 left-0\">\r\n  <img src=\"./src/xb0W4mv.jpg\" alt=\"bg\" class=\"w-screen h-screen object-cover\">\r\n  <div class=\"fixed right-0 top-0 p-4 h-screen w-5/12 max-w-xl bg-red-800 flex flex-col justify-center items-center\" style=\"-webkit-app-region: drag\">\r\n    <h1 class=\"text-center text-white text-5xl font-light\"><span class=\"text-yellow-400 font-medium\">.</span>welcome</h1>\r\n    <p class=\"mt-2 mb-10 text-lg text-center text-white\">To confirm it is you, please enter your password.</p>\r\n    <p class=\"text-center h-10 text-white flex flex-col justify-end\">{message}</p>\r\n    <input disabled={formDisabled} bind:value={password} type=\"password\" class=\"rounded-md w-full font-light p-2 px-4 m-4 mt-1\">\r\n    <button disabled={formDisabled} on:click={checkPassword} class=\"rounded-full w-4/6 m-1 text-white text-light hover:bg-yellow-400 disabled:active:hover:drop-shadow-md active:bg-yellow-500 disabled:bg-yellow-600\" tabindex=\"0\">Login</button>\r\n    <button disabled={formDisabled} on:click={() => {$resetPasswordWindowStatus = true}} class=\"rounded-full w-4/6 m-1 text-white text-light hover:bg-yellow-400 active:hover:drop-shadow-md disabled:active:bg-yellow-500 disabled:bg-yellow-600\">Reset</button>\r\n  </div>\r\n</main>\r\n\r\n<style>\r\n  button, input {\r\n    -webkit-app-region: no-drag;\r\n  }\r\n</style>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { selectedData, editWindowStatus, deleteWindowScheduleStatus, deleteWindowStatus,tbdData } from \"../../stores/ui\";\r\n  import { onMount, onDestroy } from \"svelte\";\r\n  let roomSchedule, daySelected = -1, scheduleExist = false;\r\n  let mondaySchedule = [], tuesdaySchedule = [], wednesdaySchedule = [], thursdaySchedule = [], fridaySchedule = [], saturdaySchedule = [], sundaySchedule = [];\r\n\r\n  let editSelected = () => {\r\n    console.log($selectedData);\r\n    editWindowStatus.set(true);\r\n  }\r\n  let tbdSelected = (tbd) => {\r\n    tbdData.set(tbd);\r\n    deleteWindowScheduleStatus.set(true);\r\n  }\r\n  let exportExcel = () => {\r\n    ipcRenderer.send(\"export-to-excel-room\", $selectedData);\r\n  }\r\n\r\n  onMount(() => {\r\n    console.log(\"Mounted\");\r\n    console.log($selectedData._id);\r\n    ipcRenderer.send(\"retrieve-schedule-room-data\", $selectedData._id);\r\n  });\r\n  onDestroy(() => {\r\n    console.log(\"Destroyed\");\r\n    ipcRenderer.removeAllListeners(\"retrieve-schedule-room-data\");\r\n  })\r\n\r\n  ipcRenderer.on(\"retrieve-schedule-room-data\", (event, res) => {\r\n    let temporaryContainer = res;\r\n    temporaryContainer.forEach(temporaryTime => {\r\n      if (temporaryTime.time.start.hours >= 13) {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.start.hours % 12 == 0) {\r\n        temporaryTime.time.start.hours = 12;\r\n        if (temporaryTime.time.start.hours == 12) {\r\n          temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n        } else temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n\r\n      if (temporaryTime.time.end.hours >= 13) {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.end.hours % 12 == 0) {\r\n        temporaryTime.time.end.hours = 12;\r\n        if (temporaryTime.time.end.hours == 12) {\r\n          temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n        } else temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n    });\r\n\r\n    temporaryContainer.forEach((daySort) => {\r\n      switch (daySort.day) {\r\n        case 0:\r\n          mondaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n        case 1:\r\n          tuesdaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n        case 2:\r\n          wednesdaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n        case 3:\r\n          thursdaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n        case 4:\r\n          fridaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n        case 5:\r\n          saturdaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n        case 6:\r\n          sundaySchedule.push(daySort);\r\n          scheduleExist = true;\r\n          break;\r\n      }\r\n    })\r\n\r\n    roomSchedule = [...mondaySchedule, ...tuesdaySchedule, ...wednesdaySchedule, ...thursdaySchedule, ...fridaySchedule,  ...saturdaySchedule, ...sundaySchedule];\r\n    console.log(roomSchedule)\r\n  })\r\n\r\n  $: switch (daySelected) {\r\n    case -1:\r\n      roomSchedule = [...mondaySchedule, ...tuesdaySchedule, ...wednesdaySchedule, ...thursdaySchedule, ...fridaySchedule,  ...saturdaySchedule, ...sundaySchedule];\r\n      break;\r\n    case 0:\r\n      roomSchedule = mondaySchedule;\r\n      break;\r\n    case 1:\r\n      roomSchedule = tuesdaySchedule\r\n      break;\r\n    case 2:\r\n      roomSchedule = wednesdaySchedule;\r\n      break;\r\n    case 3:\r\n      roomSchedule = thursdaySchedule;\r\n      break;\r\n    case 4:\r\n      roomSchedule = fridaySchedule;\r\n      break;\r\n    case 5:\r\n      roomSchedule = saturdaySchedule;\r\n      break;\r\n    case 6:\r\n      roomSchedule = sundaySchedule;\r\n      break;\r\n  }\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>{$selectedData.name}</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col\">\r\n  <div class=\"h-auto w-full bg-gray-200 rounded-md drop-shadow-md flex flex-col justify-end items-end\">\r\n    <div class=\"h-52 w-full p-4 flex flex-col justify-end hero\">\r\n      <h1 class=\"py-2 -my-2 text-4xl font-light whitespace-nowrap overflow-hidden text-ellipsis\" title={$selectedData.name}>{$selectedData.name}</h1>\r\n    </div>\r\n    <nav class=\"grid grid-flow-col w-full self-center bg-gray-300\">\r\n      <button on:click={() => { window.print() }} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Print</button>\r\n      <button on:click={exportExcel} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Export</button>\r\n      <button on:click={editSelected} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Edit</button>\r\n      <button on:click={() => $deleteWindowStatus = true} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Delete</button>\r\n    </nav>\r\n  </div>\r\n\r\n  {#if scheduleExist}\r\n    <div class=\"w-full p-8 pb-3 max-w-screen-lg flex flex-row justify-evenly self-center day-navigation\">\r\n      <button on:click={() => daySelected = -1} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != -1} class:bg-yellow-400={daySelected == -1}>All</button>\r\n      <button on:click={() => daySelected = 6} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 6} class:bg-yellow-400={daySelected == 6}>Sunday</button>\r\n      <button on:click={() => daySelected = 0} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 0} class:bg-yellow-400={daySelected == 0}>Monday</button>\r\n      <button on:click={() => daySelected = 1} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 1} class:bg-yellow-400={daySelected == 1}>Tuesday</button>\r\n      <button on:click={() => daySelected = 2} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 2} class:bg-yellow-400={daySelected == 2}>Wednesday</button>\r\n      <button on:click={() => daySelected = 3} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 3} class:bg-yellow-400={daySelected == 3}>Thursday</button>\r\n      <button on:click={() => daySelected = 4} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 4} class:bg-yellow-400={daySelected == 4}>Friday</button>\r\n      <button on:click={() => daySelected = 5} class=\"w-full p-1 mx-2 rounded-full drop-shadow-md text-white\" class:bg-red-800={daySelected != 5} class:bg-yellow-400={daySelected == 5}>Saturday</button>\r\n    </div>\r\n    {#if roomSchedule.length != 0}\r\n      <div class=\"w-full p-8 pt-0 flex flex-col justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen-xl drop-shadow-md justify-self-center self-center\">\r\n          <tr>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">A.Y.</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Semester</th>\r\n            {#if daySelected == -1}\r\n              <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Day</th>\r\n            {/if}\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Time</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course Code</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Professor</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Program</th>\r\n          </tr>\r\n          {#each roomSchedule as schedule (schedule._id)}\r\n            <tr on:click={() => tbdSelected(schedule)}>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.year} - {parseInt(schedule.school.year) + 1}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.semester == 0 ? \"1st Sem\" : schedule.school.semester == 1 ? \"2nd Sem\" : \"Summer\"}</td>\r\n              {#if daySelected == -1}\r\n                <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.day == 0 ? \"Monday\" : schedule.day == 1 ? \"Tuesday\" : schedule.day == 2 ? \"Wednesday\" : schedule.day == 3 ? \"Thursday\" : schedule.day == 4 ? \"Friday\" : schedule.day == 5 ? \"Saturday\" : \"Sunday\"}</td>\r\n              {/if}\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.start.hours}:{schedule.time.start.minutes} - {schedule.time.end.hours}:{schedule.time.end.minutes}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.name}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.courseData.name}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.professorData.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {schedule.professorData.name.last}, {schedule.professorData.name.first}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.programData.acronym} {schedule.programData.year} - {schedule.programData.section}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n  {:else}\r\n    <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n      <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n    </div>\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  tr:nth-child(even) {\r\n    background-color: rgb(229 231 235);\r\n  }\r\n  tr:nth-child(odd) {\r\n    background-color: white;\r\n  }\r\n  tr:hover {\r\n    background-color: rgb(156 163 175);\r\n    color: white\r\n  }\r\n\r\n  @media print {\r\n    tr, th, td {\r\n      background-color: white;\r\n      color: black;\r\n    }\r\n    div {\r\n      filter: none;\r\n    }\r\n    nav {\r\n      color: transparent\r\n    }\r\n    table {\r\n      filter: none;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n    .table-container {\r\n      width: 100%;\r\n      margin-top: -10px;\r\n      padding: 0;\r\n      padding-bottom: 10px;\r\n    }\r\n    .hero {\r\n      width: 75%;\r\n      height: 128px;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n      align-self: flex-start;\r\n    }\r\n    .day-navigation {\r\n      display: none;\r\n    }\r\n  }\r\n</style>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import 'material-icons/iconfont/material-icons.css';\r\n  import { selectedData, editWindowStatus, deleteWindowScheduleStatus, deleteWindowStatus, courseData, roomData, programData, tbdData , settingsData } from \"../../stores/ui\";\r\n  import { onMount, onDestroy } from \"svelte\";\r\n  let professorSchedules, remainingLoad = 0;\r\n  \r\n  let courseOrder = 0;\r\n\r\n  let filterSubjectsData = (course_filter = 0) => {\r\n    if(course_filter == courseOrder) course_filter = 0;\r\n    courseOrder = course_filter;\r\n    ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id , courseOrder);\r\n  };\r\n\r\n  let editSelected = () => {\r\n    editWindowStatus.set(true);\r\n  }\r\n\r\n  let tbdSelected = (tbd) => {\r\n    tbdData.set(tbd);\r\n    deleteWindowScheduleStatus.set(true);\r\n  }\r\n\r\n  let exportExcel = () => {\r\n    ipcRenderer.send(\"export-to-excel\", $selectedData);\r\n  }\r\n\r\n  ipcRenderer.on(\"retrieve-settings-data\", (event, res) => {\r\n    console.log(res)\r\n    $settingsData.uid = res[0].uid;\r\n    $settingsData.schoolYear = res[0].schoolYear;\r\n    $settingsData.schoolSemester = res[0].schoolSemester;\r\n    $settingsData.systemPassword = res[0].systemPassword;\r\n    ipcRenderer.removeAllListeners(\"retrieve-settings-data\");\r\n  });\r\n\r\n  onMount(() => {\r\n    console.log($selectedData._id);\r\n    ipcRenderer.send(\"retrieve-settings-data\");\r\n    ipcRenderer.send(\"retrieve-course-data\");\r\n    ipcRenderer.send(\"retrieve-room-data\");\r\n    ipcRenderer.send(\"retrieve-program-data\");\r\n    ipcRenderer.send(\"retrieve-schedule-professor-data\", $selectedData._id);\r\n  });\r\n  \r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"retrieve-course-data\");\r\n    ipcRenderer.removeAllListeners(\"retrieve-room-data\");\r\n    ipcRenderer.removeAllListeners(\"retrieve-program-data\");\r\n    ipcRenderer.removeAllListeners(\"retrieve-schedule-professor-data\");\r\n  })\r\n\r\n  ipcRenderer.on(\"retrieve-course-data\", (event, res) => $courseData = res);\r\n  ipcRenderer.on(\"retrieve-room-data\", (event, res) => $roomData = res);\r\n  ipcRenderer.on(\"retrieve-program-data\", (event, res) => $programData = res);\r\n  ipcRenderer.on(\"retrieve-schedule-professor-data\", (event, res) => {\r\n    let temporaryContainer = res;\r\n    temporaryContainer.forEach(temporaryTime => {\r\n      if (temporaryTime.time.start.hours >= 13) {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.start.hours % 12 == 0) {\r\n        temporaryTime.time.start.hours = 12;\r\n        if (temporaryTime.time.start.hours == 12) {\r\n          temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n        } else temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n\r\n      if (temporaryTime.time.end.hours >= 13) {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.end.hours % 12 == 0) {\r\n        temporaryTime.time.end.hours = 12;\r\n        if (temporaryTime.time.end.hours == 12) {\r\n          temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n        } else temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n    });\r\n\r\n    remainingLoad = 0;\r\n    res.forEach((time) => {\r\n      remainingLoad = remainingLoad + time.courseData.hours\r\n    });\r\n\r\n    professorSchedules = temporaryContainer;\r\n  });\r\n\r\n\r\n  import { sideMenuStatus, viewComponentValue } from \"../../stores/ui\";\r\n  import { fade, fly } from \"svelte/transition\";\r\n\r\n  let viewComponentValueChange = (i) => {\r\n    viewComponentValue.set(i);\r\n  };\r\n\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>{$selectedData.name.last}, {$selectedData.name.first}</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col items-center\">\r\n  <div class=\"h-auto w-full bg-gray-200 rounded-md drop-shadow-md flex flex-col justify-end items-end\">\r\n    <div class=\"h-52 w-full p-4 flex flex-col justify-end hero\">\r\n      <h1 class=\"py-2 -my-2 text-4xl font-light whitespace-nowrap overflow-hidden text-ellipsis\" title=\"{$selectedData.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {$selectedData.name.last}, {$selectedData.name.first}\">{$selectedData.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {$selectedData.name.last}, {$selectedData.name.first}</h1>\r\n      <h2 class=\"text-gray-700 w-full whitespace-nowrap overflow-hidden text-ellipsis\" title={$selectedData.address}>{$selectedData.address}</h2>\r\n      <h3 class=\"mb-2 text-gray-700\">Faculty ID : {$selectedData.id} | Employment : {$selectedData.employment.status} | Contact: {$selectedData.contact} | Email: {$selectedData.email} | Load: {$selectedData.employment.hours} | Remaining: {$selectedData.employment.hours - remainingLoad} \r\n      </h3>\r\n      <h3>\r\n        Status :\r\n        { \r\n          $selectedData.status == \"REGULAR\" ? \"Regular\" :\r\n          $selectedData.status == \"PART TIME\" ? \"Part Time\" :\r\n          $selectedData.status == \"TEMPORARY\" ? \"Temporary\" :\r\n          \"\"\r\n        }\r\n      </h3>\r\n    </div>\r\n    <nav class=\"grid grid-flow-col w-full self-center bg-gray-300\">\r\n      {#if $selectedData.employment.status == \"Full-Time\"}\r\n        <button on:click={() => viewComponentValueChange(8)}>Manage Advise Time</button>\r\n      {/if}      \r\n      <button on:click={() => window.print()} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Print</button>\r\n      <button on:click={exportExcel} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Export</button>\r\n      <button on:click={editSelected} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Edit</button>\r\n      <button on:click={() => $deleteWindowStatus = true} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Delete</button>\r\n    </nav>\r\n  </div>\r\n\r\n  <div class=\"w-full p-12 flex justify-center pb-10 table-container\" style=\"padding-top:15px\"> A.Y. {$settingsData.schoolYear} - {parseInt($settingsData.schoolYear) + 1} {$settingsData.schoolSemester == 0 ? \"1st Sem\" : $settingsData.schoolSemester == 1 ? \"2nd Sem\" : \"Summer\"}</div>\r\n\r\n  {#if professorSchedules}\r\n    {#if professorSchedules.length != 0}\r\n      <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen drop-shadow-md\">\r\n          <tr>\r\n            <!-- <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">A.Y.</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Semester</th> -->\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Type</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Day</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Time</th>\r\n            <!-- <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course Code</th> -->\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">\r\n                <span style=\"float:left\">\r\n                    Course\r\n                </span>\r\n                \r\n                <button on:click={() => filterSubjectsData(-1)} style=\"float:right\" class=\"border-none px-1 drop-shadow-md font-light bg-red-800 active:bg-red-900 hover:bg-red-700 active:text-white\"><span class=\"border-none material-icons\">↑</span></button>\r\n                <button on:click={() => filterSubjectsData(1)} style=\"float:right\" class=\"border-none px-1 drop-shadow-md font-light bg-red-800 active:bg-red-900 hover:bg-red-700 active:text-white\"><span class=\"border-none material-icons\">↓</span></button>\r\n            </th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Program</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Room</th>\r\n          </tr>\r\n          {#each professorSchedules as schedule (schedule._id)}\r\n            <tr on:click={() => tbdSelected(schedule)}>\r\n              <!-- <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.year} - {parseInt(schedule.school.year) + 1}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.semester == 0 ? \"1st Sem\" : schedule.school.semester == 1 ? \"2nd Sem\" : \"Summer\"}</td> -->\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.type == \"REGULAR\" ? \"Regular\" :\r\n                  schedule.type == \"SUBSTITUTE\" ? \"Substitute\" :\r\n                  schedule.type == \"TEMPORARY SUBSTITUTE\" ? \"Temporary Substitute\" :\r\n                  schedule.type == \"PART TIME\" ? \"Part Time\" :\r\n                  \"\"\r\n                }\r\n              </td>              \r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.day == 0 ? \"Monday\" :\r\n                  schedule.day == 1 ? \"Tuesday\" :\r\n                  schedule.day == 2 ? \"Wednesday\" :\r\n                  schedule.day == 3 ? \"Thursday\" :\r\n                  schedule.day == 4 ? \"Friday\" :\r\n                  schedule.day == 5 ? \"Saturday\" :\r\n                  \"Sunday\"\r\n                  \r\n                }\r\n               \r\n              </td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.start.hours}:{schedule.time.start.minutes} - {schedule.time.end.hours}:{schedule.time.end.minutes}</td>\r\n              <!-- <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.name}</td> -->\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.courseData.name}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.programData.acronym} {schedule.programData.year} - {schedule.programData.section}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.roomData.name}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n  {/if}\r\n\r\n<!-- {#if $selectedData.employment.status == \"Full-Time\"}\r\n    Advising Time List\r\n    <nav class=\"grid grid-flow-col w-full self-center bg-gray-300\">\r\n      <button on:click={editSelected} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Edit</button>\r\n    </nav>\r\n      {#if $selectedData.advisingTime && $selectedData.advisingTime.schedules.length != 0}\r\n      <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen drop-shadow-md\">\r\n          <tr>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Day</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Start</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">End</th>\r\n          </tr>\r\n          {#each $selectedData.advisingTime.schedules as schedule (schedule._id)}\r\n            <tr>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.day == 0 ? \"Monday\" :\r\n                  schedule.day == 1 ? \"Tuesday\" :\r\n                  schedule.day == 2 ? \"Wednesday\" :\r\n                  schedule.day == 3 ? \"Thursday\" :\r\n                  schedule.day == 4 ? \"Friday\" :\r\n                  schedule.day == 5 ? \"Saturday\" :\r\n                  \"Sunday\"\r\n                }\r\n              </td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.start.hours}:{schedule.time.start.minutes}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.end.hours}:{schedule.time.end.minutes}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n{/if} -->\r\n</div>\r\n\r\n<style>\r\n  tr:nth-child(even) {\r\n    background-color: rgb(229 231 235);\r\n  }\r\n  tr:nth-child(odd) {\r\n    background-color: white;\r\n  }\r\n  tr:hover {\r\n    background-color: rgb(156 163 175);\r\n    color: white\r\n  }\r\n\r\n  @media print {\r\n    tr, th, td {\r\n      background-color: white;\r\n      color: black;\r\n    }\r\n    div {\r\n      filter: none;\r\n    }\r\n    nav {\r\n      color: transparent\r\n    }\r\n    table {\r\n      filter: none;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n    .table-container {\r\n      width: 100%;\r\n      margin-top: -10px;\r\n      padding: 0;\r\n      padding-bottom: 10px;\r\n    }\r\n    .hero {\r\n      height: auto;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n    }\r\n  }\r\n</style>","<script>\r\n  const { ipcRenderer } = require(\"electron\");\r\n  import { selectedData, editWindowStatus, deleteWindowScheduleStatus, deleteWindowStatus, tbdData } from \"../../stores/ui\";\r\n  import { onMount, onDestroy } from \"svelte\";\r\n  let programSchedule;\r\n\r\n  let editSelected = () => {\r\n    console.log($selectedData);\r\n    editWindowStatus.set(true);\r\n  }\r\n  let tbdSelected = (tbd) => {\r\n    tbdData.set(tbd);\r\n    deleteWindowScheduleStatus.set(true);\r\n  }\r\n  let exportExcel = () => {\r\n    ipcRenderer.send(\"export-to-excel-program\", $selectedData);\r\n  }\r\n\r\n  onMount(() => {\r\n    console.log(\"Mounted\");\r\n    console.log($selectedData._id);\r\n    ipcRenderer.send(\"retrieve-schedule-program-data\", $selectedData._id);\r\n  })\r\n  onDestroy(() => {\r\n    ipcRenderer.removeAllListeners(\"retrieve-schedule-program-data\");\r\n  })\r\n\r\n  ipcRenderer.on(\"retrieve-schedule-program-data\", (event, res) => {\r\n    let temporaryContainer = res;\r\n    temporaryContainer.forEach(temporaryTime => {\r\n      if (temporaryTime.time.start.hours >= 13) {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.start.hours % 12 == 0) {\r\n        temporaryTime.time.start.hours = 12;\r\n        if (temporaryTime.time.start.hours == 12) {\r\n          temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n        } else temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n\r\n      if (temporaryTime.time.end.hours >= 13) {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.end.hours % 12 == 0) {\r\n        temporaryTime.time.end.hours = 12;\r\n        if (temporaryTime.time.end.hours == 12) {\r\n          temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n        } else temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n    });\r\n\r\n    programSchedule = temporaryContainer;\r\n  });\r\n</script>\r\n\r\n<svelte:head>\r\n  <title>{$selectedData.name} {$selectedData.year}-{$selectedData.section}</title>\r\n</svelte:head>\r\n\r\n<div class=\"overflow-auto w-full h-full flex flex-col\">\r\n  <div class=\"h-auto w-full bg-gray-200 rounded-md drop-shadow-md flex flex-col justify-end items-end\">\r\n    <div class=\"h-52 w-full p-4 flex flex-col justify-end hero\">\r\n      <h1 class=\"py-2 -my-2 text-4xl font-light whitespace-nowrap overflow-hidden text-ellipsis\" title={$selectedData.name}>{$selectedData.name}</h1>\r\n      <h3 class=\"mb-2 text-gray-700\">{$selectedData.acronym} | Year: {$selectedData.year} | Section: {$selectedData.section}</h3>\r\n    </div>\r\n    <nav class=\"grid grid-flow-col w-full self-center bg-gray-300\">\r\n      <button on:click={() => window.print()} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Print</button>\r\n      <button on:click={exportExcel} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Export</button>\r\n      <button on:click={editSelected} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Edit</button>\r\n      <button on:click={() => $deleteWindowStatus = true} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Delete</button>\r\n    </nav>\r\n  </div>\r\n\r\n  {#if programSchedule}\r\n    {#if programSchedule.length != 0}\r\n      <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen-xl drop-shadow-md\">\r\n          <tr>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">A.Y.</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Semester</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Day</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Time</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course Code</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Professor</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Room</th>\r\n          </tr>\r\n          {#each programSchedule as schedule (schedule._id)}\r\n            <tr on:click={() => tbdSelected(schedule)}>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.year} - {parseInt(schedule.school.year) + 1}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.semester == 0 ? \"1st Sem\" : schedule.school.semester == 1 ? \"2nd Sem\" : \"Summer\"}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.day == 0 ? \"Monday\" :\r\n                  schedule.day == 1 ? \"Tuesday\" :\r\n                  schedule.day == 2 ? \"Wednesday\" :\r\n                  schedule.day == 3 ? \"Thursday\" :\r\n                  schedule.day == 4 ? \"Friday\" :\r\n                  schedule.day == 5 ? \"Saturday\" :\r\n                  \"Sunday\"\r\n                }\r\n              </td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.start.hours}:{schedule.time.start.minutes} - {schedule.time.end.hours}:{schedule.time.end.minutes}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.name}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.courseData.name}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.professorData.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {schedule.professorData.name.last}, {schedule.professorData.name.first}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.roomData.name}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n  {/if}\r\n</div>\r\n\r\n<style>\r\n  tr:nth-child(even) {\r\n    background-color: rgb(229 231 235);\r\n  }\r\n  tr:nth-child(odd) {\r\n    background-color: white;\r\n  }\r\n  tr:hover {\r\n    background-color: rgb(156 163 175);\r\n    color: white\r\n  }\r\n\r\n  @media print {\r\n    tr, th, td {\r\n      background-color: white;\r\n      color: black;\r\n    }\r\n    div {\r\n      filter: none;\r\n    }\r\n    nav {\r\n      color: transparent\r\n    }\r\n    table {\r\n      filter: none;\r\n      margin: 0;\r\n      padding: 0;\r\n    }\r\n    .table-container {\r\n      width: 100%;\r\n      margin-top: -10px;\r\n      padding: 0;\r\n      padding-bottom: 10px;\r\n    }\r\n    .hero {\r\n      width: 75%;\r\n      height: 128px;\r\n      padding-left: 0;\r\n      padding-right: 0;\r\n      align-self: flex-start;\r\n    }\r\n  }\r\n</style>","<script>\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import 'material-icons/iconfont/material-icons.css';\r\n    import { selectedData, editWindowStatus, deleteWindowScheduleStatus, deleteWindowStatus, courseData, roomData, programData, tbdData } from \"../../stores/ui\";\r\n    import { onMount, onDestroy } from \"svelte\";\r\n    let professorSchedules, remainingLoad = 0;\r\n    \r\n    let courseOrder = 0;\r\n  \r\n    let exportExcel = () => {\r\n      ipcRenderer.send(\"export-to-excel\", $selectedData);\r\n    }\r\n  \r\n    onMount(() => {\r\n      console.log(\"Mounted\");\r\n      console.log($selectedData._id);\r\n      ipcRenderer.send(\"retrieve-professor-data-advisetime\", $selectedData._id);\r\n    });\r\n    onDestroy(() => {\r\n      console.log(\"Destroyed\");\r\n      ipcRenderer.removeAllListeners(\"retrieve-professor-data-advisetime\");\r\n      ipcRenderer.removeAllListeners(\"save-data-professor-advisetime\");\r\n    })\r\n  \r\n    // ipcRenderer.on(\"retrieve-professor-data-advisetime\" , $selectedData._id, (event, res) => {\r\n    ipcRenderer.on(\"retrieve-professor-data-advisetime\", (event, res) => {\r\n      console.log('retrieve-professor-data-advisetime');\r\n      console.log(res);\r\n      $selectedData = res[0];\r\n      console.log(professorData);\r\n    });\r\n\r\n    ipcRenderer.on(\"save-data-professor-advisetime\", (event, status) => {\r\n      setTimeout(() => {\r\n        if (status.success == true) {\r\n          ipcRenderer.send(\"retrieve-professor-data-advisetime\" , $selectedData._id);\r\n          $selectedData.advisingTime = status.data;\r\n        }        \r\n\r\n        message = status.message;\r\n        windowDisabled = false;\r\n      }, 2000);\r\n    }) \r\n\r\n    // let deleteSelected = () => {\r\n    //   console.log('deleteSelected');\r\n    //   // console.log(tbd);\r\n    //   // tbdData.set(tbd);\r\n    //   // deleteWindowScheduleStatus.set(true);\r\n    //   scheduleData = tbd;\r\n    //   scheduleData.type = 'delete';\r\n    //   ipcRenderer.send(\"save-data-professor-advisetime\", scheduleData);\r\n    // }\r\n\r\n    // let editSelected = (tbd) => {\r\n    //   // console.log($selectedData);\r\n    //   $tbd.day = tbd.day;\r\n    //   $tbd.time.start.hours = tbd.time.start.hours;\r\n    //   $tbd.time.start.minutes = tbd.time.start.minutes;\r\n    //   $tbd.time.end.hours = tbd.time.end.hours;\r\n    //   $tbd.time.end.minutes = tbd.time.end.minutes;\r\n\r\n    //   tbdData.set(tbd);\r\n    //   editWindowStatus.set(true);\r\n    // }\r\n\r\n    let tbdSelected = (tbd) => {\r\n      console.log('deleteSelected');\r\n      console.log(tbd);\r\n\r\n      $selectedData.day = tbd.day;\r\n      tbdData.set(tbd);\r\n      deleteWindowStatus.set(true);\r\n    }\r\n\r\n    import { viewComponentValue, addWindowStatus } from \"../../stores/ui\";\r\n    import { fly } from \"svelte/transition\";\r\n\r\n    let addWindowStatusChange = () => addWindowStatus.set(!$addWindowStatus);\r\n  </script>\r\n  \r\n  <svelte:head>\r\n    <title>{$selectedData.name.last}, {$selectedData.name.first} Advising Time</title>\r\n  </svelte:head>\r\n  \r\n  <div class=\"overflow-auto w-full h-full flex flex-col items-center\">\r\n    <div class=\"h-auto w-full bg-gray-200 rounded-md drop-shadow-md flex flex-col justify-end items-end\">\r\n      <div class=\"h-52 w-full p-4 flex flex-col justify-end hero\">\r\n        <h1 class=\"py-2 -my-2 text-4xl font-light whitespace-nowrap overflow-hidden text-ellipsis\" title=\"{$selectedData.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {$selectedData.name.last}, {$selectedData.name.first}\">{$selectedData.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {$selectedData.name.last}, {$selectedData.name.first}</h1>\r\n        <h2 class=\"text-gray-700 w-full whitespace-nowrap overflow-hidden text-ellipsis\" title={$selectedData.address}>{$selectedData.address}</h2>\r\n        <h3 class=\"mb-2 text-gray-700\">Employment : {$selectedData.employment.status} | Contact: {$selectedData.contact} | Load: {$selectedData.employment.hours} | Remaining: {$selectedData.employment.hours - remainingLoad} \r\n        </h3>\r\n        <h3>\r\n          Status :\r\n          { \r\n            $selectedData.status == \"REGULAR\" ? \"Regular\" :\r\n            $selectedData.status == \"PART TIME\" ? \"Part Time\" :\r\n            $selectedData.status == \"TEMPORARY\" ? \"Temporary\" :\r\n            \"\"\r\n          }\r\n        </h3>\r\n      </div>\r\n      <nav class=\"grid grid-flow-col w-full self-center bg-gray-300\">\r\n        <button on:click={addWindowStatusChange} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Add</button>\r\n        <button on:click={() => window.print()} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Print</button>\r\n        <button on:click={exportExcel} class=\"p-1 border-t-2 font-light border-gray-300 hover:border-gray-400 active:bg-gray-400 active:border-gray-400 active:text-white\">Export</button>\r\n      </nav>\r\n    </div>\r\n  \r\n    {#if $selectedData.employment.status == \"Full-Time\"}\r\n      {#if $selectedData.advisingTime && $selectedData.advisingTime.length != 0}\r\n      <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n        <table class=\"w-full max-w-screen drop-shadow-md\">\r\n          <tr>\r\n            <!-- <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\"></th> -->\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Day</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Start</th>\r\n            <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">End</th>\r\n          </tr>\r\n          {#each $selectedData.advisingTime as schedule (schedule._id)}\r\n            <tr on:click={() => tbdSelected(schedule)}>\r\n              <!-- <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                <button on:click={() => tbdSelected(schedule)}>Delete</button>\r\n              </td> -->\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                {\r\n                  schedule.day == 0 ? \"Monday\" :\r\n                  schedule.day == 1 ? \"Tuesday\" :\r\n                  schedule.day == 2 ? \"Wednesday\" :\r\n                  schedule.day == 3 ? \"Thursday\" :\r\n                  schedule.day == 4 ? \"Friday\" :\r\n                  schedule.day == 5 ? \"Saturday\" :\r\n                  \"Sunday\"\r\n                }\r\n              </td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.start.hours > 12 ? schedule.time.start.hours - 12 : schedule.time.start.hours}:{schedule.time.start.minutes} {schedule.time.start.hours > 12 ? 'PM' : 'AM'}</td>\r\n              <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.time.end.hours > 12 ? schedule.time.end.hours - 12 : schedule.time.end.hours}:{schedule.time.end.minutes} {schedule.time.end.hours > 12 ? 'PM' : 'AM'}</td>\r\n            </tr>\r\n          {/each}\r\n        </table>\r\n      </div>\r\n    {:else}\r\n      <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n        <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n      </div>\r\n    {/if}\r\n{/if}\r\n  </div>\r\n  \r\n  <style>\r\n    tr:nth-child(even) {\r\n      background-color: rgb(229 231 235);\r\n    }\r\n    tr:nth-child(odd) {\r\n      background-color: white;\r\n    }\r\n    tr:hover {\r\n      background-color: rgb(156 163 175);\r\n      color: white\r\n    }\r\n  \r\n    @media print {\r\n      tr, th, td {\r\n        background-color: white;\r\n        color: black;\r\n      }\r\n      div {\r\n        filter: none;\r\n      }\r\n      nav {\r\n        color: transparent\r\n      }\r\n      table {\r\n        filter: none;\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n      .table-container {\r\n        width: 100%;\r\n        margin-top: -10px;\r\n        padding: 0;\r\n        padding-bottom: 10px;\r\n      }\r\n      .hero {\r\n        height: auto;\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n      }\r\n    }\r\n  </style>","<!-- v1.3.0 -->\r\n\r\n<script context=\"module\">\r\n    /**\r\n     * Create a Svelte component with props bound to it.\r\n     * @type {(component: Component, props: Record<string, any>) => Component}\r\n     */\r\n    export function bind(Component, props = {}) {\r\n      return function ModalComponent(options) {\r\n        return new Component({\r\n          ...options,\r\n          props: {\r\n            ...props,\r\n            ...options.props,\r\n          },\r\n        });\r\n      };\r\n    }\r\n  </script>\r\n  \r\n  <script>\r\n    import * as svelte from 'svelte';\r\n    import { fade } from 'svelte/transition';\r\n    import { createEventDispatcher } from 'svelte';\r\n  \r\n    const dispatch = createEventDispatcher();\r\n  \r\n    const baseSetContext = svelte.setContext;\r\n  \r\n    /**\r\n     * Svelte component to be shown as the modal\r\n     * @type {Component | null}\r\n     */\r\n    export let show = null;\r\n  \r\n    /**\r\n     * Svelte context key to reference the simple modal context\r\n     * @type {string}\r\n     */\r\n    export let key = 'simple-modal';\r\n  \r\n    /**\r\n     * Accessibility label of the modal\r\n     * @see https://www.w3.org/TR/wai-aria-1.1/#aria-label\r\n     * @type {string | null}\r\n     */\r\n    export let ariaLabel = null;\r\n  \r\n    /**\r\n     * Element ID holding the accessibility label of the modal\r\n     * @see https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby\r\n     * @type {string | null}\r\n     */\r\n    export let ariaLabelledBy = null;\r\n  \r\n    /**\r\n     * Whether to show a close button or not\r\n     * @type {Component | boolean}\r\n     */\r\n    export let closeButton = true;\r\n  \r\n    /**\r\n     * Whether to close the modal on hitting the escape key or not\r\n     * @type {boolean}\r\n     */\r\n    export let closeOnEsc = true;\r\n  \r\n    /**\r\n     * Whether to close the modal upon an outside mouse click or not\r\n     * @type {boolean}\r\n     */\r\n    export let closeOnOuterClick = true;\r\n  \r\n    /**\r\n     * CSS for styling the background element\r\n     * @type {Record<string, string | number>}\r\n     */\r\n    export let styleBg = {};\r\n  \r\n    /**\r\n     * CSS for styling the window wrapper element\r\n     * @type {Record<string, string | number>}\r\n     */\r\n    export let styleWindowWrap = {};\r\n  \r\n    /**\r\n     * CSS for styling the window element\r\n     * @type {Record<string, string | number>}\r\n     */\r\n    export let styleWindow = {};\r\n  \r\n    /**\r\n     * CSS for styling the content element\r\n     * @type {Record<string, string | number>}\r\n     */\r\n    export let styleContent = {};\r\n  \r\n    /**\r\n     * CSS for styling the close element\r\n     * @type {Record<string, string | number>}\r\n     */\r\n    export let styleCloseButton = {};\r\n  \r\n    /**\r\n     * Class name for the background element\r\n     * @type {string | null}\r\n     */\r\n    export let classBg = null;\r\n  \r\n    /**\r\n     * Class name for window wrapper element\r\n     * @type {string | null}\r\n     */\r\n    export let classWindowWrap = null;\r\n  \r\n    /**\r\n     * Class name for window element\r\n     * @type {string | null}\r\n     */\r\n    export let classWindow = null;\r\n  \r\n    /**\r\n     * Class name for content element\r\n     * @type {string | null}\r\n     */\r\n    export let classContent = null;\r\n  \r\n    /**\r\n     * Class name for close element\r\n     * @type {string | null}\r\n     */\r\n    export let classCloseButton = null;\r\n  \r\n    /**\r\n     * Do not apply default styles to the modal\r\n     * @type {boolean}\r\n     */\r\n    export let unstyled = false;\r\n  \r\n    /**\r\n     * @type {(key: any, context: any) => void}\r\n     */\r\n    export let setContext = baseSetContext;\r\n  \r\n    /**\r\n     * Transition function for the background element\r\n     * @see https://svelte.dev/docs#transition_fn\r\n     * @type {(node: Element, parameters: BlurParams) => TransitionConfig}\r\n     */\r\n    export let transitionBg = fade;\r\n  \r\n    /**\r\n     * Parameters for the background element transition\r\n     * @type {BlurParams}\r\n     */\r\n    export let transitionBgProps = { duration: 250 };\r\n  \r\n    /**\r\n     * Transition function for the window element\r\n     * @see https://svelte.dev/docs#transition_fn\r\n     * @type {(node: Element, parameters: BlurParams) => TransitionConfig}\r\n     */\r\n    export let transitionWindow = transitionBg;\r\n  \r\n    /**\r\n     * Parameters for the window element transition\r\n     * @type {BlurParams}\r\n     */\r\n    export let transitionWindowProps = transitionBgProps;\r\n  \r\n    /**\r\n     * If `true` elements outside the modal can be focused\r\n     * @type {boolean}\r\n     */\r\n    export let disableFocusTrap = false;\r\n  \r\n    const defaultState = {\r\n      ariaLabel,\r\n      ariaLabelledBy,\r\n      closeButton,\r\n      closeOnEsc,\r\n      closeOnOuterClick,\r\n      styleBg,\r\n      styleWindowWrap,\r\n      styleWindow,\r\n      styleContent,\r\n      styleCloseButton,\r\n      classBg,\r\n      classWindowWrap,\r\n      classWindow,\r\n      classContent,\r\n      classCloseButton,\r\n      transitionBg,\r\n      transitionBgProps,\r\n      transitionWindow,\r\n      transitionWindowProps,\r\n      disableFocusTrap,\r\n      unstyled,\r\n    };\r\n    let state = { ...defaultState };\r\n  \r\n    let Component = null;\r\n  \r\n    let background;\r\n    let wrap;\r\n    let modalWindow;\r\n    let scrollY;\r\n    let cssBg;\r\n    let cssWindowWrap;\r\n    let cssWindow;\r\n    let cssContent;\r\n    let cssCloseButton;\r\n    let currentTransitionBg;\r\n    let currentTransitionWindow;\r\n    let prevBodyPosition;\r\n    let prevBodyOverflow;\r\n    let prevBodyWidth;\r\n    let outerClickTarget;\r\n  \r\n    const camelCaseToDash = (str) =>\r\n      str.replace(/([a-zA-Z])(?=[A-Z])/g, '$1-').toLowerCase();\r\n  \r\n    const toCssString = (props) =>\r\n      props\r\n        ? Object.keys(props).reduce(\r\n            (str, key) => `${str}; ${camelCaseToDash(key)}: ${props[key]}`,\r\n            ''\r\n          )\r\n        : '';\r\n  \r\n    const isFunction = (f) => !!(f && f.constructor && f.call && f.apply);\r\n  \r\n    const updateStyleTransition = () => {\r\n      cssBg = toCssString(\r\n        Object.assign(\r\n          {},\r\n          {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n          },\r\n          state.styleBg\r\n        )\r\n      );\r\n      cssWindowWrap = toCssString(state.styleWindowWrap);\r\n      cssWindow = toCssString(state.styleWindow);\r\n      cssContent = toCssString(state.styleContent);\r\n      cssCloseButton = toCssString(state.styleCloseButton);\r\n      currentTransitionBg = state.transitionBg;\r\n      currentTransitionWindow = state.transitionWindow;\r\n    };\r\n  \r\n    const toVoid = () => {};\r\n    let onOpen = toVoid;\r\n    let onClose = toVoid;\r\n    let onOpened = toVoid;\r\n    let onClosed = toVoid;\r\n  \r\n    const open = (NewComponent, newProps = {}, options = {}, callback = {}) => {\r\n      Component = bind(NewComponent, newProps);\r\n      state = { ...defaultState, ...options };\r\n      updateStyleTransition();\r\n      disableScroll();\r\n      onOpen = (event) => {\r\n        if (callback.onOpen) callback.onOpen(event);\r\n        /**\r\n         * The open event is fired right before the modal opens\r\n         * @event {void} open\r\n         */\r\n        dispatch('open');\r\n        /**\r\n         * The opening event is fired right before the modal opens\r\n         * @event {void} opening\r\n         * @deprecated Listen to the `open` event instead\r\n         */\r\n        dispatch('opening'); // Deprecated. Do not use!\r\n      };\r\n      onClose = (event) => {\r\n        if (callback.onClose) callback.onClose(event);\r\n        /**\r\n         * The close event is fired right before the modal closes\r\n         * @event {void} close\r\n         */\r\n        dispatch('close');\r\n        /**\r\n         * The closing event is fired right before the modal closes\r\n         * @event {void} closing\r\n         * @deprecated Listen to the `close` event instead\r\n         */\r\n        dispatch('closing'); // Deprecated. Do not use!\r\n      };\r\n      onOpened = (event) => {\r\n        if (callback.onOpened) callback.onOpened(event);\r\n        /**\r\n         * The opened event is fired after the modal's opening transition\r\n         * @event {void} opened\r\n         */\r\n        dispatch('opened');\r\n      };\r\n      onClosed = (event) => {\r\n        if (callback.onClosed) callback.onClosed(event);\r\n        /**\r\n         * The closed event is fired after the modal's closing transition\r\n         * @event {void} closed\r\n         */\r\n        dispatch('closed');\r\n      };\r\n    };\r\n  \r\n    const close = (callback = {}) => {\r\n      if (!Component) return;\r\n      onClose = callback.onClose || onClose;\r\n      onClosed = callback.onClosed || onClosed;\r\n      Component = null;\r\n      enableScroll();\r\n    };\r\n  \r\n    const handleKeydown = (event) => {\r\n      if (state.closeOnEsc && Component && event.key === 'Escape') {\r\n        event.preventDefault();\r\n        close();\r\n      }\r\n  \r\n      if (Component && event.key === 'Tab' && !state.disableFocusTrap) {\r\n        // trap focus\r\n        const nodes = modalWindow.querySelectorAll('*');\r\n        const tabbable = Array.from(nodes).filter((node) => node.tabIndex >= 0);\r\n  \r\n        let index = tabbable.indexOf(document.activeElement);\r\n        if (index === -1 && event.shiftKey) index = 0;\r\n  \r\n        index += tabbable.length + (event.shiftKey ? -1 : 1);\r\n        index %= tabbable.length;\r\n  \r\n        tabbable[index].focus();\r\n        event.preventDefault();\r\n      }\r\n    };\r\n  \r\n    const handleOuterMousedown = (event) => {\r\n      if (\r\n        state.closeOnOuterClick &&\r\n        (event.target === background || event.target === wrap)\r\n      )\r\n        outerClickTarget = event.target;\r\n    };\r\n  \r\n    const handleOuterMouseup = (event) => {\r\n      if (state.closeOnOuterClick && event.target === outerClickTarget) {\r\n        event.preventDefault();\r\n        close();\r\n      }\r\n    };\r\n  \r\n    const disableScroll = () => {\r\n      scrollY = window.scrollY;\r\n      prevBodyPosition = document.body.style.position;\r\n      prevBodyOverflow = document.body.style.overflow;\r\n      prevBodyWidth = document.body.style.width;\r\n      document.body.style.position = 'fixed';\r\n      document.body.style.top = `-${scrollY}px`;\r\n      document.body.style.overflow = 'hidden';\r\n      document.body.style.width = '100%';\r\n    };\r\n  \r\n    const enableScroll = () => {\r\n      document.body.style.position = prevBodyPosition || '';\r\n      document.body.style.top = '';\r\n      document.body.style.overflow = prevBodyOverflow || '';\r\n      document.body.style.width = prevBodyWidth || '';\r\n      window.scrollTo(0, scrollY);\r\n    };\r\n  \r\n    setContext(key, { open, close });\r\n  \r\n    let isMounted = false;\r\n  \r\n    $: {\r\n      if (isMounted) {\r\n        if (isFunction(show)) {\r\n          open(show);\r\n        } else {\r\n          close();\r\n        }\r\n      }\r\n    }\r\n  \r\n    svelte.onDestroy(() => {\r\n      if (isMounted) close();\r\n    });\r\n  \r\n    svelte.onMount(() => {\r\n      isMounted = true;\r\n    });\r\n  </script>\r\n  \r\n  <svelte:window on:keydown={handleKeydown} />\r\n  \r\n  {#if Component}\r\n    <div\r\n      class={state.classBg}\r\n      class:bg={!unstyled}\r\n      on:mousedown={handleOuterMousedown}\r\n      on:mouseup={handleOuterMouseup}\r\n      bind:this={background}\r\n      transition:currentTransitionBg={state.transitionBgProps}\r\n      style={cssBg}\r\n    >\r\n      <div\r\n        class={state.classWindowWrap}\r\n        class:wrap={!unstyled}\r\n        bind:this={wrap}\r\n        style={cssWindowWrap}\r\n      >\r\n        <div\r\n          class={state.classWindow}\r\n          class:window={!unstyled}\r\n          role=\"dialog\"\r\n          aria-modal=\"true\"\r\n          aria-label={state.ariaLabelledBy ? null : state.ariaLabel || null}\r\n          aria-labelledby={state.ariaLabelledBy || null}\r\n          bind:this={modalWindow}\r\n          transition:currentTransitionWindow={state.transitionWindowProps}\r\n          on:introstart={onOpen}\r\n          on:outrostart={onClose}\r\n          on:introend={onOpened}\r\n          on:outroend={onClosed}\r\n          style={cssWindow}\r\n        >\r\n          {#if state.closeButton}\r\n            {#if isFunction(state.closeButton)}\r\n              <svelte:component this={state.closeButton} onClose={close} />\r\n            {:else}\r\n              <button\r\n                class={state.classCloseButton}\r\n                class:close={!unstyled}\r\n                aria-label=\"Close modal\"\r\n                on:click={close}\r\n                style={cssCloseButton}\r\n              />\r\n            {/if}\r\n          {/if}\r\n          <div\r\n            class={state.classContent}\r\n            class:content={!unstyled}\r\n            style={cssContent}\r\n          >\r\n            <svelte:component this={Component} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  {/if}\r\n  <slot />\r\n  \r\n  <style>\r\n    * {\r\n      box-sizing: border-box;\r\n    }\r\n  \r\n    .bg {\r\n      position: fixed;\r\n      z-index: 1000;\r\n      top: 0;\r\n      left: 0;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      width: 100vw;\r\n      height: 100vh;\r\n      background: rgba(0, 0, 0, 0.66);\r\n    }\r\n  \r\n    .wrap {\r\n      position: relative;\r\n      margin: 2rem;\r\n      max-height: 100%;\r\n    }\r\n  \r\n    .window {\r\n      position: relative;\r\n      width: 40rem;\r\n      max-width: 100%;\r\n      max-height: 100%;\r\n      margin: 2rem auto;\r\n      color: black;\r\n      border-radius: 0.5rem;\r\n      background: white;\r\n    }\r\n  \r\n    .content {\r\n      position: relative;\r\n      padding: 1rem;\r\n      max-height: calc(100vh - 4rem);\r\n      overflow: auto;\r\n    }\r\n  \r\n    .close {\r\n      display: block;\r\n      box-sizing: border-box;\r\n      position: absolute;\r\n      z-index: 1000;\r\n      top: 1rem;\r\n      right: 1rem;\r\n      margin: 0;\r\n      padding: 0;\r\n      width: 1.5rem;\r\n      height: 1.5rem;\r\n      border: 0;\r\n      color: black;\r\n      border-radius: 1.5rem;\r\n      background: white;\r\n      box-shadow: 0 0 0 1px black;\r\n      transition: transform 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\r\n        background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);\r\n      -webkit-appearance: none;\r\n    }\r\n  \r\n    .close:before,\r\n    .close:after {\r\n      content: '';\r\n      display: block;\r\n      box-sizing: border-box;\r\n      position: absolute;\r\n      top: 50%;\r\n      width: 1rem;\r\n      height: 1px;\r\n      background: black;\r\n      transform-origin: center;\r\n      transition: height 0.2s cubic-bezier(0.25, 0.1, 0.25, 1),\r\n        background 0.2s cubic-bezier(0.25, 0.1, 0.25, 1);\r\n    }\r\n  \r\n    .close:before {\r\n      -webkit-transform: translate(0, -50%) rotate(45deg);\r\n      -moz-transform: translate(0, -50%) rotate(45deg);\r\n      transform: translate(0, -50%) rotate(45deg);\r\n      left: 0.25rem;\r\n    }\r\n  \r\n    .close:after {\r\n      -webkit-transform: translate(0, -50%) rotate(-45deg);\r\n      -moz-transform: translate(0, -50%) rotate(-45deg);\r\n      transform: translate(0, -50%) rotate(-45deg);\r\n      left: 0.25rem;\r\n    }\r\n  \r\n    .close:hover {\r\n      background: black;\r\n    }\r\n  \r\n    .close:hover:before,\r\n    .close:hover:after {\r\n      height: 2px;\r\n      background: white;\r\n    }\r\n  \r\n    .close:focus {\r\n      border-color: #3399ff;\r\n      box-shadow: 0 0 0 2px #3399ff;\r\n    }\r\n  \r\n    .close:active {\r\n      transform: scale(0.9);\r\n    }\r\n  \r\n    .close:hover,\r\n    .close:focus,\r\n    .close:active {\r\n      outline: none;\r\n    }\r\n  </style>\r\n  ","<script>\r\n    // export let message = 'Default message';\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import 'material-icons/iconfont/material-icons.css';\r\n    import { selectedData } from '../stores/ui';\r\n    import { onMount, onDestroy } from 'svelte';\r\n\r\n    export let professor = {};\r\n    let professorSchedules, remainingLoad = 0;\r\n\r\n    console.log(professor);\r\n\r\n    onMount(() => {\r\n        console.log(\"Mounted\");\r\n        console.log(professor._id);\r\n        ipcRenderer.send(\"retrieve-schedule-professor-data\", professor._id);\r\n    });\r\n\r\n    onDestroy(() => {\r\n        console.log(\"Destroyed\");\r\n        ipcRenderer.removeAllListeners(\"retrieve-schedule-professor-data\");\r\n    })\r\n\r\n    ipcRenderer.on(\"retrieve-schedule-professor-data\", (event, res) => {\r\n    let temporaryContainer = res;\r\n    temporaryContainer.forEach(temporaryTime => {\r\n      if (temporaryTime.time.start.hours >= 13) {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.start.hours % 12 == 0) {\r\n        temporaryTime.time.start.hours = 12;\r\n        if (temporaryTime.time.start.hours == 12) {\r\n          temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} PM`;\r\n        } else temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.start.hours % 12 < 10) temporaryTime.time.start.hours = \"0\" + temporaryTime.time.start.hours % 12;\r\n        else temporaryTime.time.start.hours = temporaryTime.time.start.hours % 12;\r\n        temporaryTime.time.start.minutes = `${temporaryTime.time.start.minutes} AM`;\r\n      }\r\n\r\n      if (temporaryTime.time.end.hours >= 13) {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n      }\r\n      else if (temporaryTime.time.end.hours % 12 == 0) {\r\n        temporaryTime.time.end.hours = 12;\r\n        if (temporaryTime.time.end.hours == 12) {\r\n          temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} PM`;\r\n        } else temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n      else {\r\n        if (temporaryTime.time.end.hours % 12 < 10) temporaryTime.time.end.hours = \"0\" + temporaryTime.time.end.hours % 12;\r\n        else temporaryTime.time.end.hours = temporaryTime.time.end.hours % 12;\r\n        temporaryTime.time.end.minutes = `${temporaryTime.time.end.minutes} AM`;\r\n      }\r\n    });\r\n\r\n    remainingLoad = 0;\r\n    res.forEach((time) => {\r\n      remainingLoad = remainingLoad + time.courseData.hours\r\n    });\r\n\r\n    professorSchedules = temporaryContainer;\r\n  });    \r\n</script>\r\n  \r\n<style>\r\nh2 {\r\n        font-size: 2rem;\r\n        text-align: center;\r\n    }\r\n</style>\r\n  \r\n<div class=\"overflow-auto w-full h-full flex flex-col items-center\">\r\n    <div class=\"h-auto w-full bg-gray-200 rounded-md drop-shadow-md flex flex-col justify-end items-end\">\r\n        <div class=\"h-52 w-full p-4 flex flex-col justify-end hero\">\r\n          <h1 class=\"py-2 -my-2 text-4xl font-light whitespace-nowrap overflow-hidden text-ellipsis\" title=\"{professor.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {professor.name.last}, {professor.name.first}\">{professor.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {professor.name.last}, {professor.name.first}</h1>\r\n          <h2 class=\"text-gray-700 w-full whitespace-nowrap overflow-hidden text-ellipsis\" title={professor.address}>{professor.address}</h2>\r\n          <h3 class=\"mb-2 text-gray-700\">Employement : {professor.employment.status} | Contact: {professor.contact} | Load: {professor.employment.hours} | Remaining: {professor.employment.hours - remainingLoad} | \r\n          Status :\r\n          { \r\n            professor.status == \"REGULAR\" ? \"Regular\" :\r\n            professor.status == \"PART TIME\" ? \"Part Time\" :\r\n            professor.status == \"TEMPORARY\" ? \"Temporary\" :\r\n            \"\"\r\n          }\r\n          </h3>\r\n        </div>\r\n    </div>\r\n\r\n    {#if professorSchedules}\r\n        {#if professorSchedules.length != 0}\r\n        <div class=\"w-full p-8 flex justify-center pb-20 table-container\">\r\n            <table class=\"w-full max-w-screen drop-shadow-md\">\r\n            <tr>\r\n                <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">A.Y.</th>\r\n                <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Semester</th>\r\n                <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Type</th>\r\n                <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">Course Code</th>\r\n                <th class=\"py-3 px-2 text-left border border-gray-300 bg-red-800 text-white font-light\">\r\n                    <span style=\"float:left\">\r\n                        Course\r\n                    </span>\r\n                </th>\r\n            </tr>\r\n            {#each professorSchedules as schedule (schedule._id)}\r\n                <tr>\r\n                <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.year} - {parseInt(schedule.school.year) + 1}</td>\r\n                <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.school.semester == 0 ? \"1st Sem\" : schedule.school.semester == 1 ? \"2nd Sem\" : \"Summer\"}</td>\r\n                <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">\r\n                    {\r\n                    schedule.type == \"REGULAR\" ? \"Regular\" :\r\n                    schedule.type == \"SUBSTITUTE\" ? \"Substitute\" :\r\n                    schedule.type == \"TEMPORARY SUBSTITUTE\" ? \"Temporary Substitute\" :\r\n                    \"\"\r\n                    }\r\n                </td>              \r\n                <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.name}</td>\r\n                <td class=\"py-3 px-2 text-left border border-gray-300 font-light\">{schedule.courseData.name}</td>\r\n                </tr>\r\n            {/each}\r\n            </table>\r\n        </div>\r\n        {:else}\r\n        <div class=\"w-full h-full p-8 flex justify-center items-center\">\r\n            <h1 class=\"text-4xl font-thin text-center\">No schedules found.</h1>\r\n        </div>\r\n        {/if}\r\n    {/if}      \r\n</div>","import { writable } from 'svelte/store';\r\n\r\nexport const modal = writable(null);\r\nexport const windowStyle = writable({});","<script>\r\n    const { ipcRenderer } = require(\"electron\");\r\n    import 'material-icons/iconfont/material-icons.css';\r\n    import { selectedData } from '../stores/ui';\r\n    import { onMount, onDestroy } from 'svelte';\r\n  \r\n    let professorData = [];\r\n    let allow = 0;\r\n\r\n    onMount(() => {\r\n      ipcRenderer.send(\"retrieve-professor-data\");\r\n      allow = 1;\r\n    });\r\n  \r\n    let search = \"\";\r\n  \r\n    let searchData = (search) => {\r\n      console.log('Search Data');\r\n      console.log('search ' + search);    \r\n      ipcRenderer.send(\"retrieve-professor-data\" , search);\r\n    };\r\n  \r\n    ipcRenderer.on(\"retrieve-professor-data\", (event, res) => {\r\n      console.log(res);\r\n      console.log(\"search\" + search);\r\n      professorData = res;\r\n      console.log(professorData);\r\n    });\r\n  \r\n    let selectData = (data) => {\r\n      // $selectedData = data;\r\n\r\n    }\r\n  \r\n    onDestroy(() => {      \r\n      modal.set(null);\r\n      allow = 0;\r\n      ipcRenderer.removeAllListeners(\"retrieve-professor-data\");\r\n    })\r\n\r\n    import { fly } from 'svelte/transition';\r\n\t\r\n\timport { bind } from './CustomModal.svelte';\r\n\t\r\n  import Popup from './Popup.svelte';\r\n\t\r\n  import Modal from './CustomModal.svelte';\r\n\timport { modal } from './stores.js';\r\n\t\r\n\tlet opening = false;\r\n\tlet opened = false;\r\n\tlet closing = false;\r\n\tlet closed = false;\r\n\r\n  const showPopup = () => {\r\n\t\tmodal.set(Popup);\r\n\t};\r\n\r\n  let showPopupWithProps = (professor) => {\r\n    console.log(\"click\");\r\n    console.log(\"allow : \" + allow);\r\n    if(allow == 1)\r\n    {\r\n      modal.set(bind(Popup, { professor : professor }));\r\n    }\r\n\t};\r\n  </script>\r\n  \r\n  <svelte:head>\r\n    <title>.dotSystems - Professors</title>\r\n  </svelte:head>\r\n  \r\n  <div class=\"overflow-auto w-full h-full flex flex-col pb-20\">\r\n    <div class=\"w-full flex\">\r\n      <input bind:value={search} type=\"text\" class=\"p-2 w-full drop-shadow-md m-2 rounded-md font-light\" name=\"Search professor\" id=\"search\" placeholder=\"Search Professor By Name\" />\r\n      <button on:click={searchData(search)} class=\"px-5 py-1 drop-shadow-md rounded-full font-light my-2 mx-1 mr-2 bg-gray-300 hover:bg-gray-300 active:bg-gray-400 active:text-white disabled:bg-gray-100\">Search</button>\r\n    </div>\r\n    {#if professorData.length != 0}\r\n      {#each professorData as professor (professor._id)}\r\n        <button on:click={() => showPopupWithProps(professor)} class=\"card h-14 w-full border-b flex flex-row justify-between items-center hover:bg-gray-100 active:bg-gray-200\">\r\n          <h1 class=\"text-xl font-light m-6\">{professor.gender == \"male\" ? \"Mr.\" : \"Ms.\"} {professor.name.last}, {professor.name.first} - [\r\n            {\r\n              professor.status == \"REGULAR\" ? \"Regular\" :\r\n              professor.status == \"PART TIME\" ? \"Part time\" :\r\n              professor.status == \"TEMPORARY\" ? \"Temporary\" :\r\n              \"\"\r\n            } - {professor.employment.status}]</h1>\r\n          <!-- <h2 class=\"p-6 text-3xl font-light -mt-1\">></h2> -->\r\n          <!-- <button on:click={() => showPopupWithProps(professor)} class=\"p-6 text-3xl font-light -mt-1\">></button> -->\r\n        </button>\r\n        <!-- <button >View Details</button> -->\r\n        <!-- <button on:click={showSurprise}>Show me a surprise!</button> -->        \r\n      {/each}\r\n    {:else}\r\n      <h1 class=\"text-4xl font-thin text-center\">No data found.</h1>\r\n    {/if}\r\n  </div>\r\n  \r\n  <Modal show={$modal}>\r\n\t\r\n  </Modal>","<script>\r\n\t\r\n\tconst { ipcRenderer } = require(\"electron\");\r\n\r\n\timport { fade } from \"svelte/transition\"\r\n\r\n\timport Header from \"./components/Header.svelte\";\r\n\timport SideMenu from \"./components/SideMenu.svelte\";\r\n\timport AddButton from \"./components/AddButton.svelte\";\r\n\timport AddWindow from \"./components/AddWindow.svelte\";\r\n\timport EditWindow from \"./components/EditWindow.svelte\";\r\n\timport DeleteWindow from \"./components/DeleteWindow.svelte\";\r\n\timport DeleteScheduleWindow from \"./components/DeleteScheduleWindow.svelte\";\r\n\timport ResetPasswordWindow from \"./components/ResetPasswordWindow.svelte\";\r\n\timport ExitApplicationWindow from \"./components/ExitApplicationWindow.svelte\";\r\n\timport Logo from \"./components/Logo.svelte\";\r\n\r\n\timport Dashboard from \"./views/Dashboard.svelte\";\r\n\timport Courses from \"./views/Courses.svelte\";\r\n\timport Rooms from \"./views/Rooms.svelte\";\r\n\timport Professors from \"./views/Professors.svelte\";\r\n\timport Programs from \"./views/Programs.svelte\";\r\n\timport Subjects from \"./views/Subjects.svelte\";\r\n\timport Schedules from \"./views/Schedules.svelte\";\t\r\n\timport SettingsWindow from \"./components/SettingsWindow.svelte\";\r\n\timport LoadingScreen from \"./components/LoadingScreen.svelte\";\r\n\timport LoginScreen from \"./components/LoginScreen.svelte\";\r\n\timport RoomView from \"./views/individualViews/RoomView.svelte\";\r\n\timport ProfessorView from \"./views/individualViews/professorView.svelte\";\r\n\timport ProgramView from \"./views/individualViews/ProgramView.svelte\";\r\n\timport AdviceTime from \"./views/individualViews/AdviceTime.svelte\";\r\n\timport ProfessorOverview from \"./views/ProfessorOverview.svelte\";\r\n\r\n\timport { viewComponentValue, loadingScreenDone, authenticateComplete, selectedData, sideMenuStatus, addWindowStatus, editWindowStatus, settingsWindowStatus, deleteWindowStatus, deleteWindowScheduleStatus, exitApplicationWindowStatus } from \"./stores/ui\";\r\n\r\n\tlet loadingStatus = setInterval(() => {\r\n\t\tipcRenderer.send(\"loading-screen\");\r\n\t}, 500)\r\n\r\n\tipcRenderer.on(\"loading-screen\", (event, res) => {\r\n\t\tif (res) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tloadingScreenDone.set(true);\r\n\t\t\t\tclearInterval(loadingStatus);\r\n\t\t\t}, 3000);\r\n\t\t}\r\n\t});\r\n\r\n\tdocument.onkeydown = (e) => {\r\n\t\tif (e.key == \"Tab\" && $addWindowStatus != true && $editWindowStatus != true && $settingsWindowStatus != true && $authenticateComplete == true) sideMenuStatus.set(!$sideMenuStatus);\r\n\t\tif (e.key == \"Escape\" && ($addWindowStatus == true || $editWindowStatus == true || $sideMenuStatus == true || $settingsWindowStatus == true) || $deleteWindowScheduleStatus == true || $deleteWindowStatus == true || $exitApplicationWindowStatus == true) {\r\n\t\t\taddWindowStatus.set(false);\r\n\t\t\teditWindowStatus.set(false);\r\n\t\t\tsettingsWindowStatus.set(false);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tdeleteWindowStatus.set(false);\r\n\t\t\tdeleteWindowScheduleStatus.set(false);\r\n\t\t\texitApplicationWindowStatus.set(false);\r\n\t\t}\r\n\t\tif (e.key == \"1\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(0);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t\tif (e.key == \"2\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(1);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t\tif (e.key == \"3\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(2);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t\tif (e.key == \"4\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(3);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t\tif (e.key == \"5\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(4);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t\tif (e.key == \"6\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(5);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t\tif (e.key == \"7\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(6);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\t\t\r\n\t\tif (e.key == \"8\" && ($addWindowStatus == false && $editWindowStatus == false && $sideMenuStatus == true)) {\r\n\t\t\tviewComponentValue.set(7);\r\n\t\t\tsideMenuStatus.set(false);\r\n\t\t\tselectedData.set(\"\");\r\n\t\t}\r\n\t}\r\n\r\n</script>\r\n\r\n{#if !$loadingScreenDone}\r\n\t<LoadingScreen />\r\n{:else if !$authenticateComplete}\r\n\t<ResetPasswordWindow />\r\n\t<LoginScreen />\r\n{:else if $authenticateComplete}\r\n\t<SideMenu />\r\n\t<AddWindow />\r\n\t<EditWindow />\r\n\t<DeleteWindow />\r\n\t<DeleteScheduleWindow />\r\n\t<SettingsWindow />\r\n\t<ExitApplicationWindow />\r\n\t<Logo />\r\n\t<main in:fade={{delay: 250, duration: 250}} class=\"w-screen h-screen grid grid-rows-2\">\r\n\t\t<Header />\r\n\t\t{#if $selectedData == \"\" || $viewComponentValue == 1}\r\n\t\t\t{#if $viewComponentValue == 0}\r\n\t\t\t\t<Dashboard />\r\n\t\t\t{:else if $viewComponentValue == 1}\r\n\t\t\t\t<Courses />\r\n\t\t\t{:else if $viewComponentValue == 2}\r\n\t\t\t\t<Rooms />\r\n\t\t\t{:else if $viewComponentValue == 3}\r\n\t\t\t\t<Professors />\r\n\t\t\t{:else if $viewComponentValue == 4}\r\n\t\t\t\t<Programs />\r\n\t\t\t{:else if $viewComponentValue == 5}\r\n\t\t\t\t<Subjects />\r\n\t\t\t{:else if $viewComponentValue == 6}\r\n\t\t\t\t<Schedules />\r\n\t\t\t{:else if $viewComponentValue == 7}\r\n\t\t\t\t<ProfessorOverview />\r\n\t\t\t{/if}\r\n\t\t{:else}\r\n\t\t\t{#if $viewComponentValue == 2}\r\n\t\t\t\t<RoomView />\r\n\t\t\t{:else if $viewComponentValue == 3}\r\n\t\t\t\t<ProfessorView />\r\n\t\t\t{:else if $viewComponentValue == 4}\r\n\t\t\t\t<ProgramView />\r\n\t\t\t{:else if $viewComponentValue == 8}\r\n\t\t\t\t<AdviceTime />\t\t\t\t\r\n\t\t\t{/if}\r\n\t\t{/if}\r\n\t</main>\r\n\t\r\n\t{#if $selectedData == \"\" || ($viewComponentValue !== 7 || $viewComponentValue !== 8) }\r\n\t\t<AddButton />\r\n\t{/if}\r\n{/if}\r\n\r\n<style>\r\n\tmain {\r\n\t\tgrid-template-rows: auto 1fr;\r\n\t}\r\n</style>","import App from \"./App.svelte\";\nimport \"./css/tailwind.css\";\nimport \"./css/global.css\";\n\nconst app = new App({\n\ttarget: document.body,\n});\n\nexport default app;\n"],"names":["bind","linear","create_if_block_1","create_if_block_2","create_if_block","create_if_block_6","create_if_block_5","create_if_block_4","create_if_block_3","create_if_block_7","svelte.setContext","setContext","svelte.onDestroy","svelte.onMount"],"mappings":"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"}